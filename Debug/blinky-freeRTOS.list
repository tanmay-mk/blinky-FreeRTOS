
blinky-freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a004  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b4  0800a5b4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5bc  0800a5bc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5c0  0800a5c0  0001a5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dce8  20000080  0800a644  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000dd68  0800a644  0002dd68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9e1  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa8  00000000  00000000  0003aa91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  0003fb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a2ac  00000000  00000000  00041048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f94  00000000  00000000  0006b2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff6bc  00000000  00000000  00085288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184944  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006584  00000000  00000000  00184994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a17c 	.word	0x0800a17c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800a17c 	.word	0x0800a17c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <vApplicationGetIdleTaskMemory+0x30>)
 800059a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	2000009c 	.word	0x2000009c
 80005b4:	200000f8 	.word	0x200000f8

080005b8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetTimerTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005d6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d8:	bf00      	nop
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	200008f8 	.word	0x200008f8
 80005e8:	20000954 	.word	0x20000954

080005ec <__io_putchar>:

/*
 * Retargets the C library printf function to the USART.
 */
PUTCHAR_PROTOTYPE
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005fa:	2201      	movs	r2, #1
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <__io_putchar+0x20>)
 80005fe:	f004 f86b 	bl	80046d8 <HAL_UART_Transmit>
    return ch;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200019a0 	.word	0x200019a0

08000610 <HAL_UART_RxCpltCallback>:

//this gets called after data reception is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	static uint8_t i = 0;

	if (byte != '\b')				//if character is not backspace
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <HAL_UART_RxCpltCallback+0xbc>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d016      	beq.n	800064e <HAL_UART_RxCpltCallback+0x3e>
	{
		buffer[i++] = byte;			//store the received byte in a buffer
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	b2d1      	uxtb	r1, r2
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 800062a:	7011      	strb	r1, [r2, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <HAL_UART_RxCpltCallback+0xbc>)
 8000630:	7819      	ldrb	r1, [r3, #0]
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <HAL_UART_RxCpltCallback+0xc4>)
 8000634:	5499      	strb	r1, [r3, r2]
		printf("%c", byte);			//print the data
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_UART_RxCpltCallback+0xbc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f008 ffd8 	bl	80095f0 <putchar>
		fflush(stdout);				//force flush to stdout
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <HAL_UART_RxCpltCallback+0xc8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	4618      	mov	r0, r3
 8000648:	f008 fd94 	bl	8009174 <fflush>
 800064c:	e012      	b.n	8000674 <HAL_UART_RxCpltCallback+0x64>
	}
	else							//if user enters backspace
	{
		if (i == 0)					//this will avoid segmentation fault
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d00e      	beq.n	8000674 <HAL_UART_RxCpltCallback+0x64>
			//do nothing if i = 0
		}

		else
		{
			i--;					//decrement index counter so that we can overwrite in buffer
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	3b01      	subs	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 8000660:	701a      	strb	r2, [r3, #0]
			printf("\b \b");		//erase previously entered character
 8000662:	481e      	ldr	r0, [pc, #120]	; (80006dc <HAL_UART_RxCpltCallback+0xcc>)
 8000664:	f008 ffac 	bl	80095c0 <iprintf>
			fflush(stdout);			//force flush to stdout
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_UART_RxCpltCallback+0xc8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	4618      	mov	r0, r3
 8000670:	f008 fd80 	bl	8009174 <fflush>
		}
	}

	if (byte == '\r')			//user hit enter, data reception complete
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <HAL_UART_RxCpltCallback+0xbc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b0d      	cmp	r3, #13
 800067a:	d118      	bne.n	80006ae <HAL_UART_RxCpltCallback+0x9e>
	{
		printf("\n");
 800067c:	200a      	movs	r0, #10
 800067e:	f008 ffb7 	bl	80095f0 <putchar>
		rx_flag = true;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_UART_RxCpltCallback+0xd0>)
 8000684:	2201      	movs	r2, #1
 8000686:	701a      	strb	r2, [r3, #0]
		buffer[i++] = '\0';		//put a null character at the end of buffer
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	b2d1      	uxtb	r1, r2
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 8000692:	7011      	strb	r1, [r2, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_UART_RxCpltCallback+0xc4>)
 8000698:	2100      	movs	r1, #0
 800069a:	5499      	strb	r1, [r3, r2]
		i=0;					//reset index counter to zero for next iteration
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t *)&byte, 1);	//re-arm the interrupt
 80006a2:	2201      	movs	r2, #1
 80006a4:	4909      	ldr	r1, [pc, #36]	; (80006cc <HAL_UART_RxCpltCallback+0xbc>)
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <HAL_UART_RxCpltCallback+0xd4>)
 80006a8:	f004 f8aa 	bl	8004800 <HAL_UART_Receive_IT>
		return;
 80006ac:	e00b      	b.n	80006c6 <HAL_UART_RxCpltCallback+0xb6>
	}

	if (i >= 20)		//to avoid seg fault
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b13      	cmp	r3, #19
 80006b4:	d902      	bls.n	80006bc <HAL_UART_RxCpltCallback+0xac>
	{					//should never come here, ideally
		i = 0;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_UART_RxCpltCallback+0xc0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t *)&byte, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	4903      	ldr	r1, [pc, #12]	; (80006cc <HAL_UART_RxCpltCallback+0xbc>)
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <HAL_UART_RxCpltCallback+0xd4>)
 80006c2:	f004 f89d 	bl	8004800 <HAL_UART_Receive_IT>
}
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20001a27 	.word	0x20001a27
 80006d0:	20001a5c 	.word	0x20001a5c
 80006d4:	20001a28 	.word	0x20001a28
 80006d8:	2000001c 	.word	0x2000001c
 80006dc:	0800a194 	.word	0x0800a194
 80006e0:	20001a24 	.word	0x20001a24
 80006e4:	200019a0 	.word	0x200019a0

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ee:	f000 ffcb 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f2:	f000 f8a5 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f6:	f000 f983 	bl	8000a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 f951 	bl	80009a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006fe:	f000 f8f1 	bl	80008e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&byte, 1); //enable UART Receive Interrupt
 8000702:	2201      	movs	r2, #1
 8000704:	493a      	ldr	r1, [pc, #232]	; (80007f0 <main+0x108>)
 8000706:	483b      	ldr	r0, [pc, #236]	; (80007f4 <main+0x10c>)
 8000708:	f004 f87a 	bl	8004800 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	//start generating PWM
 800070c:	2100      	movs	r1, #0
 800070e:	483a      	ldr	r0, [pc, #232]	; (80007f8 <main+0x110>)
 8000710:	f002 fff6 	bl	8003700 <HAL_TIM_PWM_Start>

  //create events group
  xEventsGroup = xEventGroupCreate();
 8000714:	f005 fb0b 	bl	8005d2e <xEventGroupCreate>
 8000718:	4603      	mov	r3, r0
 800071a:	4a38      	ldr	r2, [pc, #224]	; (80007fc <main+0x114>)
 800071c:	6013      	str	r3, [r2, #0]
  if (xEventsGroup == NULL)
 800071e:	4b37      	ldr	r3, [pc, #220]	; (80007fc <main+0x114>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d103      	bne.n	800072e <main+0x46>
  {
	  printf("Failed to create Message Queue... Entering infinite loop\n\r");
 8000726:	4836      	ldr	r0, [pc, #216]	; (8000800 <main+0x118>)
 8000728:	f008 ff4a 	bl	80095c0 <iprintf>
	  while(1);
 800072c:	e7fe      	b.n	800072c <main+0x44>

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  /* Create a mutex type semaphore. */
  xMutex = xSemaphoreCreateMutex();
 800072e:	2001      	movs	r0, #1
 8000730:	f005 fed7 	bl	80064e2 <xQueueCreateMutex>
 8000734:	4603      	mov	r3, r0
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <main+0x11c>)
 8000738:	6013      	str	r3, [r2, #0]
  if( xMutex == NULL )
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <main+0x11c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d103      	bne.n	800074a <main+0x62>
  {
	  printf("Failed to create Semaphore Mutex... Entering infinite loop\n\r");
 8000742:	4831      	ldr	r0, [pc, #196]	; (8000808 <main+0x120>)
 8000744:	f008 ff3c 	bl	80095c0 <iprintf>
	  while(1);
 8000748:	e7fe      	b.n	8000748 <main+0x60>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  //create message queue

  xQueueHandle1 = xQueueCreate(25, sizeof(uint8_t));
 800074a:	2200      	movs	r2, #0
 800074c:	2101      	movs	r1, #1
 800074e:	2019      	movs	r0, #25
 8000750:	f005 fe50 	bl	80063f4 <xQueueGenericCreate>
 8000754:	4603      	mov	r3, r0
 8000756:	4a2d      	ldr	r2, [pc, #180]	; (800080c <main+0x124>)
 8000758:	6013      	str	r3, [r2, #0]
  if (xQueueHandle1 == NULL)
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <main+0x124>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d103      	bne.n	800076a <main+0x82>
  {
	  printf("Failed to create Message Queue... Entering infinite loop\n\r");
 8000762:	4827      	ldr	r0, [pc, #156]	; (8000800 <main+0x118>)
 8000764:	f008 ff2c 	bl	80095c0 <iprintf>
	  while(1);
 8000768:	e7fe      	b.n	8000768 <main+0x80>

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  //create tasks
   BaseType_t xStatus = 0;		//to check return status of xTaskCreate()
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]

  //task with highest priority
  	xStatus = xTaskCreate(
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <main+0x128>)
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	2303      	movs	r3, #3
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2300      	movs	r3, #0
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	4925      	ldr	r1, [pc, #148]	; (8000814 <main+0x12c>)
 800077e:	4826      	ldr	r0, [pc, #152]	; (8000818 <main+0x130>)
 8000780:	f006 fc31 	bl	8006fe6 <xTaskCreate>
 8000784:	6078      	str	r0, [r7, #4]
			  512,
			  NULL,
			  tskIDLE_PRIORITY+3,
			  &Control_States_Handle);

  	if (xStatus != pdPASS)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d003      	beq.n	8000794 <main+0xac>
  	{
  		printf("Failed to create task Control_States... Entering infinite loop\n\r");
 800078c:	4823      	ldr	r0, [pc, #140]	; (800081c <main+0x134>)
 800078e:	f008 ff17 	bl	80095c0 <iprintf>
  		while(1);
 8000792:	e7fe      	b.n	8000792 <main+0xaa>
  	}

  	xStatus = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
  	//task with middle priority
    xStatus = xTaskCreate(
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <main+0x138>)
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2302      	movs	r3, #2
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a6:	491f      	ldr	r1, [pc, #124]	; (8000824 <main+0x13c>)
 80007a8:	481f      	ldr	r0, [pc, #124]	; (8000828 <main+0x140>)
 80007aa:	f006 fc1c 	bl	8006fe6 <xTaskCreate>
 80007ae:	6078      	str	r0, [r7, #4]
  			  512,
  			  NULL,
  			  tskIDLE_PRIORITY+2,
			  &UART_Rx_Complete_Handle);

    if (xStatus != pdPASS)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d003      	beq.n	80007be <main+0xd6>
    {
  	  printf("Failed to create task UART_Rx_Complete... Entering infinite loop\n\r");
 80007b6:	481d      	ldr	r0, [pc, #116]	; (800082c <main+0x144>)
 80007b8:	f008 ff02 	bl	80095c0 <iprintf>
  	  while(1);
 80007bc:	e7fe      	b.n	80007bc <main+0xd4>
    }

    xStatus = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
    //task with lowest priority
    xStatus = xTaskCreate(
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <main+0x148>)
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	2301      	movs	r3, #1
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	4918      	ldr	r1, [pc, #96]	; (8000834 <main+0x14c>)
 80007d2:	4819      	ldr	r0, [pc, #100]	; (8000838 <main+0x150>)
 80007d4:	f006 fc07 	bl	8006fe6 <xTaskCreate>
 80007d8:	6078      	str	r0, [r7, #4]
			  512,
  			  NULL,
  			  tskIDLE_PRIORITY+1,
			  &Parse_Data_Handle);

    if (xStatus != pdPASS)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d003      	beq.n	80007e8 <main+0x100>
    {
  	  printf("Failed to create task Parse_Data... Entering infinite loop\n\r");
 80007e0:	4816      	ldr	r0, [pc, #88]	; (800083c <main+0x154>)
 80007e2:	f008 feed 	bl	80095c0 <iprintf>
  	  while(1);
 80007e6:	e7fe      	b.n	80007e6 <main+0xfe>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //putting it here so that re-generating .ioc file will not erase it
  vTaskStartScheduler();
 80007e8:	f006 fd74 	bl	80072d4 <vTaskStartScheduler>

  //should never come here
  while (1)
 80007ec:	e7fe      	b.n	80007ec <main+0x104>
 80007ee:	bf00      	nop
 80007f0:	20001a27 	.word	0x20001a27
 80007f4:	200019a0 	.word	0x200019a0
 80007f8:	20001954 	.word	0x20001954
 80007fc:	20001a58 	.word	0x20001a58
 8000800:	0800a198 	.word	0x0800a198
 8000804:	20001a54 	.word	0x20001a54
 8000808:	0800a1d4 	.word	0x0800a1d4
 800080c:	20001a50 	.word	0x20001a50
 8000810:	20001a4c 	.word	0x20001a4c
 8000814:	0800a214 	.word	0x0800a214
 8000818:	08000dc1 	.word	0x08000dc1
 800081c:	0800a224 	.word	0x0800a224
 8000820:	20001a44 	.word	0x20001a44
 8000824:	0800a268 	.word	0x0800a268
 8000828:	08000acd 	.word	0x08000acd
 800082c:	0800a27c 	.word	0x0800a27c
 8000830:	20001a48 	.word	0x20001a48
 8000834:	0800a2c0 	.word	0x0800a2c0
 8000838:	08000bb9 	.word	0x08000bb9
 800083c:	0800a2cc 	.word	0x0800a2cc

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	; 0x58
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2244      	movs	r2, #68	; 0x44
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f008 fdcd 	bl	80093ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000862:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000866:	f001 fa81 	bl	8001d6c <HAL_PWREx_ControlVoltageScaling>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000870:	f000 fcae 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000886:	2302      	movs	r3, #2
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800088e:	230a      	movs	r3, #10
 8000890:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000892:	2307      	movs	r3, #7
 8000894:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089a:	2302      	movs	r3, #2
 800089c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fab8 	bl	8001e18 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ae:	f000 fc8f 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2303      	movs	r3, #3
 80008b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	2104      	movs	r1, #4
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fe80 	bl	80025d0 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008d6:	f000 fc7b 	bl	80011d0 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3758      	adds	r7, #88	; 0x58
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <MX_TIM2_Init+0xb0>)
 800090a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <MX_TIM2_Init+0xb0>)
 8000912:	2250      	movs	r2, #80	; 0x50
 8000914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM2_Init+0xb0>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = time_period;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM2_Init+0xb4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_TIM2_Init+0xb0>)
 8000922:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_TIM2_Init+0xb0>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM2_Init+0xb0>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <MX_TIM2_Init+0xb0>)
 8000932:	f002 fe31 	bl	8003598 <HAL_TIM_PWM_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 fc48 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4811      	ldr	r0, [pc, #68]	; (8000994 <MX_TIM2_Init+0xb0>)
 8000950:	f003 fdce 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800095a:	f000 fc39 	bl	80011d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095e:	2360      	movs	r3, #96	; 0x60
 8000960:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = pulse_width;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_TIM2_Init+0xb8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_TIM2_Init+0xb0>)
 8000978:	f003 f8e8 	bl	8003b4c <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000982:	f000 fc25 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <MX_TIM2_Init+0xb0>)
 8000988:	f000 fc6e 	bl	8001268 <HAL_TIM_MspPostInit>

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	; 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20001954 	.word	0x20001954
 8000998:	20000000 	.word	0x20000000
 800099c:	20000004 	.word	0x20000004

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <MX_USART2_UART_Init+0x5c>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009e4:	f003 fe2a 	bl	800463c <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 fbef 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200019a0 	.word	0x200019a0
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_GPIO_Init+0xc4>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2120      	movs	r1, #32
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f001 f94f 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MX_GPIO_Init+0xc8>)
 8000a9a:	f000 ff97 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 ff88 	bl	80019cc <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000800 	.word	0x48000800

08000acc <UART_Rx_Complete>:

/* USER CODE BEGIN 4 */
//-------------------------------------------------------------------------
void UART_Rx_Complete (void *args)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	uint8_t byte_rcvd;
	bool rx_flag_local;
	static uint32_t i = 0;
	for(;;)
	{
		while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8000ad4:	bf00      	nop
 8000ad6:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <UART_Rx_Complete+0xd8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	210a      	movs	r1, #10
 8000adc:	4618      	mov	r0, r3
 8000ade:	f005 ff93 	bl	8006a08 <xQueueSemaphoreTake>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d1f6      	bne.n	8000ad6 <UART_Rx_Complete+0xa>
		rx_flag_local = rx_flag;												//reading global memory
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <UART_Rx_Complete+0xdc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	73fb      	strb	r3, [r7, #15]
		while(xSemaphoreGive(xMutex) != pdTRUE);
 8000aee:	bf00      	nop
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <UART_Rx_Complete+0xd8>)
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	2300      	movs	r3, #0
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	f005 fd0b 	bl	8006514 <xQueueGenericSend>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d1f5      	bne.n	8000af0 <UART_Rx_Complete+0x24>

		if(rx_flag_local == true)
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0e4      	beq.n	8000ad4 <UART_Rx_Complete+0x8>
		{
			while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8000b0a:	bf00      	nop
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <UART_Rx_Complete+0xd8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	210a      	movs	r1, #10
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 ff78 	bl	8006a08 <xQueueSemaphoreTake>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d1f6      	bne.n	8000b0c <UART_Rx_Complete+0x40>
			byte_rcvd = buffer[i++];
 8000b1e:	4b23      	ldr	r3, [pc, #140]	; (8000bac <UART_Rx_Complete+0xe0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	4921      	ldr	r1, [pc, #132]	; (8000bac <UART_Rx_Complete+0xe0>)
 8000b26:	600a      	str	r2, [r1, #0]
 8000b28:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <UART_Rx_Complete+0xe4>)
 8000b2a:	5cd3      	ldrb	r3, [r2, r3]
 8000b2c:	73bb      	strb	r3, [r7, #14]
			while(xSemaphoreGive(xMutex) != pdTRUE);
 8000b2e:	bf00      	nop
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <UART_Rx_Complete+0xd8>)
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	2300      	movs	r3, #0
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f005 fceb 	bl	8006514 <xQueueGenericSend>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d1f5      	bne.n	8000b30 <UART_Rx_Complete+0x64>

			xQueueSend(xQueueHandle1, &byte_rcvd, 100);
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <UART_Rx_Complete+0xe8>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	f107 010e 	add.w	r1, r7, #14
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2264      	movs	r2, #100	; 0x64
 8000b50:	f005 fce0 	bl	8006514 <xQueueGenericSend>
			if (byte_rcvd == '\r')
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	2b0d      	cmp	r3, #13
 8000b58:	d11f      	bne.n	8000b9a <UART_Rx_Complete+0xce>
			{
				i = 0;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <UART_Rx_Complete+0xe0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]

				while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);		//wait here till we obtain the mutex lock
 8000b60:	bf00      	nop
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <UART_Rx_Complete+0xd8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	210a      	movs	r1, #10
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f005 ff4d 	bl	8006a08 <xQueueSemaphoreTake>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d1f6      	bne.n	8000b62 <UART_Rx_Complete+0x96>
				rx_flag = false;												//update global variables
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <UART_Rx_Complete+0xdc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
				memset (buffer, 0, sizeof(buffer));
 8000b7a:	2214      	movs	r2, #20
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <UART_Rx_Complete+0xe4>)
 8000b80:	f008 fc35 	bl	80093ee <memset>
				while(xSemaphoreGive(xMutex) != pdTRUE);						//wait here till we release the mutex lock
 8000b84:	bf00      	nop
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <UART_Rx_Complete+0xd8>)
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f005 fcc0 	bl	8006514 <xQueueGenericSend>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d1f5      	bne.n	8000b86 <UART_Rx_Complete+0xba>

			}
			vTaskDelay(100);
 8000b9a:	2064      	movs	r0, #100	; 0x64
 8000b9c:	f006 fb66 	bl	800726c <vTaskDelay>
		while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8000ba0:	e798      	b.n	8000ad4 <UART_Rx_Complete+0x8>
 8000ba2:	bf00      	nop
 8000ba4:	20001a54 	.word	0x20001a54
 8000ba8:	20001a24 	.word	0x20001a24
 8000bac:	20001a60 	.word	0x20001a60
 8000bb0:	20001a28 	.word	0x20001a28
 8000bb4:	20001a50 	.word	0x20001a50

08000bb8 <Parse_Data>:
	vTaskDelete(UART_Rx_Complete_Handle);
}

//-------------------------------------------------------------------------
void Parse_Data (void *args)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint8_t byte_in, data[20];
	static uint32_t i = 0;
	bool choice_done_local = false, value_done_local = false;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	77fb      	strb	r3, [r7, #31]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	77bb      	strb	r3, [r7, #30]

	for(;;)
	{
		if (xQueueReceive(xQueueHandle1, &byte_in, 100) == pdTRUE)
 8000bc8:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <Parse_Data+0x1ec>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f107 011d 	add.w	r1, r7, #29
 8000bd0:	2264      	movs	r2, #100	; 0x64
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f005 fe38 	bl	8006848 <xQueueReceive>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d1f4      	bne.n	8000bc8 <Parse_Data+0x10>
		{
			data[i++] = byte_in;
 8000bde:	4b72      	ldr	r3, [pc, #456]	; (8000da8 <Parse_Data+0x1f0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	4970      	ldr	r1, [pc, #448]	; (8000da8 <Parse_Data+0x1f0>)
 8000be6:	600a      	str	r2, [r1, #0]
 8000be8:	7f7a      	ldrb	r2, [r7, #29]
 8000bea:	3320      	adds	r3, #32
 8000bec:	443b      	add	r3, r7
 8000bee:	f803 2c18 	strb.w	r2, [r3, #-24]
			if (byte_in == '\r' || i == 20)
 8000bf2:	7f7b      	ldrb	r3, [r7, #29]
 8000bf4:	2b0d      	cmp	r3, #13
 8000bf6:	d004      	beq.n	8000c02 <Parse_Data+0x4a>
 8000bf8:	4b6b      	ldr	r3, [pc, #428]	; (8000da8 <Parse_Data+0x1f0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b14      	cmp	r3, #20
 8000bfe:	f040 80cc 	bne.w	8000d9a <Parse_Data+0x1e2>
			{
				while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8000c02:	bf00      	nop
 8000c04:	4b69      	ldr	r3, [pc, #420]	; (8000dac <Parse_Data+0x1f4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	210a      	movs	r1, #10
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f005 fefc 	bl	8006a08 <xQueueSemaphoreTake>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d1f6      	bne.n	8000c04 <Parse_Data+0x4c>
				choice_done_local = choice_done;
 8000c16:	4b66      	ldr	r3, [pc, #408]	; (8000db0 <Parse_Data+0x1f8>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	77fb      	strb	r3, [r7, #31]
				value_done_local = value_done;
 8000c1c:	4b65      	ldr	r3, [pc, #404]	; (8000db4 <Parse_Data+0x1fc>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	77bb      	strb	r3, [r7, #30]
				while(xSemaphoreGive(xMutex) != pdTRUE);
 8000c22:	bf00      	nop
 8000c24:	4b61      	ldr	r3, [pc, #388]	; (8000dac <Parse_Data+0x1f4>)
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f005 fc71 	bl	8006514 <xQueueGenericSend>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d1f5      	bne.n	8000c24 <Parse_Data+0x6c>

				if (!choice_done_local)
 8000c38:	7ffb      	ldrb	r3, [r7, #31]
 8000c3a:	f083 0301 	eor.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d04c      	beq.n	8000cde <Parse_Data+0x126>
				{
					if (is_valid_choice((uint8_t *)&data) == true)
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f98b 	bl	8000f64 <is_valid_choice>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d023      	beq.n	8000c9c <Parse_Data+0xe4>
					{
						//critical section for global variable
						while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);	//wait here till we obtain the mutex lock
 8000c54:	bf00      	nop
 8000c56:	4b55      	ldr	r3, [pc, #340]	; (8000dac <Parse_Data+0x1f4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	210a      	movs	r1, #10
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f005 fed3 	bl	8006a08 <xQueueSemaphoreTake>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d1f6      	bne.n	8000c56 <Parse_Data+0x9e>
						choice_done = true;											//update global variables
 8000c68:	4b51      	ldr	r3, [pc, #324]	; (8000db0 <Parse_Data+0x1f8>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
						while(xSemaphoreGive(xMutex) != pdTRUE);					//wait here till we release the mutex lock
 8000c6e:	bf00      	nop
 8000c70:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <Parse_Data+0x1f4>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	2300      	movs	r3, #0
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f005 fc4b 	bl	8006514 <xQueueGenericSend>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d1f5      	bne.n	8000c70 <Parse_Data+0xb8>

						i = 0;
 8000c84:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <Parse_Data+0x1f0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
						byte_in = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	777b      	strb	r3, [r7, #29]
						xEventGroupSetBits(xEventsGroup,EVT_VALID_CHOICE);
 8000c8e:	4b4a      	ldr	r3, [pc, #296]	; (8000db8 <Parse_Data+0x200>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2102      	movs	r1, #2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 f96b 	bl	8005f70 <xEventGroupSetBits>
						continue;
 8000c9a:	e081      	b.n	8000da0 <Parse_Data+0x1e8>
					}
					else
					{
						printf("Invalid Input, start over ... \n\r");
 8000c9c:	4847      	ldr	r0, [pc, #284]	; (8000dbc <Parse_Data+0x204>)
 8000c9e:	f008 fc8f 	bl	80095c0 <iprintf>

						//critical section for global variable
						while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8000ca2:	bf00      	nop
 8000ca4:	4b41      	ldr	r3, [pc, #260]	; (8000dac <Parse_Data+0x1f4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	210a      	movs	r1, #10
 8000caa:	4618      	mov	r0, r3
 8000cac:	f005 feac 	bl	8006a08 <xQueueSemaphoreTake>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d1f6      	bne.n	8000ca4 <Parse_Data+0xec>
						choice_done = false;
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	; (8000db0 <Parse_Data+0x1f8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
						while(xSemaphoreGive(xMutex) != pdTRUE);
 8000cbc:	bf00      	nop
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	; (8000dac <Parse_Data+0x1f4>)
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f005 fc24 	bl	8006514 <xQueueGenericSend>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d1f5      	bne.n	8000cbe <Parse_Data+0x106>

						xEventGroupSetBits(xEventsGroup,EVT_INVALID_DATA);
 8000cd2:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <Parse_Data+0x200>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 f949 	bl	8005f70 <xEventGroupSetBits>
					}
				}

				if (choice_done_local && !value_done_local)
 8000cde:	7ffb      	ldrb	r3, [r7, #31]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d050      	beq.n	8000d86 <Parse_Data+0x1ce>
 8000ce4:	7fbb      	ldrb	r3, [r7, #30]
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d04a      	beq.n	8000d86 <Parse_Data+0x1ce>
				{
					if (is_valid_data((uint8_t *)&data) == true)
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f979 	bl	8000fec <is_valid_data>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d01e      	beq.n	8000d3e <Parse_Data+0x186>
					{
						//critical section for global variable
						while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8000d00:	bf00      	nop
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <Parse_Data+0x1f4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	210a      	movs	r1, #10
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f005 fe7d 	bl	8006a08 <xQueueSemaphoreTake>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d1f6      	bne.n	8000d02 <Parse_Data+0x14a>
						value_done = true;
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <Parse_Data+0x1fc>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
						while(xSemaphoreGive(xMutex) != pdTRUE);
 8000d1a:	bf00      	nop
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <Parse_Data+0x1f4>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	f005 fbf5 	bl	8006514 <xQueueGenericSend>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d1f5      	bne.n	8000d1c <Parse_Data+0x164>

						xEventGroupSetBits(xEventsGroup,EVT_VALID_DATA);
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <Parse_Data+0x200>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2104      	movs	r1, #4
 8000d36:	4618      	mov	r0, r3
 8000d38:	f005 f91a 	bl	8005f70 <xEventGroupSetBits>
 8000d3c:	e023      	b.n	8000d86 <Parse_Data+0x1ce>
					}
					else
					{
						printf("Invalid Input, start over ... \n\r");
 8000d3e:	481f      	ldr	r0, [pc, #124]	; (8000dbc <Parse_Data+0x204>)
 8000d40:	f008 fc3e 	bl	80095c0 <iprintf>

						//critical section for global variable
						while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8000d44:	bf00      	nop
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <Parse_Data+0x1f4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	210a      	movs	r1, #10
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 fe5b 	bl	8006a08 <xQueueSemaphoreTake>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d1f6      	bne.n	8000d46 <Parse_Data+0x18e>
						choice_done = false;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <Parse_Data+0x1f8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
						value_done = false;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <Parse_Data+0x1fc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
						while(xSemaphoreGive(xMutex) != pdTRUE);
 8000d64:	bf00      	nop
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <Parse_Data+0x1f4>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f005 fbd0 	bl	8006514 <xQueueGenericSend>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d1f5      	bne.n	8000d66 <Parse_Data+0x1ae>

						xEventGroupSetBits(xEventsGroup,EVT_INVALID_DATA);
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <Parse_Data+0x200>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2108      	movs	r1, #8
 8000d80:	4618      	mov	r0, r3
 8000d82:	f005 f8f5 	bl	8005f70 <xEventGroupSetBits>
					}
				}

				i = 0;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <Parse_Data+0x1f0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
				memset (data, 0, sizeof(data));
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2214      	movs	r2, #20
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f008 fb2a 	bl	80093ee <memset>
			}
			vTaskDelay(100);
 8000d9a:	2064      	movs	r0, #100	; 0x64
 8000d9c:	f006 fa66 	bl	800726c <vTaskDelay>
		if (xQueueReceive(xQueueHandle1, &byte_in, 100) == pdTRUE)
 8000da0:	e712      	b.n	8000bc8 <Parse_Data+0x10>
 8000da2:	bf00      	nop
 8000da4:	20001a50 	.word	0x20001a50
 8000da8:	20001a64 	.word	0x20001a64
 8000dac:	20001a54 	.word	0x20001a54
 8000db0:	20001a25 	.word	0x20001a25
 8000db4:	20001a26 	.word	0x20001a26
 8000db8:	20001a58 	.word	0x20001a58
 8000dbc:	0800a30c 	.word	0x0800a30c

08000dc0 <Control_States>:
}


//-------------------------------------------------------------------------
void Control_States (void *args)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
	EventBits_t uxBits = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]

	//wait for a short period of time for an event to occur
	//if it occurs, clear it and then enter the super loop
	//in ideal case, this should never happen
	uxBits = xEventGroupWaitBits(
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <Control_States+0x50>)
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2101      	movs	r1, #1
 8000dda:	f004 ffc3 	bl	8005d64 <xEventGroupWaitBits>
 8000dde:	60f8      	str	r0, [r7, #12]
            xEventsGroup  ,
			1,
            pdTRUE,
            pdFALSE,
            1);
	xEventGroupClearBits(xEventsGroup, EVT_ALL);
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <Control_States+0x50>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	210f      	movs	r1, #15
 8000de6:	4618      	mov	r0, r3
 8000de8:	f005 f88a 	bl	8005f00 <xEventGroupClearBits>

	for (;;)
	{
		uxBits = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
		uxBits = xEventGroupWaitBits(
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <Control_States+0x50>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f004 ffb0 	bl	8005d64 <xEventGroupWaitBits>
 8000e04:	60f8      	str	r0, [r7, #12]
	            xEventsGroup  ,			/* The event group being tested. */
				EVT_ALL, 				/* The bits within the event group to wait for. */
	            pdTRUE,        			/* set bit should be cleared before returning. */
	            pdFALSE,       			/* Don't wait for all bits, any bit will do. */
	            1000);					/* Wait a maximum of 1000ms for either bit to be set. */
		state_machine(uxBits);
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f000 f804 	bl	8000e14 <state_machine>
		uxBits = 0;
 8000e0c:	e7ee      	b.n	8000dec <Control_States+0x2c>
 8000e0e:	bf00      	nop
 8000e10:	20001a58 	.word	0x20001a58

08000e14 <state_machine>:
	vTaskDelete(Control_States_Handle);
}

//-------------------------------------------------------------------------
void state_machine(EventBits_t event)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	state_t current_state;
	static state_t next_state = STATE0_START;

	current_state = next_state;
 8000e1c:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <state_machine+0x128>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	73fb      	strb	r3, [r7, #15]

	switch(current_state)
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	f200 8085 	bhi.w	8000f34 <state_machine+0x120>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <state_machine+0x1c>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000e91 	.word	0x08000e91
 8000e38:	08000eef 	.word	0x08000eef
 8000e3c:	08000f17 	.word	0x08000f17
	{
		case STATE0_START:

			//critical section for global memory access
			while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8000e40:	bf00      	nop
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <state_machine+0x12c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	210a      	movs	r1, #10
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 fddd 	bl	8006a08 <xQueueSemaphoreTake>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d1f6      	bne.n	8000e42 <state_machine+0x2e>
			choice_done = false;
 8000e54:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <state_machine+0x130>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
			value_done = false;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <state_machine+0x134>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
			while(xSemaphoreGive(xMutex) != pdTRUE);
 8000e60:	bf00      	nop
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <state_machine+0x12c>)
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	2300      	movs	r3, #0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f005 fb52 	bl	8006514 <xQueueGenericSend>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d1f5      	bne.n	8000e62 <state_machine+0x4e>

			printf("Enter 1 for frequency & 2 for Duty Cycle: ");
 8000e76:	4835      	ldr	r0, [pc, #212]	; (8000f4c <state_machine+0x138>)
 8000e78:	f008 fba2 	bl	80095c0 <iprintf>
			fflush(stdout);
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <state_machine+0x13c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f008 f976 	bl	8009174 <fflush>
			next_state = STATE1_RX_CHOICE;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <state_machine+0x128>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
			break;
 8000e8e:	e051      	b.n	8000f34 <state_machine+0x120>

		case STATE1_RX_CHOICE:
			next_state = STATE1_RX_CHOICE;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <state_machine+0x128>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
			if (event & EVT_VALID_CHOICE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d01d      	beq.n	8000edc <state_machine+0xc8>
			{
				switch(param)
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <state_machine+0x140>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d002      	beq.n	8000eae <state_machine+0x9a>
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d00a      	beq.n	8000ec2 <state_machine+0xae>
						fflush(stdout);
						break;

					case none:
					default:
						break;
 8000eac:	e013      	b.n	8000ed6 <state_machine+0xc2>
						printf("Enter frequency in Hz: ");
 8000eae:	482a      	ldr	r0, [pc, #168]	; (8000f58 <state_machine+0x144>)
 8000eb0:	f008 fb86 	bl	80095c0 <iprintf>
						fflush(stdout);
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <state_machine+0x13c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f008 f95a 	bl	8009174 <fflush>
						break;
 8000ec0:	e009      	b.n	8000ed6 <state_machine+0xc2>
						printf("Enter duty cycle in %%: ");
 8000ec2:	4826      	ldr	r0, [pc, #152]	; (8000f5c <state_machine+0x148>)
 8000ec4:	f008 fb7c 	bl	80095c0 <iprintf>
						fflush(stdout);
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <state_machine+0x13c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f008 f950 	bl	8009174 <fflush>
						break;
 8000ed4:	bf00      	nop
				}
				next_state = STATE2_RX_DATA;
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <state_machine+0x128>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	701a      	strb	r2, [r3, #0]
			}

			if (event & EVT_INVALID_DATA)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d023      	beq.n	8000f2e <state_machine+0x11a>
			{
				next_state = STATE0_START;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <state_machine+0x128>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000eec:	e01f      	b.n	8000f2e <state_machine+0x11a>

		case STATE2_RX_DATA:
			next_state = STATE2_RX_DATA;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <state_machine+0x128>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	701a      	strb	r2, [r3, #0]
			if (event & EVT_VALID_DATA)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <state_machine+0xf0>
			{
				next_state = STATE3_CHANGE_PWM;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <state_machine+0x128>)
 8000f00:	2203      	movs	r2, #3
 8000f02:	701a      	strb	r2, [r3, #0]
			}

			if (event & EVT_INVALID_DATA)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d011      	beq.n	8000f32 <state_machine+0x11e>
			{
				next_state = STATE0_START;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <state_machine+0x128>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f14:	e00d      	b.n	8000f32 <state_machine+0x11e>

		case STATE3_CHANGE_PWM:
			change_pwm_parameters(param, value);
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <state_machine+0x140>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <state_machine+0x14c>)
 8000f1c:	6812      	ldr	r2, [r2, #0]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f8b3 	bl	800108c <change_pwm_parameters>
			next_state = STATE0_START;
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <state_machine+0x128>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
			break;
 8000f2c:	e002      	b.n	8000f34 <state_machine+0x120>
			break;
 8000f2e:	bf00      	nop
 8000f30:	e000      	b.n	8000f34 <state_machine+0x120>
			break;
 8000f32:	bf00      	nop
	}
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20001a68 	.word	0x20001a68
 8000f40:	20001a54 	.word	0x20001a54
 8000f44:	20001a25 	.word	0x20001a25
 8000f48:	20001a26 	.word	0x20001a26
 8000f4c:	0800a330 	.word	0x0800a330
 8000f50:	2000001c 	.word	0x2000001c
 8000f54:	20001a3c 	.word	0x20001a3c
 8000f58:	0800a35c 	.word	0x0800a35c
 8000f5c:	0800a374 	.word	0x0800a374
 8000f60:	20001a40 	.word	0x20001a40

08000f64 <is_valid_choice>:

//-------------------------------------------------------------------------
bool is_valid_choice(uint8_t *data)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	uint32_t i;

	uint8_t selec;

	for (i = 0; i < strlen((const char *)data); i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	e016      	b.n	8000fa0 <is_valid_choice+0x3c>
	{
		if (data[i] != '\r' && isdigit(data[i]) == 0)
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b0d      	cmp	r3, #13
 8000f7c:	d00d      	beq.n	8000f9a <is_valid_choice+0x36>
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <is_valid_choice+0x80>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <is_valid_choice+0x36>
		{
			return false;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e01f      	b.n	8000fda <is_valid_choice+0x76>
	for (i = 0; i < strlen((const char *)data); i++)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff f915 	bl	80001d0 <strlen>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d3e1      	bcc.n	8000f72 <is_valid_choice+0xe>
		}
	}

	selec = atoi((const char *) data);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f008 f814 	bl	8008fdc <atoi>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	72fb      	strb	r3, [r7, #11]

	switch (selec)
 8000fb8:	7afb      	ldrb	r3, [r7, #11]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d002      	beq.n	8000fc4 <is_valid_choice+0x60>
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d004      	beq.n	8000fcc <is_valid_choice+0x68>
 8000fc2:	e007      	b.n	8000fd4 <is_valid_choice+0x70>
	{
	case frequency:
		param = frequency;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <is_valid_choice+0x84>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
		break;
 8000fca:	e005      	b.n	8000fd8 <is_valid_choice+0x74>

	case duty_cycle:
		param = duty_cycle;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <is_valid_choice+0x84>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	701a      	strb	r2, [r3, #0]
		break;
 8000fd2:	e001      	b.n	8000fd8 <is_valid_choice+0x74>

	default:
		return false;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e000      	b.n	8000fda <is_valid_choice+0x76>
	}

	return true;
 8000fd8:	2301      	movs	r3, #1
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	0800a418 	.word	0x0800a418
 8000fe8:	20001a3c 	.word	0x20001a3c

08000fec <is_valid_data>:


//-------------------------------------------------------------------------
bool is_valid_data(uint8_t *data)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for (i = 0; i < strlen((const char *)data); i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e016      	b.n	8001028 <is_valid_data+0x3c>
	{
		if (data[i] != '\r' && isdigit(data[i]) == 0)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b0d      	cmp	r3, #13
 8001004:	d00d      	beq.n	8001022 <is_valid_data+0x36>
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <is_valid_data+0x90>)
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <is_valid_data+0x36>
		{
			return false;
 800101e:	2300      	movs	r3, #0
 8001020:	e028      	b.n	8001074 <is_valid_data+0x88>
	for (i = 0; i < strlen((const char *)data); i++)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff f8d1 	bl	80001d0 <strlen>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4293      	cmp	r3, r2
 8001034:	d3e1      	bcc.n	8000ffa <is_valid_data+0xe>
		}
	}

	value = atoi((const char*)data);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f007 ffd0 	bl	8008fdc <atoi>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <is_valid_data+0x94>)
 8001042:	601a      	str	r2, [r3, #0]

	if ((param == frequency  && (value <= 0 || value > 1000000)) ||
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <is_valid_data+0x98>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d108      	bne.n	800105e <is_valid_data+0x72>
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <is_valid_data+0x94>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00c      	beq.n	800106e <is_valid_data+0x82>
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <is_valid_data+0x94>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <is_valid_data+0x9c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d807      	bhi.n	800106e <is_valid_data+0x82>
		(param == duty_cycle && (value < 0  || value > 100)))
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <is_valid_data+0x98>)
 8001060:	781b      	ldrb	r3, [r3, #0]
	if ((param == frequency  && (value <= 0 || value > 1000000)) ||
 8001062:	2b02      	cmp	r3, #2
 8001064:	d105      	bne.n	8001072 <is_valid_data+0x86>
		(param == duty_cycle && (value < 0  || value > 100)))
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <is_valid_data+0x94>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <is_valid_data+0x86>
	{
		return false;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <is_valid_data+0x88>
	}

	return true;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	0800a418 	.word	0x0800a418
 8001080:	20001a40 	.word	0x20001a40
 8001084:	20001a3c 	.word	0x20001a3c
 8001088:	000f4240 	.word	0x000f4240

0800108c <change_pwm_parameters>:

//-------------------------------------------------------------------------
void change_pwm_parameters(parameter_t parameter, uint32_t value)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
	//de-initialize timer, prevent risk of interruption
	if (HAL_TIM_PWM_DeInit(&htim2) != HAL_OK)
 8001098:	483c      	ldr	r0, [pc, #240]	; (800118c <change_pwm_parameters+0x100>)
 800109a:	f002 fad4 	bl	8003646 <HAL_TIM_PWM_DeInit>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <change_pwm_parameters+0x1c>
	{
		Error_Handler();
 80010a4:	f000 f894 	bl	80011d0 <Error_Handler>
	}

	if ((parameter == frequency  && (value <= 0 || value > 1000000)) ||
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d106      	bne.n	80010bc <change_pwm_parameters+0x30>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <change_pwm_parameters+0x3c>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4a36      	ldr	r2, [pc, #216]	; (8001190 <change_pwm_parameters+0x104>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d805      	bhi.n	80010c8 <change_pwm_parameters+0x3c>
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d104      	bne.n	80010cc <change_pwm_parameters+0x40>
		(parameter == duty_cycle && (value < 0  || value > 100)))
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b64      	cmp	r3, #100	; 0x64
 80010c6:	d901      	bls.n	80010cc <change_pwm_parameters+0x40>
	{
		parameter = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	71fb      	strb	r3, [r7, #7]
	}

	switch(parameter)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d002      	beq.n	80010d8 <change_pwm_parameters+0x4c>
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d028      	beq.n	8001128 <change_pwm_parameters+0x9c>
 80010d6:	e04b      	b.n	8001170 <change_pwm_parameters+0xe4>
	{
		case frequency:

			//critical section for global memory access
			while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 80010d8:	bf00      	nop
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <change_pwm_parameters+0x108>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	210a      	movs	r1, #10
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 fc91 	bl	8006a08 <xQueueSemaphoreTake>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d1f6      	bne.n	80010da <change_pwm_parameters+0x4e>
			time_period = 1000000/value;				//adjust frequency accordingly
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <change_pwm_parameters+0x104>)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f4:	4a28      	ldr	r2, [pc, #160]	; (8001198 <change_pwm_parameters+0x10c>)
 80010f6:	6013      	str	r3, [r2, #0]
			pulse_width = (time_period/100)*dcycle;		//pulse width should remain constant in %
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <change_pwm_parameters+0x10c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a27      	ldr	r2, [pc, #156]	; (800119c <change_pwm_parameters+0x110>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <change_pwm_parameters+0x114>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	4a25      	ldr	r2, [pc, #148]	; (80011a4 <change_pwm_parameters+0x118>)
 800110e:	6013      	str	r3, [r2, #0]
			while(xSemaphoreGive(xMutex) != pdTRUE);
 8001110:	bf00      	nop
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <change_pwm_parameters+0x108>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	f005 f9fa 	bl	8006514 <xQueueGenericSend>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d1f5      	bne.n	8001112 <change_pwm_parameters+0x86>

			break;
 8001126:	e027      	b.n	8001178 <change_pwm_parameters+0xec>

		case duty_cycle:

			//critical section for global memory access
			while(xSemaphoreTake(xMutex, (TickType_t) 10) != pdTRUE);
 8001128:	bf00      	nop
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <change_pwm_parameters+0x108>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	210a      	movs	r1, #10
 8001130:	4618      	mov	r0, r3
 8001132:	f005 fc69 	bl	8006a08 <xQueueSemaphoreTake>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d1f6      	bne.n	800112a <change_pwm_parameters+0x9e>
			pulse_width = (time_period/100)*value;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <change_pwm_parameters+0x10c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <change_pwm_parameters+0x110>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <change_pwm_parameters+0x118>)
 8001150:	6013      	str	r3, [r2, #0]
			dcycle = value;
 8001152:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <change_pwm_parameters+0x114>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	6013      	str	r3, [r2, #0]
			while(xSemaphoreGive(xMutex) != pdTRUE);
 8001158:	bf00      	nop
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <change_pwm_parameters+0x108>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	2300      	movs	r3, #0
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	f005 f9d6 	bl	8006514 <xQueueGenericSend>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d1f5      	bne.n	800115a <change_pwm_parameters+0xce>

			break;
 800116e:	e003      	b.n	8001178 <change_pwm_parameters+0xec>

		default:
			printf("Wrong parameter!!--\n\r");
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <change_pwm_parameters+0x11c>)
 8001172:	f008 fa25 	bl	80095c0 <iprintf>
			break;
 8001176:	bf00      	nop
	}

	//re-initialize the timer with updated values
	MX_TIM2_Init();
 8001178:	f7ff fbb4 	bl	80008e4 <MX_TIM2_Init>

	//start generating PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800117c:	2100      	movs	r1, #0
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <change_pwm_parameters+0x100>)
 8001180:	f002 fabe 	bl	8003700 <HAL_TIM_PWM_Start>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20001954 	.word	0x20001954
 8001190:	000f4240 	.word	0x000f4240
 8001194:	20001a54 	.word	0x20001a54
 8001198:	20000000 	.word	0x20000000
 800119c:	51eb851f 	.word	0x51eb851f
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004
 80011a8:	0800a390 	.word	0x0800a390

080011ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011be:	f000 fa83 	bl	80016c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40001000 	.word	0x40001000

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_MspInit+0x4c>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_MspInit+0x4c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6613      	str	r3, [r2, #96]	; 0x60
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_MspInit+0x4c>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_MspInit+0x4c>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_MspInit+0x4c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6593      	str	r3, [r2, #88]	; 0x58
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_MspInit+0x4c>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	210f      	movs	r1, #15
 8001216:	f06f 0001 	mvn.w	r0, #1
 800121a:	f000 fb2d 	bl	8001878 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800123c:	d10b      	bne.n	8001256 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_TIM_PWM_MspInit+0x38>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_TIM_PWM_MspInit+0x38>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6593      	str	r3, [r2, #88]	; 0x58
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_TIM_PWM_MspInit+0x38>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001288:	d11c      	bne.n	80012c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_TIM_MspPostInit+0x64>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_TIM_MspPostInit+0x64>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_TIM_MspPostInit+0x64>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f000 fb84 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e0:	d105      	bne.n	80012ee <HAL_TIM_PWM_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_TIM_PWM_MspDeInit+0x2c>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_TIM_PWM_MspDeInit+0x2c>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0ac      	sub	sp, #176	; 0xb0
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2288      	movs	r2, #136	; 0x88
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f008 f864 	bl	80093ee <memset>
  if(huart->Instance==USART2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <HAL_UART_MspInit+0xc0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d143      	bne.n	80013b8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001330:	2302      	movs	r3, #2
 8001332:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001334:	2300      	movs	r3, #0
 8001336:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4618      	mov	r0, r3
 800133e:	f001 fb9d 	bl	8002a7c <HAL_RCCEx_PeriphCLKConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001348:	f7ff ff42 	bl	80011d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_UART_MspInit+0xc4>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_UART_MspInit+0xc4>)
 8001352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001356:	6593      	str	r3, [r2, #88]	; 0x58
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_UART_MspInit+0xc4>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_UART_MspInit+0xc4>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_UART_MspInit+0xc4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_UART_MspInit+0xc4>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800137c:	230c      	movs	r3, #12
 800137e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001394:	2307      	movs	r3, #7
 8001396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f000 fb12 	bl	80019cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2105      	movs	r1, #5
 80013ac:	2026      	movs	r0, #38	; 0x26
 80013ae:	f000 fa63 	bl	8001878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b2:	2026      	movs	r0, #38	; 0x26
 80013b4:	f000 fa7c 	bl	80018b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	37b0      	adds	r7, #176	; 0xb0
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40021000 	.word	0x40021000

080013c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	; 0x30
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	2036      	movs	r0, #54	; 0x36
 80013de:	f000 fa4b 	bl	8001878 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013e2:	2036      	movs	r0, #54	; 0x36
 80013e4:	f000 fa64 	bl	80018b0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_InitTick+0x9c>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_InitTick+0x9c>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6593      	str	r3, [r2, #88]	; 0x58
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_InitTick+0x9c>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001400:	f107 0210 	add.w	r2, r7, #16
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f001 faa4 	bl	8002958 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001410:	f001 fa76 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8001414:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	4a13      	ldr	r2, [pc, #76]	; (8001468 <HAL_InitTick+0xa0>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9b      	lsrs	r3, r3, #18
 8001420:	3b01      	subs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_InitTick+0xa4>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_InitTick+0xa8>)
 8001428:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_InitTick+0xa4>)
 800142c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001430:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_InitTick+0xa4>)
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_InitTick+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_InitTick+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <HAL_InitTick+0xa4>)
 8001446:	f001 ffd5 	bl	80033f4 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <HAL_InitTick+0xa4>)
 8001452:	f002 f831 	bl	80034b8 <HAL_TIM_Base_Start_IT>
 8001456:	4603      	mov	r3, r0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3730      	adds	r7, #48	; 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	431bde83 	.word	0x431bde83
 800146c:	20001a6c 	.word	0x20001a6c
 8001470:	40001000 	.word	0x40001000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <USART2_IRQHandler+0x10>)
 80014a6:	f003 fa01 	bl	80048ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200019a0 	.word	0x200019a0

080014b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM6_DAC_IRQHandler+0x10>)
 80014ba:	f002 fa27 	bl	800390c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20001a6c 	.word	0x20001a6c

080014c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e00a      	b.n	80014f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014da:	f3af 8000 	nop.w
 80014de:	4601      	mov	r1, r0
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	60ba      	str	r2, [r7, #8]
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf0      	blt.n	80014da <_read+0x12>
	}

return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e009      	b.n	8001528 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f865 	bl	80005ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf1      	blt.n	8001514 <_write+0x12>
	}
	return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_close>:

int _close(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001562:	605a      	str	r2, [r3, #4]
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_isatty>:

int _isatty(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f007 fd06 	bl	8008fe4 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20018000 	.word	0x20018000
 8001604:	00000400 	.word	0x00000400
 8001608:	20001ab8 	.word	0x20001ab8
 800160c:	2000dd68 	.word	0x2000dd68

08001610 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800166c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001638:	f7ff ffea 	bl	8001610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <LoopForever+0x6>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	; (8001674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <LoopForever+0xe>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	; (8001680 <LoopForever+0x16>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001662:	f007 fe8f 	bl	8009384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001666:	f7ff f83f 	bl	80006e8 <main>

0800166a <LoopForever>:

LoopForever:
    b LoopForever
 800166a:	e7fe      	b.n	800166a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800166c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001678:	0800a5c4 	.word	0x0800a5c4
  ldr r2, =_sbss
 800167c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001680:	2000dd68 	.word	0x2000dd68

08001684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC1_2_IRQHandler>
	...

08001688 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_Init+0x3c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_Init+0x3c>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	2003      	movs	r0, #3
 80016a0:	f000 f8df 	bl	8001862 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a4:	200f      	movs	r0, #15
 80016a6:	f7ff fe8f 	bl	80013c8 <HAL_InitTick>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	e001      	b.n	80016ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b6:	f7ff fd91 	bl	80011dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000014 	.word	0x20000014
 80016ec:	20001abc 	.word	0x20001abc

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20001abc 	.word	0x20001abc

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0b      	blt.n	8001796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4907      	ldr	r1, [pc, #28]	; (80017a4 <__NVIC_EnableIRQ+0x38>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2001      	movs	r0, #1
 800178e:	fa00 f202 	lsl.w	r2, r0, r2
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff4c 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800188a:	f7ff ff61 	bl	8001750 <__NVIC_GetPriorityGrouping>
 800188e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	6978      	ldr	r0, [r7, #20]
 8001896:	f7ff ffb1 	bl	80017fc <NVIC_EncodePriority>
 800189a:	4602      	mov	r2, r0
 800189c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff80 	bl	80017a8 <__NVIC_SetPriority>
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff54 	bl	800176c <__NVIC_EnableIRQ>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d008      	beq.n	80018f6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2204      	movs	r2, #4
 80018e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e022      	b.n	800193c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 020e 	bic.w	r2, r2, #14
 8001904:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 021c 	and.w	r2, r3, #28
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d005      	beq.n	800196c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2204      	movs	r2, #4
 8001964:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	e029      	b.n	80019c0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 020e 	bic.w	r2, r2, #14
 800197a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f003 021c 	and.w	r2, r3, #28
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f202 	lsl.w	r2, r1, r2
 800199e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
    }
  }
  return status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e17f      	b.n	8001cdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8171 	beq.w	8001cd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d005      	beq.n	8001a0c <HAL_GPIO_Init+0x40>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d118      	bne.n	8001aac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	6939      	ldr	r1, [r7, #16]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80ac 	beq.w	8001cd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b5f      	ldr	r3, [pc, #380]	; (8001cfc <HAL_GPIO_Init+0x330>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	4a5e      	ldr	r2, [pc, #376]	; (8001cfc <HAL_GPIO_Init+0x330>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	; (8001cfc <HAL_GPIO_Init+0x330>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b96:	4a5a      	ldr	r2, [pc, #360]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bc0:	d025      	beq.n	8001c0e <HAL_GPIO_Init+0x242>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4f      	ldr	r2, [pc, #316]	; (8001d04 <HAL_GPIO_Init+0x338>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01f      	beq.n	8001c0a <HAL_GPIO_Init+0x23e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4e      	ldr	r2, [pc, #312]	; (8001d08 <HAL_GPIO_Init+0x33c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d019      	beq.n	8001c06 <HAL_GPIO_Init+0x23a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a4d      	ldr	r2, [pc, #308]	; (8001d0c <HAL_GPIO_Init+0x340>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0x236>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4c      	ldr	r2, [pc, #304]	; (8001d10 <HAL_GPIO_Init+0x344>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00d      	beq.n	8001bfe <HAL_GPIO_Init+0x232>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4b      	ldr	r2, [pc, #300]	; (8001d14 <HAL_GPIO_Init+0x348>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d007      	beq.n	8001bfa <HAL_GPIO_Init+0x22e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4a      	ldr	r2, [pc, #296]	; (8001d18 <HAL_GPIO_Init+0x34c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d101      	bne.n	8001bf6 <HAL_GPIO_Init+0x22a>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e00c      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	e00a      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e008      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001c02:	2303      	movs	r3, #3
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x244>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c52:	4a32      	ldr	r2, [pc, #200]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f47f ae78 	bne.w	80019dc <HAL_GPIO_Init+0x10>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010000 	.word	0x40010000
 8001d04:	48000400 	.word	0x48000400
 8001d08:	48000800 	.word	0x48000800
 8001d0c:	48000c00 	.word	0x48000c00
 8001d10:	48001000 	.word	0x48001000
 8001d14:	48001400 	.word	0x48001400
 8001d18:	48001800 	.word	0x48001800
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d3c:	e002      	b.n	8001d44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40007000 	.word	0x40007000

08001d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7a:	d130      	bne.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d88:	d038      	beq.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2232      	movs	r2, #50	; 0x32
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	3301      	adds	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db0:	e002      	b.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc4:	d102      	bne.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f2      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd8:	d110      	bne.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e00f      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d007      	beq.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e3ca      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	4b97      	ldr	r3, [pc, #604]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	4b94      	ldr	r3, [pc, #592]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80e4 	beq.w	8002014 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4a>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	f040 808b 	bne.w	8001f70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	f040 8087 	bne.w	8001f70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e62:	4b89      	ldr	r3, [pc, #548]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x62>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e3a2      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	4b82      	ldr	r3, [pc, #520]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <HAL_RCC_OscConfig+0x7c>
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e92:	e005      	b.n	8001ea0 <HAL_RCC_OscConfig+0x88>
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d223      	bcs.n	8001eec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fd87 	bl	80029bc <RCC_SetFlashLatencyFromMSIRange>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e383      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb8:	4b73      	ldr	r3, [pc, #460]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a72      	ldr	r2, [pc, #456]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b70      	ldr	r3, [pc, #448]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	496d      	ldr	r1, [pc, #436]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed6:	4b6c      	ldr	r3, [pc, #432]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	4968      	ldr	r1, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
 8001eea:	e025      	b.n	8001f38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a65      	ldr	r2, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4960      	ldr	r1, [pc, #384]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f0a:	4b5f      	ldr	r3, [pc, #380]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	495b      	ldr	r1, [pc, #364]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fd47 	bl	80029bc <RCC_SetFlashLatencyFromMSIRange>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e343      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f38:	f000 fc4a 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b52      	ldr	r3, [pc, #328]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	4950      	ldr	r1, [pc, #320]	; (800208c <HAL_RCC_OscConfig+0x274>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	4a4e      	ldr	r2, [pc, #312]	; (8002090 <HAL_RCC_OscConfig+0x278>)
 8001f56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f58:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fa33 	bl	80013c8 <HAL_InitTick>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d052      	beq.n	8002012 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	e327      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d032      	beq.n	8001fde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f78:	4b43      	ldr	r3, [pc, #268]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a42      	ldr	r2, [pc, #264]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fbb4 	bl	80016f0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fbb0 	bl	80016f0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e310      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a36      	ldr	r2, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4931      	ldr	r1, [pc, #196]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	492c      	ldr	r1, [pc, #176]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e01a      	b.n	8002014 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fb81 	bl	80016f0 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fb7d 	bl	80016f0 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e2dd      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x1da>
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002012:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d074      	beq.n	800210a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b08      	cmp	r3, #8
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x21a>
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d10e      	bne.n	800204a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d10b      	bne.n	800204a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d064      	beq.n	8002108 <HAL_RCC_OscConfig+0x2f0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d160      	bne.n	8002108 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e2ba      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x24a>
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e026      	b.n	80020b0 <HAL_RCC_OscConfig+0x298>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206a:	d115      	bne.n	8002098 <HAL_RCC_OscConfig+0x280>
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a05      	ldr	r2, [pc, #20]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 8002072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a02      	ldr	r2, [pc, #8]	; (8002088 <HAL_RCC_OscConfig+0x270>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x298>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	0800a3d0 	.word	0x0800a3d0
 8002090:	2000000c 	.word	0x2000000c
 8002094:	20000010 	.word	0x20000010
 8002098:	4ba0      	ldr	r3, [pc, #640]	; (800231c <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a9f      	ldr	r2, [pc, #636]	; (800231c <HAL_RCC_OscConfig+0x504>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b9d      	ldr	r3, [pc, #628]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a9c      	ldr	r2, [pc, #624]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fb1a 	bl	80016f0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fb16 	bl	80016f0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e276      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d2:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x2a8>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb06 	bl	80016f0 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fb02 	bl	80016f0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e262      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2d0>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d060      	beq.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x310>
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d119      	bne.n	8002156 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d116      	bne.n	8002156 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	4b7c      	ldr	r3, [pc, #496]	; (800231c <HAL_RCC_OscConfig+0x504>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x328>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e23f      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b76      	ldr	r3, [pc, #472]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	4973      	ldr	r1, [pc, #460]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002154:	e040      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d023      	beq.n	80021a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215e:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff fac1 	bl	80016f0 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002172:	f7ff fabd 	bl	80016f0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e21d      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002184:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002190:	4b62      	ldr	r3, [pc, #392]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	495f      	ldr	r1, [pc, #380]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e018      	b.n	80021d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a5c      	ldr	r2, [pc, #368]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80021ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff fa9d 	bl	80016f0 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fa99 	bl	80016f0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1f9      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021cc:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d03c      	beq.n	800225e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01c      	beq.n	8002226 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	4a4a      	ldr	r2, [pc, #296]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff fa78 	bl	80016f0 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002204:	f7ff fa74 	bl	80016f0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1d4      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ef      	beq.n	8002204 <HAL_RCC_OscConfig+0x3ec>
 8002224:	e01b      	b.n	800225e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222c:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x504>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7ff fa5b 	bl	80016f0 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223e:	f7ff fa57 	bl	80016f0 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e1b7      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002250:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1ef      	bne.n	800223e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80a6 	beq.w	80023b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b27      	ldr	r3, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x504>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x504>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002294:	2301      	movs	r3, #1
 8002296:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_OscConfig+0x508>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d118      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_OscConfig+0x508>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_RCC_OscConfig+0x508>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b0:	f7ff fa1e 	bl	80016f0 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b8:	f7ff fa1a 	bl	80016f0 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e17a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_RCC_OscConfig+0x508>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4d8>
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ee:	e029      	b.n	8002344 <HAL_RCC_OscConfig+0x52c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d115      	bne.n	8002324 <HAL_RCC_OscConfig+0x50c>
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_RCC_OscConfig+0x504>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_RCC_OscConfig+0x504>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	4a03      	ldr	r2, [pc, #12]	; (800231c <HAL_RCC_OscConfig+0x504>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x52c>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	4b9c      	ldr	r3, [pc, #624]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	4a9b      	ldr	r2, [pc, #620]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002334:	4b98      	ldr	r3, [pc, #608]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	4a97      	ldr	r2, [pc, #604]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d016      	beq.n	800237a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff f9d0 	bl	80016f0 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7ff f9cc 	bl	80016f0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e12a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800236a:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ed      	beq.n	8002354 <HAL_RCC_OscConfig+0x53c>
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7ff f9b9 	bl	80016f0 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff f9b5 	bl	80016f0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e113      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002398:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ed      	bne.n	8002382 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a6:	7ffb      	ldrb	r3, [r7, #31]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ac:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	4a79      	ldr	r2, [pc, #484]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 80023b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80fe 	beq.w	80025be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	f040 80d0 	bne.w	800256c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023cc:	4b72      	ldr	r3, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d130      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	3b01      	subs	r3, #1
 80023ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d127      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d11f      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800240c:	2a07      	cmp	r2, #7
 800240e:	bf14      	ite	ne
 8002410:	2201      	movne	r2, #1
 8002412:	2200      	moveq	r2, #0
 8002414:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002416:	4293      	cmp	r3, r2
 8002418:	d113      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	3b01      	subs	r3, #1
 8002428:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d109      	bne.n	8002442 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d06e      	beq.n	8002520 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d069      	beq.n	800251c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0ad      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a4b      	ldr	r2, [pc, #300]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002470:	f7ff f93e 	bl	80016f0 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f93a 	bl	80016f0 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e09a      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b40      	ldr	r3, [pc, #256]	; (800259c <HAL_RCC_OscConfig+0x784>)
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0112      	lsls	r2, r2, #4
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024b0:	0212      	lsls	r2, r2, #8
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024b8:	0852      	lsrs	r2, r2, #1
 80024ba:	3a01      	subs	r2, #1
 80024bc:	0552      	lsls	r2, r2, #21
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024c4:	0852      	lsrs	r2, r2, #1
 80024c6:	3a01      	subs	r2, #1
 80024c8:	0652      	lsls	r2, r2, #25
 80024ca:	4311      	orrs	r1, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024d0:	0912      	lsrs	r2, r2, #4
 80024d2:	0452      	lsls	r2, r2, #17
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4930      	ldr	r1, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2d      	ldr	r2, [pc, #180]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f4:	f7ff f8fc 	bl	80016f0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7ff f8f8 	bl	80016f0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e058      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251a:	e050      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04f      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d148      	bne.n	80025be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a16      	ldr	r2, [pc, #88]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 800253e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002542:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002544:	f7ff f8d4 	bl	80016f0 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff f8d0 	bl	80016f0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e030      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0x734>
 800256a:	e028      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d023      	beq.n	80025ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_RCC_OscConfig+0x780>)
 8002578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff f8b7 	bl	80016f0 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e00c      	b.n	80025a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7ff f8b3 	bl	80016f0 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d905      	bls.n	80025a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e013      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
 8002598:	40021000 	.word	0x40021000
 800259c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ec      	bne.n	8002586 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4905      	ldr	r1, [pc, #20]	; (80025c8 <HAL_RCC_OscConfig+0x7b0>)
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_OscConfig+0x7b4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	60cb      	str	r3, [r1, #12]
 80025b8:	e001      	b.n	80025be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	feeefffc 	.word	0xfeeefffc

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0e7      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b75      	ldr	r3, [pc, #468]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b72      	ldr	r3, [pc, #456]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4970      	ldr	r1, [pc, #448]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0cf      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262c:	429a      	cmp	r2, r3
 800262e:	d908      	bls.n	8002642 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4960      	ldr	r1, [pc, #384]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d04c      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d121      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0a6      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266e:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d115      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e09a      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002686:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e08e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e086      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4943      	ldr	r1, [pc, #268]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b8:	f7ff f81a 	bl	80016f0 <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7ff f816 	bl	80016f0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e06e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 020c 	and.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1eb      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002700:	429a      	cmp	r2, r3
 8002702:	d208      	bcs.n	8002716 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	492b      	ldr	r1, [pc, #172]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d210      	bcs.n	8002746 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 0207 	bic.w	r2, r3, #7
 800272c:	4923      	ldr	r1, [pc, #140]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e036      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4918      	ldr	r1, [pc, #96]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4910      	ldr	r1, [pc, #64]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002784:	f000 f824 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	490b      	ldr	r1, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1f8>)
 80027a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1fc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fe0d 	bl	80013c8 <HAL_InitTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80027b2:	7afb      	ldrb	r3, [r7, #11]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	0800a3d0 	.word	0x0800a3d0
 80027c8:	2000000c 	.word	0x2000000c
 80027cc:	20000010 	.word	0x20000010

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027de:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e8:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x34>
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d121      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d11e      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002804:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002810:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e005      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800282c:	4a2b      	ldr	r2, [pc, #172]	; (80028dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d102      	bne.n	800284e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e004      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d101      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d134      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0xa6>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d003      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0xac>
 8002874:	e005      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002878:	617b      	str	r3, [r7, #20]
      break;
 800287a:	e005      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800287e:	617b      	str	r3, [r7, #20]
      break;
 8002880:	e002      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	617b      	str	r3, [r7, #20]
      break;
 8002886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	3301      	adds	r3, #1
 8002894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	fb03 f202 	mul.w	r2, r3, r2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	0e5b      	lsrs	r3, r3, #25
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	3301      	adds	r3, #1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028c8:	69bb      	ldr	r3, [r7, #24]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	0800a3e8 	.word	0x0800a3e8
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	2000000c 	.word	0x2000000c

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	0800a3e0 	.word	0x0800a3e0

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002930:	f7ff ffda 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0adb      	lsrs	r3, r3, #11
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4904      	ldr	r1, [pc, #16]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	0800a3e0 	.word	0x0800a3e0

08002958 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	220f      	movs	r2, #15
 8002966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_RCC_GetClockConfig+0x60>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0207 	and.w	r2, r3, #7
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40022000 	.word	0x40022000

080029bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029d4:	f7ff f9bc 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
 80029d8:	6178      	str	r0, [r7, #20]
 80029da:	e014      	b.n	8002a06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6593      	str	r3, [r2, #88]	; 0x58
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029f4:	f7ff f9ac 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
 80029f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a0c:	d10b      	bne.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d919      	bls.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2ba0      	cmp	r3, #160	; 0xa0
 8002a18:	d902      	bls.n	8002a20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	e013      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a20:	2301      	movs	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	e010      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d902      	bls.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	e00a      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d102      	bne.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a38:	2302      	movs	r3, #2
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	e004      	b.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b70      	cmp	r3, #112	; 0x70
 8002a42:	d101      	bne.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a44:	2301      	movs	r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 0207 	bic.w	r2, r3, #7
 8002a50:	4909      	ldr	r1, [pc, #36]	; (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40022000 	.word	0x40022000

08002a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a84:	2300      	movs	r3, #0
 8002a86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a88:	2300      	movs	r3, #0
 8002a8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d041      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aa0:	d02a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002aa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002aa6:	d824      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab2:	d81e      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abc:	d010      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002abe:	e018      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ac0:	4b86      	ldr	r3, [pc, #536]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a85      	ldr	r2, [pc, #532]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002acc:	e015      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fabb 	bl	8003050 <RCCEx_PLLSAI1_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ade:	e00c      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3320      	adds	r3, #32
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fba6 	bl	8003238 <RCCEx_PLLSAI2_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af0:	e003      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	74fb      	strb	r3, [r7, #19]
      break;
 8002af6:	e000      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b00:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b0e:	4973      	ldr	r1, [pc, #460]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b16:	e001      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d041      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b30:	d02a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b36:	d824      	bhi.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b3c:	d008      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b42:	d81e      	bhi.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b4c:	d010      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b4e:	e018      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b50:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a61      	ldr	r2, [pc, #388]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b5c:	e015      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fa73 	bl	8003050 <RCCEx_PLLSAI1_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b6e:	e00c      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3320      	adds	r3, #32
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fb5e 	bl	8003238 <RCCEx_PLLSAI2_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b80:	e003      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	74fb      	strb	r3, [r7, #19]
      break;
 8002b86:	e000      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b90:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b9e:	494f      	ldr	r1, [pc, #316]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ba6:	e001      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a0 	beq.w	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bbe:	4b47      	ldr	r3, [pc, #284]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4a40      	ldr	r2, [pc, #256]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6593      	str	r3, [r2, #88]	; 0x58
 8002be0:	4b3e      	ldr	r3, [pc, #248]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bec:	2301      	movs	r3, #1
 8002bee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3a      	ldr	r2, [pc, #232]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fd78 	bl	80016f0 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c02:	e009      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7fe fd74 	bl	80016f0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d902      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	74fb      	strb	r3, [r7, #19]
        break;
 8002c16:	e005      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c18:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0ef      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d15c      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01f      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d019      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe fd33 	bl	80016f0 <HAL_GetTick>
 8002c8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8c:	e00b      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe fd2f 	bl	80016f0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ca4:	e006      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ec      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cca:	4904      	ldr	r1, [pc, #16]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
 8002cd8:	e006      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce8:	7c7b      	ldrb	r3, [r7, #17]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4b9e      	ldr	r3, [pc, #632]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	4a9d      	ldr	r2, [pc, #628]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d06:	4b98      	ldr	r3, [pc, #608]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f023 0203 	bic.w	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	4994      	ldr	r1, [pc, #592]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d28:	4b8f      	ldr	r3, [pc, #572]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f023 020c 	bic.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	498c      	ldr	r1, [pc, #560]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d4a:	4b87      	ldr	r3, [pc, #540]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	4983      	ldr	r1, [pc, #524]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d6c:	4b7e      	ldr	r3, [pc, #504]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	497b      	ldr	r1, [pc, #492]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d8e:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9c:	4972      	ldr	r1, [pc, #456]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002db0:	4b6d      	ldr	r3, [pc, #436]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbe:	496a      	ldr	r1, [pc, #424]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd2:	4b65      	ldr	r3, [pc, #404]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	4961      	ldr	r1, [pc, #388]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002df4:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e02:	4959      	ldr	r1, [pc, #356]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e16:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e24:	4950      	ldr	r1, [pc, #320]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e38:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	4948      	ldr	r1, [pc, #288]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e5a:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	493f      	ldr	r1, [pc, #252]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d028      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e7c:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8a:	4937      	ldr	r1, [pc, #220]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a31      	ldr	r2, [pc, #196]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea6:	60d3      	str	r3, [r2, #12]
 8002ea8:	e011      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb2:	d10c      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f8c8 	bl	8003050 <RCCEx_PLLSAI1_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eda:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	491f      	ldr	r1, [pc, #124]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f04:	60d3      	str	r3, [r2, #12]
 8002f06:	e011      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f899 	bl	8003050 <RCCEx_PLLSAI1_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f22:	7cfb      	ldrb	r3, [r7, #19]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02b      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f46:	4908      	ldr	r1, [pc, #32]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f56:	d109      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a02      	ldr	r2, [pc, #8]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f62:	60d3      	str	r3, [r2, #12]
 8002f64:	e014      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f867 	bl	8003050 <RCCEx_PLLSAI1_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02f      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002faa:	4928      	ldr	r1, [pc, #160]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fba:	d10d      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	2102      	movs	r1, #2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f844 	bl	8003050 <RCCEx_PLLSAI1_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d014      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	74bb      	strb	r3, [r7, #18]
 8002fd6:	e011      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3320      	adds	r3, #32
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f925 	bl	8003238 <RCCEx_PLLSAI2_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003016:	490d      	ldr	r1, [pc, #52]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800303a:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003042:	7cbb      	ldrb	r3, [r7, #18]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000

08003050 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800305e:	4b75      	ldr	r3, [pc, #468]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d018      	beq.n	800309c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800306a:	4b72      	ldr	r3, [pc, #456]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0203 	and.w	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d10d      	bne.n	8003096 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
       ||
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003082:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
       ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d047      	beq.n	8003126 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
 800309a:	e044      	b.n	8003126 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d018      	beq.n	80030d6 <RCCEx_PLLSAI1_Config+0x86>
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d825      	bhi.n	80030f4 <RCCEx_PLLSAI1_Config+0xa4>
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d002      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x62>
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d009      	beq.n	80030c4 <RCCEx_PLLSAI1_Config+0x74>
 80030b0:	e020      	b.n	80030f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030b2:	4b60      	ldr	r3, [pc, #384]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11d      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c2:	e01a      	b.n	80030fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030c4:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d116      	bne.n	80030fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d4:	e013      	b.n	80030fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030d6:	4b57      	ldr	r3, [pc, #348]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030e2:	4b54      	ldr	r3, [pc, #336]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030f2:	e006      	b.n	8003102 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e004      	b.n	8003104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030fa:	bf00      	nop
 80030fc:	e002      	b.n	8003104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003102:	bf00      	nop
    }

    if(status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10d      	bne.n	8003126 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	430b      	orrs	r3, r1
 8003120:	4944      	ldr	r1, [pc, #272]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d17d      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800312c:	4b41      	ldr	r3, [pc, #260]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a40      	ldr	r2, [pc, #256]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fe fada 	bl	80016f0 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800313e:	e009      	b.n	8003154 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003140:	f7fe fad6 	bl	80016f0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	73fb      	strb	r3, [r7, #15]
        break;
 8003152:	e005      	b.n	8003160 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003154:	4b37      	ldr	r3, [pc, #220]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ef      	bne.n	8003140 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d160      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d111      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800316c:	4b31      	ldr	r3, [pc, #196]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6892      	ldr	r2, [r2, #8]
 800317c:	0211      	lsls	r1, r2, #8
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	0912      	lsrs	r2, r2, #4
 8003184:	0452      	lsls	r2, r2, #17
 8003186:	430a      	orrs	r2, r1
 8003188:	492a      	ldr	r1, [pc, #168]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800318a:	4313      	orrs	r3, r2
 800318c:	610b      	str	r3, [r1, #16]
 800318e:	e027      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d112      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800319e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6892      	ldr	r2, [r2, #8]
 80031a6:	0211      	lsls	r1, r2, #8
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6912      	ldr	r2, [r2, #16]
 80031ac:	0852      	lsrs	r2, r2, #1
 80031ae:	3a01      	subs	r2, #1
 80031b0:	0552      	lsls	r2, r2, #21
 80031b2:	430a      	orrs	r2, r1
 80031b4:	491f      	ldr	r1, [pc, #124]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	610b      	str	r3, [r1, #16]
 80031ba:	e011      	b.n	80031e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	0211      	lsls	r1, r2, #8
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6952      	ldr	r2, [r2, #20]
 80031d2:	0852      	lsrs	r2, r2, #1
 80031d4:	3a01      	subs	r2, #1
 80031d6:	0652      	lsls	r2, r2, #25
 80031d8:	430a      	orrs	r2, r1
 80031da:	4916      	ldr	r1, [pc, #88]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031e0:	4b14      	ldr	r3, [pc, #80]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a13      	ldr	r2, [pc, #76]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fa80 	bl	80016f0 <HAL_GetTick>
 80031f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031f2:	e009      	b.n	8003208 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f4:	f7fe fa7c 	bl	80016f0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d902      	bls.n	8003208 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	73fb      	strb	r3, [r7, #15]
          break;
 8003206:	e005      	b.n	8003214 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ef      	beq.n	80031f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	4904      	ldr	r1, [pc, #16]	; (8003234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000

08003238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003246:	4b6a      	ldr	r3, [pc, #424]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d018      	beq.n	8003284 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003252:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0203 	and.w	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d10d      	bne.n	800327e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
       ||
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800326a:	4b61      	ldr	r3, [pc, #388]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
       ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d047      	beq.n	800330e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
 8003282:	e044      	b.n	800330e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d018      	beq.n	80032be <RCCEx_PLLSAI2_Config+0x86>
 800328c:	2b03      	cmp	r3, #3
 800328e:	d825      	bhi.n	80032dc <RCCEx_PLLSAI2_Config+0xa4>
 8003290:	2b01      	cmp	r3, #1
 8003292:	d002      	beq.n	800329a <RCCEx_PLLSAI2_Config+0x62>
 8003294:	2b02      	cmp	r3, #2
 8003296:	d009      	beq.n	80032ac <RCCEx_PLLSAI2_Config+0x74>
 8003298:	e020      	b.n	80032dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800329a:	4b55      	ldr	r3, [pc, #340]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11d      	bne.n	80032e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032aa:	e01a      	b.n	80032e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032ac:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d116      	bne.n	80032e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032bc:	e013      	b.n	80032e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032be:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10f      	bne.n	80032ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032ca:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032da:	e006      	b.n	80032ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      break;
 80032e0:	e004      	b.n	80032ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032e2:	bf00      	nop
 80032e4:	e002      	b.n	80032ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032e6:	bf00      	nop
 80032e8:	e000      	b.n	80032ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10d      	bne.n	800330e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032f2:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6819      	ldr	r1, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	430b      	orrs	r3, r1
 8003308:	4939      	ldr	r1, [pc, #228]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d167      	bne.n	80033e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a35      	ldr	r2, [pc, #212]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003320:	f7fe f9e6 	bl	80016f0 <HAL_GetTick>
 8003324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003326:	e009      	b.n	800333c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003328:	f7fe f9e2 	bl	80016f0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d902      	bls.n	800333c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	73fb      	strb	r3, [r7, #15]
        break;
 800333a:	e005      	b.n	8003348 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800333c:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ef      	bne.n	8003328 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d14a      	bne.n	80033e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d111      	bne.n	8003378 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003354:	4b26      	ldr	r3, [pc, #152]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800335c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6892      	ldr	r2, [r2, #8]
 8003364:	0211      	lsls	r1, r2, #8
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	0912      	lsrs	r2, r2, #4
 800336c:	0452      	lsls	r2, r2, #17
 800336e:	430a      	orrs	r2, r1
 8003370:	491f      	ldr	r1, [pc, #124]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	614b      	str	r3, [r1, #20]
 8003376:	e011      	b.n	800339c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003380:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6892      	ldr	r2, [r2, #8]
 8003388:	0211      	lsls	r1, r2, #8
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6912      	ldr	r2, [r2, #16]
 800338e:	0852      	lsrs	r2, r2, #1
 8003390:	3a01      	subs	r2, #1
 8003392:	0652      	lsls	r2, r2, #25
 8003394:	430a      	orrs	r2, r1
 8003396:	4916      	ldr	r1, [pc, #88]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe f9a2 	bl	80016f0 <HAL_GetTick>
 80033ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ae:	e009      	b.n	80033c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033b0:	f7fe f99e 	bl	80016f0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d902      	bls.n	80033c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	73fb      	strb	r3, [r7, #15]
          break;
 80033c2:	e005      	b.n	80033d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ef      	beq.n	80033b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e049      	b.n	800349a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f841 	bl	80034a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f000 fcc6 	bl	8003dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d001      	beq.n	80034d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e04f      	b.n	8003570 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a23      	ldr	r2, [pc, #140]	; (800357c <HAL_TIM_Base_Start_IT+0xc4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01d      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d018      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_TIM_Base_Start_IT+0xc8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_TIM_Base_Start_IT+0xcc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00e      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_TIM_Base_Start_IT+0xd0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_TIM_Base_Start_IT+0xd4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d004      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x76>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_TIM_Base_Start_IT+0xd8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d115      	bne.n	800355a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_TIM_Base_Start_IT+0xdc>)
 8003536:	4013      	ands	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b06      	cmp	r3, #6
 800353e:	d015      	beq.n	800356c <HAL_TIM_Base_Start_IT+0xb4>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003546:	d011      	beq.n	800356c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003558:	e008      	b.n	800356c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e000      	b.n	800356e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40013400 	.word	0x40013400
 8003590:	40014000 	.word	0x40014000
 8003594:	00010007 	.word	0x00010007

08003598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e049      	b.n	800363e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fe34 	bl	800122c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 fbf4 	bl	8003dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_TIM_PWM_DeInit+0x40>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6a1a      	ldr	r2, [r3, #32]
 800366c:	f240 4344 	movw	r3, #1092	; 0x444
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_TIM_PWM_DeInit+0x40>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fe22 	bl	80012d0 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_TIM_PWM_Start+0x24>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b01      	cmp	r3, #1
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e03c      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b04      	cmp	r3, #4
 8003728:	d109      	bne.n	800373e <HAL_TIM_PWM_Start+0x3e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e02f      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d109      	bne.n	8003758 <HAL_TIM_PWM_Start+0x58>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e022      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d109      	bne.n	8003772 <HAL_TIM_PWM_Start+0x72>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e015      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b10      	cmp	r3, #16
 8003776:	d109      	bne.n	800378c <HAL_TIM_PWM_Start+0x8c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e008      	b.n	800379e <HAL_TIM_PWM_Start+0x9e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e09c      	b.n	80038e0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_PWM_Start+0xb6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	e023      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d104      	bne.n	80037c6 <HAL_TIM_PWM_Start+0xc6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c4:	e01b      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xd6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d4:	e013      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0xe6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0xf6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f4:	e003      	b.n	80037fe <HAL_TIM_PWM_Start+0xfe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2201      	movs	r2, #1
 8003804:	6839      	ldr	r1, [r7, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fe4c 	bl	80044a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a35      	ldr	r2, [pc, #212]	; (80038e8 <HAL_TIM_PWM_Start+0x1e8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_TIM_PWM_Start+0x13e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a34      	ldr	r2, [pc, #208]	; (80038ec <HAL_TIM_PWM_Start+0x1ec>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00e      	beq.n	800383e <HAL_TIM_PWM_Start+0x13e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a32      	ldr	r2, [pc, #200]	; (80038f0 <HAL_TIM_PWM_Start+0x1f0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_TIM_PWM_Start+0x13e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <HAL_TIM_PWM_Start+0x1f4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_TIM_PWM_Start+0x13e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2f      	ldr	r2, [pc, #188]	; (80038f8 <HAL_TIM_PWM_Start+0x1f8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PWM_Start+0x142>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_TIM_PWM_Start+0x144>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <HAL_TIM_PWM_Start+0x1e8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01d      	beq.n	800389e <HAL_TIM_PWM_Start+0x19e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d018      	beq.n	800389e <HAL_TIM_PWM_Start+0x19e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a22      	ldr	r2, [pc, #136]	; (80038fc <HAL_TIM_PWM_Start+0x1fc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_TIM_PWM_Start+0x19e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_TIM_PWM_Start+0x200>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_TIM_PWM_Start+0x19e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_TIM_PWM_Start+0x204>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_TIM_PWM_Start+0x19e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_TIM_PWM_Start+0x1ec>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_TIM_PWM_Start+0x19e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <HAL_TIM_PWM_Start+0x1f0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d115      	bne.n	80038ca <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	4b18      	ldr	r3, [pc, #96]	; (8003908 <HAL_TIM_PWM_Start+0x208>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b06      	cmp	r3, #6
 80038ae:	d015      	beq.n	80038dc <HAL_TIM_PWM_Start+0x1dc>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b6:	d011      	beq.n	80038dc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c8:	e008      	b.n	80038dc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e000      	b.n	80038de <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40013400 	.word	0x40013400
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40014800 	.word	0x40014800
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40000c00 	.word	0x40000c00
 8003908:	00010007 	.word	0x00010007

0800390c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d122      	bne.n	8003968 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d11b      	bne.n	8003968 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0202 	mvn.w	r2, #2
 8003938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa1a 	bl	8003d88 <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa0c 	bl	8003d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fa1d 	bl	8003d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b04      	cmp	r3, #4
 8003974:	d122      	bne.n	80039bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d11b      	bne.n	80039bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0204 	mvn.w	r2, #4
 800398c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9f0 	bl	8003d88 <HAL_TIM_IC_CaptureCallback>
 80039a8:	e005      	b.n	80039b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9e2 	bl	8003d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f9f3 	bl	8003d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d122      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d11b      	bne.n	8003a10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0208 	mvn.w	r2, #8
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2204      	movs	r2, #4
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f9c6 	bl	8003d88 <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f9b8 	bl	8003d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f9c9 	bl	8003d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d122      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d11b      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0210 	mvn.w	r2, #16
 8003a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f99c 	bl	8003d88 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e005      	b.n	8003a5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f98e 	bl	8003d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f99f 	bl	8003d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d107      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0201 	mvn.w	r2, #1
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fb8e 	bl	80011ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa8:	2b80      	cmp	r3, #128	; 0x80
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fdac 	bl	8004614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	d10e      	bne.n	8003aea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d107      	bne.n	8003aea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fd9f 	bl	8004628 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d10e      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d107      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f94d 	bl	8003db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d10e      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0220 	mvn.w	r2, #32
 8003b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fd5f 	bl	8004600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e0ff      	b.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b14      	cmp	r3, #20
 8003b76:	f200 80f0 	bhi.w	8003d5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b7a:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b80:	08003bd5 	.word	0x08003bd5
 8003b84:	08003d5b 	.word	0x08003d5b
 8003b88:	08003d5b 	.word	0x08003d5b
 8003b8c:	08003d5b 	.word	0x08003d5b
 8003b90:	08003c15 	.word	0x08003c15
 8003b94:	08003d5b 	.word	0x08003d5b
 8003b98:	08003d5b 	.word	0x08003d5b
 8003b9c:	08003d5b 	.word	0x08003d5b
 8003ba0:	08003c57 	.word	0x08003c57
 8003ba4:	08003d5b 	.word	0x08003d5b
 8003ba8:	08003d5b 	.word	0x08003d5b
 8003bac:	08003d5b 	.word	0x08003d5b
 8003bb0:	08003c97 	.word	0x08003c97
 8003bb4:	08003d5b 	.word	0x08003d5b
 8003bb8:	08003d5b 	.word	0x08003d5b
 8003bbc:	08003d5b 	.word	0x08003d5b
 8003bc0:	08003cd9 	.word	0x08003cd9
 8003bc4:	08003d5b 	.word	0x08003d5b
 8003bc8:	08003d5b 	.word	0x08003d5b
 8003bcc:	08003d5b 	.word	0x08003d5b
 8003bd0:	08003d19 	.word	0x08003d19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f98c 	bl	8003ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0208 	orr.w	r2, r2, #8
 8003bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0204 	bic.w	r2, r2, #4
 8003bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6999      	ldr	r1, [r3, #24]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	619a      	str	r2, [r3, #24]
      break;
 8003c12:	e0a5      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f9fc 	bl	8004018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6999      	ldr	r1, [r3, #24]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	021a      	lsls	r2, r3, #8
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	619a      	str	r2, [r3, #24]
      break;
 8003c54:	e084      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fa65 	bl	800412c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0208 	orr.w	r2, r2, #8
 8003c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0204 	bic.w	r2, r2, #4
 8003c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
      break;
 8003c94:	e064      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 facd 	bl	800423c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69d9      	ldr	r1, [r3, #28]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	021a      	lsls	r2, r3, #8
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	61da      	str	r2, [r3, #28]
      break;
 8003cd6:	e043      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fb16 	bl	8004310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0204 	bic.w	r2, r2, #4
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d16:	e023      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fb5a 	bl	80043d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d58:	e002      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop

08003d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <TIM_Base_SetConfig+0x114>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de2:	d00f      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3d      	ldr	r2, [pc, #244]	; (8003edc <TIM_Base_SetConfig+0x118>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3c      	ldr	r2, [pc, #240]	; (8003ee0 <TIM_Base_SetConfig+0x11c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3b      	ldr	r2, [pc, #236]	; (8003ee4 <TIM_Base_SetConfig+0x120>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <TIM_Base_SetConfig+0x124>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2f      	ldr	r2, [pc, #188]	; (8003ed8 <TIM_Base_SetConfig+0x114>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <TIM_Base_SetConfig+0x9a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d01b      	beq.n	8003e5e <TIM_Base_SetConfig+0x9a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2c      	ldr	r2, [pc, #176]	; (8003edc <TIM_Base_SetConfig+0x118>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d017      	beq.n	8003e5e <TIM_Base_SetConfig+0x9a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <TIM_Base_SetConfig+0x11c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <TIM_Base_SetConfig+0x9a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <TIM_Base_SetConfig+0x120>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_Base_SetConfig+0x9a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a29      	ldr	r2, [pc, #164]	; (8003ee8 <TIM_Base_SetConfig+0x124>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_Base_SetConfig+0x9a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a28      	ldr	r2, [pc, #160]	; (8003eec <TIM_Base_SetConfig+0x128>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_Base_SetConfig+0x9a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a27      	ldr	r2, [pc, #156]	; (8003ef0 <TIM_Base_SetConfig+0x12c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_Base_SetConfig+0x9a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <TIM_Base_SetConfig+0x130>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <TIM_Base_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00f      	beq.n	8003ebc <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <TIM_Base_SetConfig+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_Base_SetConfig+0xf8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <TIM_Base_SetConfig+0x128>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_Base_SetConfig+0xf8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <TIM_Base_SetConfig+0x12c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0xf8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <TIM_Base_SetConfig+0x130>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d103      	bne.n	8003ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	615a      	str	r2, [r3, #20]
}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40013400 	.word	0x40013400
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40014800 	.word	0x40014800

08003ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f023 0201 	bic.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0303 	bic.w	r3, r3, #3
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f023 0302 	bic.w	r3, r3, #2
 8003f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <TIM_OC1_SetConfig+0x10c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00f      	beq.n	8003f78 <TIM_OC1_SetConfig+0x80>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <TIM_OC1_SetConfig+0x110>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00b      	beq.n	8003f78 <TIM_OC1_SetConfig+0x80>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a2a      	ldr	r2, [pc, #168]	; (800400c <TIM_OC1_SetConfig+0x114>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d007      	beq.n	8003f78 <TIM_OC1_SetConfig+0x80>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a29      	ldr	r2, [pc, #164]	; (8004010 <TIM_OC1_SetConfig+0x118>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC1_SetConfig+0x80>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a28      	ldr	r2, [pc, #160]	; (8004014 <TIM_OC1_SetConfig+0x11c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10c      	bne.n	8003f92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0308 	bic.w	r3, r3, #8
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 0304 	bic.w	r3, r3, #4
 8003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <TIM_OC1_SetConfig+0x10c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00f      	beq.n	8003fba <TIM_OC1_SetConfig+0xc2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1a      	ldr	r2, [pc, #104]	; (8004008 <TIM_OC1_SetConfig+0x110>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <TIM_OC1_SetConfig+0xc2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a19      	ldr	r2, [pc, #100]	; (800400c <TIM_OC1_SetConfig+0x114>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <TIM_OC1_SetConfig+0xc2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <TIM_OC1_SetConfig+0x118>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_OC1_SetConfig+0xc2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <TIM_OC1_SetConfig+0x11c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d111      	bne.n	8003fde <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40013400 	.word	0x40013400
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800

08004018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f023 0210 	bic.w	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0320 	bic.w	r3, r3, #32
 8004066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a28      	ldr	r2, [pc, #160]	; (8004118 <TIM_OC2_SetConfig+0x100>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_OC2_SetConfig+0x6c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a27      	ldr	r2, [pc, #156]	; (800411c <TIM_OC2_SetConfig+0x104>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d10d      	bne.n	80040a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <TIM_OC2_SetConfig+0x100>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00f      	beq.n	80040c8 <TIM_OC2_SetConfig+0xb0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <TIM_OC2_SetConfig+0x104>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_OC2_SetConfig+0xb0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <TIM_OC2_SetConfig+0x108>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_OC2_SetConfig+0xb0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <TIM_OC2_SetConfig+0x10c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_OC2_SetConfig+0xb0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a19      	ldr	r2, [pc, #100]	; (8004128 <TIM_OC2_SetConfig+0x110>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d113      	bne.n	80040f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800

0800412c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0303 	bic.w	r3, r3, #3
 8004166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <TIM_OC3_SetConfig+0xfc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC3_SetConfig+0x6a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a26      	ldr	r2, [pc, #152]	; (800422c <TIM_OC3_SetConfig+0x100>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10d      	bne.n	80041b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800419c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <TIM_OC3_SetConfig+0xfc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00f      	beq.n	80041da <TIM_OC3_SetConfig+0xae>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1b      	ldr	r2, [pc, #108]	; (800422c <TIM_OC3_SetConfig+0x100>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00b      	beq.n	80041da <TIM_OC3_SetConfig+0xae>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1a      	ldr	r2, [pc, #104]	; (8004230 <TIM_OC3_SetConfig+0x104>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <TIM_OC3_SetConfig+0xae>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <TIM_OC3_SetConfig+0x108>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_OC3_SetConfig+0xae>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <TIM_OC3_SetConfig+0x10c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d113      	bne.n	8004202 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	621a      	str	r2, [r3, #32]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40013400 	.word	0x40013400
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800

0800423c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800428a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <TIM_OC4_SetConfig+0xc0>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00f      	beq.n	80042c0 <TIM_OC4_SetConfig+0x84>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a17      	ldr	r2, [pc, #92]	; (8004300 <TIM_OC4_SetConfig+0xc4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <TIM_OC4_SetConfig+0x84>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a16      	ldr	r2, [pc, #88]	; (8004304 <TIM_OC4_SetConfig+0xc8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_OC4_SetConfig+0x84>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a15      	ldr	r2, [pc, #84]	; (8004308 <TIM_OC4_SetConfig+0xcc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_OC4_SetConfig+0x84>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a14      	ldr	r2, [pc, #80]	; (800430c <TIM_OC4_SetConfig+0xd0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d109      	bne.n	80042d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	019b      	lsls	r3, r3, #6
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40013400 	.word	0x40013400
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <TIM_OC5_SetConfig+0xb4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00f      	beq.n	800438a <TIM_OC5_SetConfig+0x7a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <TIM_OC5_SetConfig+0xb8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00b      	beq.n	800438a <TIM_OC5_SetConfig+0x7a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <TIM_OC5_SetConfig+0xbc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d007      	beq.n	800438a <TIM_OC5_SetConfig+0x7a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a14      	ldr	r2, [pc, #80]	; (80043d0 <TIM_OC5_SetConfig+0xc0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_OC5_SetConfig+0x7a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <TIM_OC5_SetConfig+0xc4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d109      	bne.n	800439e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	621a      	str	r2, [r3, #32]
}
 80043b8:	bf00      	nop
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40013400 	.word	0x40013400
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400
 80043d4:	40014800 	.word	0x40014800

080043d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800441e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	051b      	lsls	r3, r3, #20
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a18      	ldr	r2, [pc, #96]	; (8004490 <TIM_OC6_SetConfig+0xb8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00f      	beq.n	8004454 <TIM_OC6_SetConfig+0x7c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a17      	ldr	r2, [pc, #92]	; (8004494 <TIM_OC6_SetConfig+0xbc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00b      	beq.n	8004454 <TIM_OC6_SetConfig+0x7c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <TIM_OC6_SetConfig+0xc0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_OC6_SetConfig+0x7c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a15      	ldr	r2, [pc, #84]	; (800449c <TIM_OC6_SetConfig+0xc4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_OC6_SetConfig+0x7c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <TIM_OC6_SetConfig+0xc8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d109      	bne.n	8004468 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	029b      	lsls	r3, r3, #10
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40013400 	.word	0x40013400
 8004498:	40014000 	.word	0x40014000
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800

080044a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2201      	movs	r2, #1
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	401a      	ands	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1a      	ldr	r2, [r3, #32]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	fa01 f303 	lsl.w	r3, r1, r3
 80044dc:	431a      	orrs	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004504:	2302      	movs	r3, #2
 8004506:	e068      	b.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2e      	ldr	r2, [pc, #184]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2d      	ldr	r2, [pc, #180]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d108      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004542:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01d      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d018      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a13      	ldr	r2, [pc, #76]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10c      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40013400 	.word	0x40013400
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40014000 	.word	0x40014000

08004600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e040      	b.n	80046d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fc fe4e 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2224      	movs	r2, #36	; 0x24
 8004668:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fc18 	bl	8004eb0 <UART_SetConfig>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e022      	b.n	80046d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fec4 	bl	8005420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 ff4b 	bl	8005564 <UART_CheckIdleState>
 80046ce:	4603      	mov	r3, r0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	f040 8082 	bne.w	80047f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_UART_Transmit+0x26>
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07a      	b.n	80047f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UART_Transmit+0x38>
 800470c:	2302      	movs	r3, #2
 800470e:	e073      	b.n	80047f8 <HAL_UART_Transmit+0x120>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2221      	movs	r2, #33	; 0x21
 8004724:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004726:	f7fc ffe3 	bl	80016f0 <HAL_GetTick>
 800472a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	88fa      	ldrh	r2, [r7, #6]
 8004730:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004744:	d108      	bne.n	8004758 <HAL_UART_Transmit+0x80>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e003      	b.n	8004760 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004768:	e02d      	b.n	80047c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2180      	movs	r1, #128	; 0x80
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 ff3e 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e039      	b.n	80047f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10b      	bne.n	80047a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	881a      	ldrh	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004796:	b292      	uxth	r2, r2
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	3302      	adds	r3, #2
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e008      	b.n	80047b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	b292      	uxth	r2, r2
 80047ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3301      	adds	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1cb      	bne.n	800476a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	2140      	movs	r1, #64	; 0x40
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 ff0a 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e005      	b.n	80047f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e000      	b.n	80047f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004812:	2b20      	cmp	r3, #32
 8004814:	d142      	bne.n	800489c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <HAL_UART_Receive_IT+0x22>
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e03b      	b.n	800489e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_UART_Receive_IT+0x34>
 8004830:	2302      	movs	r3, #2
 8004832:	e034      	b.n	800489e <HAL_UART_Receive_IT+0x9e>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_UART_Receive_IT+0xa8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d01f      	beq.n	800488c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d018      	beq.n	800488c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	613b      	str	r3, [r7, #16]
   return(result);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	69f9      	ldr	r1, [r7, #28]
 800487e:	6a3a      	ldr	r2, [r7, #32]
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	61bb      	str	r3, [r7, #24]
   return(result);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e6      	bne.n	800485a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	461a      	mov	r2, r3
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 ff74 	bl	8005780 <UART_Start_Receive_IT>
 8004898:	4603      	mov	r3, r0
 800489a:	e000      	b.n	800489e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3728      	adds	r7, #40	; 0x28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40008000 	.word	0x40008000

080048ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b0ba      	sub	sp, #232	; 0xe8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80048d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80048da:	4013      	ands	r3, r2
 80048dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d115      	bne.n	8004914 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00f      	beq.n	8004914 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 82a6 	beq.w	8004e56 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
      }
      return;
 8004912:	e2a0      	b.n	8004e56 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004914:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8117 	beq.w	8004b4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800491e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800492a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800492e:	4b85      	ldr	r3, [pc, #532]	; (8004b44 <HAL_UART_IRQHandler+0x298>)
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 810a 	beq.w	8004b4c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d011      	beq.n	8004968 <HAL_UART_IRQHandler+0xbc>
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2201      	movs	r2, #1
 8004956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495e:	f043 0201 	orr.w	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d011      	beq.n	8004998 <HAL_UART_IRQHandler+0xec>
 8004974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2202      	movs	r2, #2
 8004986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498e:	f043 0204 	orr.w	r2, r3, #4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d011      	beq.n	80049c8 <HAL_UART_IRQHandler+0x11c>
 80049a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2204      	movs	r2, #4
 80049b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049be:	f043 0202 	orr.w	r2, r3, #2
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d017      	beq.n	8004a04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2208      	movs	r2, #8
 80049f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049fa:	f043 0208 	orr.w	r2, r3, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d012      	beq.n	8004a36 <HAL_UART_IRQHandler+0x18a>
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 820c 	beq.w	8004e5a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d005      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04f      	beq.n	8004b2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 ff40 	bl	8005914 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b40      	cmp	r3, #64	; 0x40
 8004aa0:	d141      	bne.n	8004b26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1d9      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d013      	beq.n	8004b1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <HAL_UART_IRQHandler+0x29c>)
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fc ff20 	bl	8001948 <HAL_DMA_Abort_IT>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d017      	beq.n	8004b3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	e00f      	b.n	8004b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f9b0 	bl	8004e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	e00b      	b.n	8004b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f9ac 	bl	8004e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	e007      	b.n	8004b3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9a8 	bl	8004e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004b3c:	e18d      	b.n	8004e5a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b3e:	bf00      	nop
    return;
 8004b40:	e18b      	b.n	8004e5a <HAL_UART_IRQHandler+0x5ae>
 8004b42:	bf00      	nop
 8004b44:	04000120 	.word	0x04000120
 8004b48:	080059db 	.word	0x080059db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 8146 	bne.w	8004de2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 813f 	beq.w	8004de2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8138 	beq.w	8004de2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2210      	movs	r2, #16
 8004b78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	f040 80b4 	bne.w	8004cf2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 815f 	beq.w	8004e5e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f080 8157 	bcs.w	8004e5e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 8085 	bne.w	8004cd6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1da      	bne.n	8004bcc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e1      	bne.n	8004c16 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e3      	bne.n	8004c52 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca6:	f023 0310 	bic.w	r3, r3, #16
 8004caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e4      	bne.n	8004c96 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fc fdfb 	bl	80018cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4619      	mov	r1, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8d4 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cf0:	e0b5      	b.n	8004e5e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 80a7 	beq.w	8004e62 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80a2 	beq.w	8004e62 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d40:	647b      	str	r3, [r7, #68]	; 0x44
 8004d42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e4      	bne.n	8004d1e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	623b      	str	r3, [r7, #32]
   return(result);
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3308      	adds	r3, #8
 8004d74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d78:	633a      	str	r2, [r7, #48]	; 0x30
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e3      	bne.n	8004d54 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0310 	bic.w	r3, r3, #16
 8004db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	69b9      	ldr	r1, [r7, #24]
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e4      	bne.n	8004d9e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f85c 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004de0:	e03f      	b.n	8004e62 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00e      	beq.n	8004e0c <HAL_UART_IRQHandler+0x560>
 8004dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 ff88 	bl	8005d1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e0a:	e02d      	b.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00e      	beq.n	8004e36 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d01c      	beq.n	8004e66 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
    }
    return;
 8004e34:	e017      	b.n	8004e66 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d012      	beq.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
 8004e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fdd9 	bl	8005a06 <UART_EndTransmit_IT>
    return;
 8004e54:	e008      	b.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e56:	bf00      	nop
 8004e58:	e006      	b.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004e66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e68:	37e8      	adds	r7, #232	; 0xe8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop

08004e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb4:	b08a      	sub	sp, #40	; 0x28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4ba4      	ldr	r3, [pc, #656]	; (8005170 <UART_SetConfig+0x2c0>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	6812      	ldr	r2, [r2, #0]
 8004ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a99      	ldr	r2, [pc, #612]	; (8005174 <UART_SetConfig+0x2c4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a90      	ldr	r2, [pc, #576]	; (8005178 <UART_SetConfig+0x2c8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d126      	bne.n	8004f88 <UART_SetConfig+0xd8>
 8004f3a:	4b90      	ldr	r3, [pc, #576]	; (800517c <UART_SetConfig+0x2cc>)
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d81b      	bhi.n	8004f80 <UART_SetConfig+0xd0>
 8004f48:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0xa0>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f71 	.word	0x08004f71
 8004f58:	08004f69 	.word	0x08004f69
 8004f5c:	08004f79 	.word	0x08004f79
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e116      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6e:	e112      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004f70:	2304      	movs	r3, #4
 8004f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f76:	e10e      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f7e:	e10a      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004f80:	2310      	movs	r3, #16
 8004f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f86:	e106      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a7c      	ldr	r2, [pc, #496]	; (8005180 <UART_SetConfig+0x2d0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d138      	bne.n	8005004 <UART_SetConfig+0x154>
 8004f92:	4b7a      	ldr	r3, [pc, #488]	; (800517c <UART_SetConfig+0x2cc>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f003 030c 	and.w	r3, r3, #12
 8004f9c:	2b0c      	cmp	r3, #12
 8004f9e:	d82d      	bhi.n	8004ffc <UART_SetConfig+0x14c>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0xf8>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	08004ffd 	.word	0x08004ffd
 8004fb0:	08004ffd 	.word	0x08004ffd
 8004fb4:	08004ffd 	.word	0x08004ffd
 8004fb8:	08004fed 	.word	0x08004fed
 8004fbc:	08004ffd 	.word	0x08004ffd
 8004fc0:	08004ffd 	.word	0x08004ffd
 8004fc4:	08004ffd 	.word	0x08004ffd
 8004fc8:	08004fe5 	.word	0x08004fe5
 8004fcc:	08004ffd 	.word	0x08004ffd
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08004ffd 	.word	0x08004ffd
 8004fd8:	08004ff5 	.word	0x08004ff5
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e0d8      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fea:	e0d4      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004fec:	2304      	movs	r3, #4
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e0d0      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e0cc      	b.n	8005196 <UART_SetConfig+0x2e6>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005002:	e0c8      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a5e      	ldr	r2, [pc, #376]	; (8005184 <UART_SetConfig+0x2d4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d125      	bne.n	800505a <UART_SetConfig+0x1aa>
 800500e:	4b5b      	ldr	r3, [pc, #364]	; (800517c <UART_SetConfig+0x2cc>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005018:	2b30      	cmp	r3, #48	; 0x30
 800501a:	d016      	beq.n	800504a <UART_SetConfig+0x19a>
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d818      	bhi.n	8005052 <UART_SetConfig+0x1a2>
 8005020:	2b20      	cmp	r3, #32
 8005022:	d00a      	beq.n	800503a <UART_SetConfig+0x18a>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d814      	bhi.n	8005052 <UART_SetConfig+0x1a2>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <UART_SetConfig+0x182>
 800502c:	2b10      	cmp	r3, #16
 800502e:	d008      	beq.n	8005042 <UART_SetConfig+0x192>
 8005030:	e00f      	b.n	8005052 <UART_SetConfig+0x1a2>
 8005032:	2300      	movs	r3, #0
 8005034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005038:	e0ad      	b.n	8005196 <UART_SetConfig+0x2e6>
 800503a:	2302      	movs	r3, #2
 800503c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005040:	e0a9      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005042:	2304      	movs	r3, #4
 8005044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005048:	e0a5      	b.n	8005196 <UART_SetConfig+0x2e6>
 800504a:	2308      	movs	r3, #8
 800504c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005050:	e0a1      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005052:	2310      	movs	r3, #16
 8005054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005058:	e09d      	b.n	8005196 <UART_SetConfig+0x2e6>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a4a      	ldr	r2, [pc, #296]	; (8005188 <UART_SetConfig+0x2d8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d125      	bne.n	80050b0 <UART_SetConfig+0x200>
 8005064:	4b45      	ldr	r3, [pc, #276]	; (800517c <UART_SetConfig+0x2cc>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800506e:	2bc0      	cmp	r3, #192	; 0xc0
 8005070:	d016      	beq.n	80050a0 <UART_SetConfig+0x1f0>
 8005072:	2bc0      	cmp	r3, #192	; 0xc0
 8005074:	d818      	bhi.n	80050a8 <UART_SetConfig+0x1f8>
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d00a      	beq.n	8005090 <UART_SetConfig+0x1e0>
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	d814      	bhi.n	80050a8 <UART_SetConfig+0x1f8>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <UART_SetConfig+0x1d8>
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d008      	beq.n	8005098 <UART_SetConfig+0x1e8>
 8005086:	e00f      	b.n	80050a8 <UART_SetConfig+0x1f8>
 8005088:	2300      	movs	r3, #0
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508e:	e082      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005090:	2302      	movs	r3, #2
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005096:	e07e      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005098:	2304      	movs	r3, #4
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509e:	e07a      	b.n	8005196 <UART_SetConfig+0x2e6>
 80050a0:	2308      	movs	r3, #8
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e076      	b.n	8005196 <UART_SetConfig+0x2e6>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e072      	b.n	8005196 <UART_SetConfig+0x2e6>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a35      	ldr	r2, [pc, #212]	; (800518c <UART_SetConfig+0x2dc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d12a      	bne.n	8005110 <UART_SetConfig+0x260>
 80050ba:	4b30      	ldr	r3, [pc, #192]	; (800517c <UART_SetConfig+0x2cc>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c8:	d01a      	beq.n	8005100 <UART_SetConfig+0x250>
 80050ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ce:	d81b      	bhi.n	8005108 <UART_SetConfig+0x258>
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d4:	d00c      	beq.n	80050f0 <UART_SetConfig+0x240>
 80050d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050da:	d815      	bhi.n	8005108 <UART_SetConfig+0x258>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <UART_SetConfig+0x238>
 80050e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e4:	d008      	beq.n	80050f8 <UART_SetConfig+0x248>
 80050e6:	e00f      	b.n	8005108 <UART_SetConfig+0x258>
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ee:	e052      	b.n	8005196 <UART_SetConfig+0x2e6>
 80050f0:	2302      	movs	r3, #2
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f6:	e04e      	b.n	8005196 <UART_SetConfig+0x2e6>
 80050f8:	2304      	movs	r3, #4
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fe:	e04a      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005100:	2308      	movs	r3, #8
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005106:	e046      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005108:	2310      	movs	r3, #16
 800510a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510e:	e042      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a17      	ldr	r2, [pc, #92]	; (8005174 <UART_SetConfig+0x2c4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d13a      	bne.n	8005190 <UART_SetConfig+0x2e0>
 800511a:	4b18      	ldr	r3, [pc, #96]	; (800517c <UART_SetConfig+0x2cc>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005124:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005128:	d01a      	beq.n	8005160 <UART_SetConfig+0x2b0>
 800512a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800512e:	d81b      	bhi.n	8005168 <UART_SetConfig+0x2b8>
 8005130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005134:	d00c      	beq.n	8005150 <UART_SetConfig+0x2a0>
 8005136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513a:	d815      	bhi.n	8005168 <UART_SetConfig+0x2b8>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <UART_SetConfig+0x298>
 8005140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005144:	d008      	beq.n	8005158 <UART_SetConfig+0x2a8>
 8005146:	e00f      	b.n	8005168 <UART_SetConfig+0x2b8>
 8005148:	2300      	movs	r3, #0
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514e:	e022      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005150:	2302      	movs	r3, #2
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e01e      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005158:	2304      	movs	r3, #4
 800515a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515e:	e01a      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005160:	2308      	movs	r3, #8
 8005162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005166:	e016      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005168:	2310      	movs	r3, #16
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516e:	e012      	b.n	8005196 <UART_SetConfig+0x2e6>
 8005170:	efff69f3 	.word	0xefff69f3
 8005174:	40008000 	.word	0x40008000
 8005178:	40013800 	.word	0x40013800
 800517c:	40021000 	.word	0x40021000
 8005180:	40004400 	.word	0x40004400
 8005184:	40004800 	.word	0x40004800
 8005188:	40004c00 	.word	0x40004c00
 800518c:	40005000 	.word	0x40005000
 8005190:	2310      	movs	r3, #16
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a9f      	ldr	r2, [pc, #636]	; (8005418 <UART_SetConfig+0x568>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d17a      	bne.n	8005296 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d824      	bhi.n	80051f2 <UART_SetConfig+0x342>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <UART_SetConfig+0x300>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051dd 	.word	0x080051dd
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051e3 	.word	0x080051e3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051f3 	.word	0x080051f3
 80051cc:	080051f3 	.word	0x080051f3
 80051d0:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d4:	f7fd fb94 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 80051d8:	61f8      	str	r0, [r7, #28]
        break;
 80051da:	e010      	b.n	80051fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b8f      	ldr	r3, [pc, #572]	; (800541c <UART_SetConfig+0x56c>)
 80051de:	61fb      	str	r3, [r7, #28]
        break;
 80051e0:	e00d      	b.n	80051fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7fd faf5 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80051e6:	61f8      	str	r0, [r7, #28]
        break;
 80051e8:	e009      	b.n	80051fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	61fb      	str	r3, [r7, #28]
        break;
 80051f0:	e005      	b.n	80051fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80fb 	beq.w	80053fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	4413      	add	r3, r2
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	429a      	cmp	r2, r3
 8005214:	d305      	bcc.n	8005222 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	429a      	cmp	r2, r3
 8005220:	d903      	bls.n	800522a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005228:	e0e8      	b.n	80053fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2200      	movs	r2, #0
 800522e:	461c      	mov	r4, r3
 8005230:	4615      	mov	r5, r2
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	022b      	lsls	r3, r5, #8
 800523c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005240:	0222      	lsls	r2, r4, #8
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	6849      	ldr	r1, [r1, #4]
 8005246:	0849      	lsrs	r1, r1, #1
 8005248:	2000      	movs	r0, #0
 800524a:	4688      	mov	r8, r1
 800524c:	4681      	mov	r9, r0
 800524e:	eb12 0a08 	adds.w	sl, r2, r8
 8005252:	eb43 0b09 	adc.w	fp, r3, r9
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005264:	4650      	mov	r0, sl
 8005266:	4659      	mov	r1, fp
 8005268:	f7fb f80a 	bl	8000280 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527a:	d308      	bcc.n	800528e <UART_SetConfig+0x3de>
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005282:	d204      	bcs.n	800528e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	60da      	str	r2, [r3, #12]
 800528c:	e0b6      	b.n	80053fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005294:	e0b2      	b.n	80053fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529e:	d15e      	bne.n	800535e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d828      	bhi.n	80052fa <UART_SetConfig+0x44a>
 80052a8:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <UART_SetConfig+0x400>)
 80052aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ae:	bf00      	nop
 80052b0:	080052d5 	.word	0x080052d5
 80052b4:	080052dd 	.word	0x080052dd
 80052b8:	080052e5 	.word	0x080052e5
 80052bc:	080052fb 	.word	0x080052fb
 80052c0:	080052eb 	.word	0x080052eb
 80052c4:	080052fb 	.word	0x080052fb
 80052c8:	080052fb 	.word	0x080052fb
 80052cc:	080052fb 	.word	0x080052fb
 80052d0:	080052f3 	.word	0x080052f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d4:	f7fd fb14 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 80052d8:	61f8      	str	r0, [r7, #28]
        break;
 80052da:	e014      	b.n	8005306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052dc:	f7fd fb26 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 80052e0:	61f8      	str	r0, [r7, #28]
        break;
 80052e2:	e010      	b.n	8005306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e4:	4b4d      	ldr	r3, [pc, #308]	; (800541c <UART_SetConfig+0x56c>)
 80052e6:	61fb      	str	r3, [r7, #28]
        break;
 80052e8:	e00d      	b.n	8005306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ea:	f7fd fa71 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80052ee:	61f8      	str	r0, [r7, #28]
        break;
 80052f0:	e009      	b.n	8005306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f6:	61fb      	str	r3, [r7, #28]
        break;
 80052f8:	e005      	b.n	8005306 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d077      	beq.n	80053fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	005a      	lsls	r2, r3, #1
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	085b      	lsrs	r3, r3, #1
 8005316:	441a      	add	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b0f      	cmp	r3, #15
 8005326:	d916      	bls.n	8005356 <UART_SetConfig+0x4a6>
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532e:	d212      	bcs.n	8005356 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f023 030f 	bic.w	r3, r3, #15
 8005338:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	b29a      	uxth	r2, r3
 8005346:	8afb      	ldrh	r3, [r7, #22]
 8005348:	4313      	orrs	r3, r2
 800534a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	8afa      	ldrh	r2, [r7, #22]
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	e052      	b.n	80053fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800535c:	e04e      	b.n	80053fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800535e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005362:	2b08      	cmp	r3, #8
 8005364:	d827      	bhi.n	80053b6 <UART_SetConfig+0x506>
 8005366:	a201      	add	r2, pc, #4	; (adr r2, 800536c <UART_SetConfig+0x4bc>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	08005391 	.word	0x08005391
 8005370:	08005399 	.word	0x08005399
 8005374:	080053a1 	.word	0x080053a1
 8005378:	080053b7 	.word	0x080053b7
 800537c:	080053a7 	.word	0x080053a7
 8005380:	080053b7 	.word	0x080053b7
 8005384:	080053b7 	.word	0x080053b7
 8005388:	080053b7 	.word	0x080053b7
 800538c:	080053af 	.word	0x080053af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005390:	f7fd fab6 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 8005394:	61f8      	str	r0, [r7, #28]
        break;
 8005396:	e014      	b.n	80053c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005398:	f7fd fac8 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 800539c:	61f8      	str	r0, [r7, #28]
        break;
 800539e:	e010      	b.n	80053c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a0:	4b1e      	ldr	r3, [pc, #120]	; (800541c <UART_SetConfig+0x56c>)
 80053a2:	61fb      	str	r3, [r7, #28]
        break;
 80053a4:	e00d      	b.n	80053c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a6:	f7fd fa13 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80053aa:	61f8      	str	r0, [r7, #28]
        break;
 80053ac:	e009      	b.n	80053c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b2:	61fb      	str	r3, [r7, #28]
        break;
 80053b4:	e005      	b.n	80053c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053c0:	bf00      	nop
    }

    if (pclk != 0U)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d019      	beq.n	80053fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	085a      	lsrs	r2, r3, #1
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	441a      	add	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b0f      	cmp	r3, #15
 80053e0:	d909      	bls.n	80053f6 <UART_SetConfig+0x546>
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e8:	d205      	bcs.n	80053f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	e002      	b.n	80053fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005408:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800540c:	4618      	mov	r0, r3
 800540e:	3728      	adds	r7, #40	; 0x28
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005416:	bf00      	nop
 8005418:	40008000 	.word	0x40008000
 800541c:	00f42400 	.word	0x00f42400

08005420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01a      	beq.n	8005536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551e:	d10a      	bne.n	8005536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af02      	add	r7, sp, #8
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005574:	f7fc f8bc 	bl	80016f0 <HAL_GetTick>
 8005578:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0308 	and.w	r3, r3, #8
 8005584:	2b08      	cmp	r3, #8
 8005586:	d10e      	bne.n	80055a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f82d 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e023      	b.n	80055ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d10e      	bne.n	80055d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f817 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e00d      	b.n	80055ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005606:	e0a5      	b.n	8005754 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	f000 80a1 	beq.w	8005754 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005612:	f7fc f86d 	bl	80016f0 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <UART_WaitOnFlagUntilTimeout+0x32>
 8005622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005624:	2b00      	cmp	r3, #0
 8005626:	d13e      	bne.n	80056a6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800563c:	667b      	str	r3, [r7, #100]	; 0x64
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005648:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800564c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e6      	bne.n	8005628 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3308      	adds	r3, #8
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	663b      	str	r3, [r7, #96]	; 0x60
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800567a:	64ba      	str	r2, [r7, #72]	; 0x48
 800567c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e067      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d04f      	beq.n	8005754 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056c2:	d147      	bne.n	8005754 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056cc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
 80056ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e6      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	613b      	str	r3, [r7, #16]
   return(result);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	66bb      	str	r3, [r7, #104]	; 0x68
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005720:	623a      	str	r2, [r7, #32]
 8005722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	69f9      	ldr	r1, [r7, #28]
 8005726:	6a3a      	ldr	r2, [r7, #32]
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	61bb      	str	r3, [r7, #24]
   return(result);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e5      	bne.n	8005700 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2220      	movs	r2, #32
 8005744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e010      	b.n	8005776 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	429a      	cmp	r2, r3
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	429a      	cmp	r2, r3
 8005770:	f43f af4a 	beq.w	8005608 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3770      	adds	r7, #112	; 0x70
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005780:	b480      	push	{r7}
 8005782:	b097      	sub	sp, #92	; 0x5c
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	d10e      	bne.n	80057d2 <UART_Start_Receive_IT+0x52>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <UART_Start_Receive_IT+0x48>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057c6:	e02d      	b.n	8005824 <UART_Start_Receive_IT+0xa4>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	22ff      	movs	r2, #255	; 0xff
 80057cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057d0:	e028      	b.n	8005824 <UART_Start_Receive_IT+0xa4>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10d      	bne.n	80057f6 <UART_Start_Receive_IT+0x76>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <UART_Start_Receive_IT+0x6c>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057ea:	e01b      	b.n	8005824 <UART_Start_Receive_IT+0xa4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	227f      	movs	r2, #127	; 0x7f
 80057f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057f4:	e016      	b.n	8005824 <UART_Start_Receive_IT+0xa4>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fe:	d10d      	bne.n	800581c <UART_Start_Receive_IT+0x9c>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <UART_Start_Receive_IT+0x92>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	227f      	movs	r2, #127	; 0x7f
 800580c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005810:	e008      	b.n	8005824 <UART_Start_Receive_IT+0xa4>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	223f      	movs	r2, #63	; 0x3f
 8005816:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800581a:	e003      	b.n	8005824 <UART_Start_Receive_IT+0xa4>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2222      	movs	r2, #34	; 0x22
 8005830:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3308      	adds	r3, #8
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	657b      	str	r3, [r7, #84]	; 0x54
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005852:	64ba      	str	r2, [r7, #72]	; 0x48
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e5      	bne.n	8005832 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586e:	d107      	bne.n	8005880 <UART_Start_Receive_IT+0x100>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d103      	bne.n	8005880 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a24      	ldr	r2, [pc, #144]	; (800590c <UART_Start_Receive_IT+0x18c>)
 800587c:	665a      	str	r2, [r3, #100]	; 0x64
 800587e:	e002      	b.n	8005886 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a23      	ldr	r2, [pc, #140]	; (8005910 <UART_Start_Receive_IT+0x190>)
 8005884:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d019      	beq.n	80058ca <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
 80058b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e6      	bne.n	8005896 <UART_Start_Receive_IT+0x116>
 80058c8:	e018      	b.n	80058fc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	613b      	str	r3, [r7, #16]
   return(result);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f043 0320 	orr.w	r3, r3, #32
 80058de:	653b      	str	r3, [r7, #80]	; 0x50
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	69f9      	ldr	r1, [r7, #28]
 80058ee:	6a3a      	ldr	r2, [r7, #32]
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e6      	bne.n	80058ca <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	375c      	adds	r7, #92	; 0x5c
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	08005bbb 	.word	0x08005bbb
 8005910:	08005a5b 	.word	0x08005a5b

08005914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b095      	sub	sp, #84	; 0x54
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
 800593c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005940:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e6      	bne.n	800591c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	61fb      	str	r3, [r7, #28]
   return(result);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	64bb      	str	r3, [r7, #72]	; 0x48
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800596e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005986:	2b01      	cmp	r3, #1
 8005988:	d118      	bne.n	80059bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	60bb      	str	r3, [r7, #8]
   return(result);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f023 0310 	bic.w	r3, r3, #16
 800599e:	647b      	str	r3, [r7, #68]	; 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6979      	ldr	r1, [r7, #20]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	613b      	str	r3, [r7, #16]
   return(result);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80059ce:	bf00      	nop
 80059d0:	3754      	adds	r7, #84	; 0x54
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff fa43 	bl	8004e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b088      	sub	sp, #32
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6979      	ldr	r1, [r7, #20]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e6      	bne.n	8005a0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fa0f 	bl	8004e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a52:	bf00      	nop
 8005a54:	3720      	adds	r7, #32
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b096      	sub	sp, #88	; 0x58
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a70:	2b22      	cmp	r3, #34	; 0x22
 8005a72:	f040 8094 	bne.w	8005b9e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a7c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a80:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005a84:	b2d9      	uxtb	r1, r3
 8005a86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	400a      	ands	r2, r1
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d179      	bne.n	8005bb2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ace:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005adc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ade:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	623b      	str	r3, [r7, #32]
   return(result);
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b10:	633a      	str	r2, [r7, #48]	; 0x30
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d12e      	bne.n	8005b96 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	69b9      	ldr	r1, [r7, #24]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d103      	bne.n	8005b86 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff f982 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b94:	e00d      	b.n	8005bb2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fa fd3a 	bl	8000610 <HAL_UART_RxCpltCallback>
}
 8005b9c:	e009      	b.n	8005bb2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	8b1b      	ldrh	r3, [r3, #24]
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0208 	orr.w	r2, r2, #8
 8005bae:	b292      	uxth	r2, r2
 8005bb0:	831a      	strh	r2, [r3, #24]
}
 8005bb2:	bf00      	nop
 8005bb4:	3758      	adds	r7, #88	; 0x58
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b096      	sub	sp, #88	; 0x58
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd0:	2b22      	cmp	r3, #34	; 0x22
 8005bd2:	f040 8094 	bne.w	8005cfe <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005bdc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005be6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005bea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005bee:	4013      	ands	r3, r2
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	1c9a      	adds	r2, r3, #2
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d179      	bne.n	8005d12 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e6      	bne.n	8005c1e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f023 0301 	bic.w	r3, r3, #1
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d12e      	bne.n	8005cf6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0310 	bic.w	r3, r3, #16
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6979      	ldr	r1, [r7, #20]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e6      	bne.n	8005c9e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b10      	cmp	r3, #16
 8005cdc:	d103      	bne.n	8005ce6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff f8d2 	bl	8004e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cf4:	e00d      	b.n	8005d12 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fa fc8a 	bl	8000610 <HAL_UART_RxCpltCallback>
}
 8005cfc:	e009      	b.n	8005d12 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	8b1b      	ldrh	r3, [r3, #24]
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0208 	orr.w	r2, r2, #8
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	831a      	strh	r2, [r3, #24]
}
 8005d12:	bf00      	nop
 8005d14:	3758      	adds	r7, #88	; 0x58
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005d34:	2020      	movs	r0, #32
 8005d36:	f002 ff67 	bl	8008c08 <pvPortMalloc>
 8005d3a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 f9bc 	bl	80060ca <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005d58:	687b      	ldr	r3, [r7, #4]
	}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b090      	sub	sp, #64	; 0x40
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <xEventGroupWaitBits+0x56>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	61fb      	str	r3, [r7, #28]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	61bb      	str	r3, [r7, #24]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dd6:	f001 ff5b 	bl	8007c90 <xTaskGetSchedulerState>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <xEventGroupWaitBits+0x82>
 8005de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <xEventGroupWaitBits+0x86>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <xEventGroupWaitBits+0x88>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	617b      	str	r3, [r7, #20]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005e06:	f001 facb 	bl	80073a0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e16:	f000 f936 	bl	8006086 <prvTestWaitCondition>
 8005e1a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00e      	beq.n	8005e40 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d028      	beq.n	8005e82 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	43db      	mvns	r3, r3
 8005e38:	401a      	ands	r2, r3
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e020      	b.n	8005e82 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e4e:	e018      	b.n	8005e82 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e5c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e6a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	1d18      	adds	r0, r3, #4
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	4313      	orrs	r3, r2
 8005e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f001 fc83 	bl	8007784 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005e82:	f001 fa9b 	bl	80073bc <xTaskResumeAll>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d031      	beq.n	8005ef2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005e94:	4b19      	ldr	r3, [pc, #100]	; (8005efc <xEventGroupWaitBits+0x198>)
 8005e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005ea4:	f002 f89c 	bl	8007fe0 <uxTaskResetEventItemValue>
 8005ea8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11a      	bne.n	8005eea <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005eb4:	f002 fd86 	bl	80089c4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005ec4:	f000 f8df 	bl	8006086 <prvTestWaitCondition>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	43db      	mvns	r3, r3
 8005edc:	401a      	ands	r2, r3
 8005ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005ee6:	f002 fd9d 	bl	8008a24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3740      	adds	r7, #64	; 0x40
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xEventGroupClearBits+0x2a>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	60fb      	str	r3, [r7, #12]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <xEventGroupClearBits+0x4a>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	60bb      	str	r3, [r7, #8]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005f4a:	f002 fd3b 	bl	80089c4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	401a      	ands	r2, r3
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005f62:	f002 fd5f 	bl	8008a24 <vPortExitCritical>

	return uxReturn;
 8005f66:	693b      	ldr	r3, [r7, #16]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005f82:	2300      	movs	r3, #0
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xEventGroupSetBits+0x32>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	613b      	str	r3, [r7, #16]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <xEventGroupSetBits+0x52>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	3308      	adds	r3, #8
 8005fcc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005fce:	f001 f9e7 	bl	80073a0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005fe4:	e03c      	b.n	8006060 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006004:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d108      	bne.n	8006022 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00b      	beq.n	8006034 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800601c:	2301      	movs	r3, #1
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006020:	e008      	b.n	8006034 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	4013      	ands	r3, r2
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	429a      	cmp	r2, r3
 800602e:	d101      	bne.n	8006034 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d010      	beq.n	800605c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	4313      	orrs	r3, r2
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006054:	4619      	mov	r1, r3
 8006056:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006058:	f001 fc5e 	bl	8007918 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	429a      	cmp	r2, r3
 8006066:	d1be      	bne.n	8005fe6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	43db      	mvns	r3, r3
 8006070:	401a      	ands	r2, r3
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006076:	f001 f9a1 	bl	80073bc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607c:	681b      	ldr	r3, [r3, #0]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3738      	adds	r7, #56	; 0x38
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006086:	b480      	push	{r7}
 8006088:	b087      	sub	sp, #28
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d107      	bne.n	80060ac <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4013      	ands	r3, r2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	617b      	str	r3, [r7, #20]
 80060aa:	e007      	b.n	80060bc <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4013      	ands	r3, r2
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d101      	bne.n	80060bc <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80060b8:	2301      	movs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80060bc:	697b      	ldr	r3, [r7, #20]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f103 0208 	add.w	r2, r3, #8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f103 0208 	add.w	r2, r3, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f103 0208 	add.w	r2, r3, #8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d103      	bne.n	800618c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	e00c      	b.n	80061a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3308      	adds	r3, #8
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e002      	b.n	800619a <vListInsert+0x2e>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d2f6      	bcs.n	8006194 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
}
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6892      	ldr	r2, [r2, #8]
 80061f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6852      	ldr	r2, [r2, #4]
 80061fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d103      	bne.n	8006212 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	1e5a      	subs	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xQueueGenericReset+0x2a>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	60bb      	str	r3, [r7, #8]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800625e:	f002 fbb1 	bl	80089c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	68f9      	ldr	r1, [r7, #12]
 800626c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800626e:	fb01 f303 	mul.w	r3, r1, r3
 8006272:	441a      	add	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	3b01      	subs	r3, #1
 8006290:	68f9      	ldr	r1, [r7, #12]
 8006292:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	441a      	add	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d114      	bne.n	80062de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01a      	beq.n	80062f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3310      	adds	r3, #16
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 fac7 	bl	8007854 <xTaskRemoveFromEventList>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d012      	beq.n	80062f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062cc:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <xQueueGenericReset+0xcc>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	e009      	b.n	80062f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3310      	adds	r3, #16
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff fef1 	bl	80060ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3324      	adds	r3, #36	; 0x24
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff feec 	bl	80060ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062f2:	f002 fb97 	bl	8008a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062f6:	2301      	movs	r3, #1
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	e000ed04 	.word	0xe000ed04

08006304 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	; 0x38
 8006308:	af02      	add	r7, sp, #8
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <xQueueGenericCreateStatic+0x52>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <xQueueGenericCreateStatic+0x56>
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <xQueueGenericCreateStatic+0x58>
 800635a:	2300      	movs	r3, #0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	623b      	str	r3, [r7, #32]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d102      	bne.n	8006382 <xQueueGenericCreateStatic+0x7e>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <xQueueGenericCreateStatic+0x82>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <xQueueGenericCreateStatic+0x84>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	61fb      	str	r3, [r7, #28]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063a2:	2350      	movs	r3, #80	; 0x50
 80063a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b50      	cmp	r3, #80	; 0x50
 80063aa:	d00a      	beq.n	80063c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	61bb      	str	r3, [r7, #24]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80063c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00d      	beq.n	80063ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	4613      	mov	r3, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f83f 	bl	8006468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3730      	adds	r7, #48	; 0x30
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	613b      	str	r3, [r7, #16]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	3350      	adds	r3, #80	; 0x50
 800642c:	4618      	mov	r0, r3
 800642e:	f002 fbeb 	bl	8008c08 <pvPortMalloc>
 8006432:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d011      	beq.n	800645e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	3350      	adds	r3, #80	; 0x50
 8006442:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800644c:	79fa      	ldrb	r2, [r7, #7]
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f805 	bl	8006468 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800645e:	69bb      	ldr	r3, [r7, #24]
	}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e002      	b.n	800648a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006496:	2101      	movs	r1, #1
 8006498:	69b8      	ldr	r0, [r7, #24]
 800649a:	f7ff fecb 	bl	8006234 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	78fa      	ldrb	r2, [r7, #3]
 80064a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00e      	beq.n	80064da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80064ce:	2300      	movs	r3, #0
 80064d0:	2200      	movs	r2, #0
 80064d2:	2100      	movs	r1, #0
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f81d 	bl	8006514 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b086      	sub	sp, #24
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	4603      	mov	r3, r0
 80064ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	2300      	movs	r3, #0
 80064f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	461a      	mov	r2, r3
 80064f8:	6939      	ldr	r1, [r7, #16]
 80064fa:	6978      	ldr	r0, [r7, #20]
 80064fc:	f7ff ff7a 	bl	80063f4 <xQueueGenericCreate>
 8006500:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff ffd3 	bl	80064ae <prvInitialiseMutex>

		return xNewQueue;
 8006508:	68fb      	ldr	r3, [r7, #12]
	}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	; 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006522:	2300      	movs	r3, #0
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xQueueGenericSend+0x32>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d103      	bne.n	8006554 <xQueueGenericSend+0x40>
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <xQueueGenericSend+0x44>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <xQueueGenericSend+0x46>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <xQueueGenericSend+0x60>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d103      	bne.n	8006582 <xQueueGenericSend+0x6e>
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <xQueueGenericSend+0x72>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <xQueueGenericSend+0x74>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	623b      	str	r3, [r7, #32]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a2:	f001 fb75 	bl	8007c90 <xTaskGetSchedulerState>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <xQueueGenericSend+0x9e>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <xQueueGenericSend+0xa2>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <xQueueGenericSend+0xa4>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	61fb      	str	r3, [r7, #28]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065d2:	f002 f9f7 	bl	80089c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <xQueueGenericSend+0xd4>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d129      	bne.n	800663c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ee:	f000 fb2f 	bl	8006c50 <prvCopyDataToQueue>
 80065f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d010      	beq.n	800661e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f001 f927 	bl	8007854 <xTaskRemoveFromEventList>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d013      	beq.n	8006634 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800660c:	4b3f      	ldr	r3, [pc, #252]	; (800670c <xQueueGenericSend+0x1f8>)
 800660e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	e00a      	b.n	8006634 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006624:	4b39      	ldr	r3, [pc, #228]	; (800670c <xQueueGenericSend+0x1f8>)
 8006626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006634:	f002 f9f6 	bl	8008a24 <vPortExitCritical>
				return pdPASS;
 8006638:	2301      	movs	r3, #1
 800663a:	e063      	b.n	8006704 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d103      	bne.n	800664a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006642:	f002 f9ef 	bl	8008a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006646:	2300      	movs	r3, #0
 8006648:	e05c      	b.n	8006704 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	4618      	mov	r0, r3
 8006656:	f001 f9c1 	bl	80079dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800665a:	2301      	movs	r3, #1
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800665e:	f002 f9e1 	bl	8008a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006662:	f000 fe9d 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006666:	f002 f9ad 	bl	80089c4 <vPortEnterCritical>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006670:	b25b      	sxtb	r3, r3
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d103      	bne.n	8006680 <xQueueGenericSend+0x16c>
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006686:	b25b      	sxtb	r3, r3
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d103      	bne.n	8006696 <xQueueGenericSend+0x182>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006696:	f002 f9c5 	bl	8008a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800669a:	1d3a      	adds	r2, r7, #4
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	4611      	mov	r1, r2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 f9b0 	bl	8007a08 <xTaskCheckForTimeOut>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d124      	bne.n	80066f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066b0:	f000 fbc6 	bl	8006e40 <prvIsQueueFull>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d018      	beq.n	80066ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	3310      	adds	r3, #16
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 f83a 	bl	800773c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ca:	f000 fb51 	bl	8006d70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ce:	f000 fe75 	bl	80073bc <xTaskResumeAll>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f47f af7c 	bne.w	80065d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066da:	4b0c      	ldr	r3, [pc, #48]	; (800670c <xQueueGenericSend+0x1f8>)
 80066dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	e772      	b.n	80065d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ee:	f000 fb3f 	bl	8006d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066f2:	f000 fe63 	bl	80073bc <xTaskResumeAll>
 80066f6:	e76c      	b.n	80065d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066fa:	f000 fb39 	bl	8006d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066fe:	f000 fe5d 	bl	80073bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006704:	4618      	mov	r0, r3
 8006706:	3738      	adds	r7, #56	; 0x38
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b090      	sub	sp, #64	; 0x40
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <xQueueGenericSendFromISR+0x3c>
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <xQueueGenericSendFromISR+0x40>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <xQueueGenericSendFromISR+0x42>
 8006750:	2300      	movs	r3, #0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10a      	bne.n	800676c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d103      	bne.n	800677a <xQueueGenericSendFromISR+0x6a>
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <xQueueGenericSendFromISR+0x6e>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <xQueueGenericSendFromISR+0x70>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	623b      	str	r3, [r7, #32]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800679a:	f002 f9f5 	bl	8008b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800679e:	f3ef 8211 	mrs	r2, BASEPRI
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	61fa      	str	r2, [r7, #28]
 80067b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <xQueueGenericSendFromISR+0xbc>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d12f      	bne.n	800682c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067e2:	f000 fa35 	bl	8006c50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	d112      	bne.n	8006816 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d016      	beq.n	8006826 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	3324      	adds	r3, #36	; 0x24
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f829 	bl	8007854 <xTaskRemoveFromEventList>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00e      	beq.n	8006826 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e007      	b.n	8006826 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800681a:	3301      	adds	r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	b25a      	sxtb	r2, r3
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006826:	2301      	movs	r3, #1
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800682a:	e001      	b.n	8006830 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800682c:	2300      	movs	r3, #0
 800682e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006832:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800683a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800683e:	4618      	mov	r0, r3
 8006840:	3740      	adds	r7, #64	; 0x40
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08c      	sub	sp, #48	; 0x30
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <xQueueReceive+0x30>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	623b      	str	r3, [r7, #32]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <xQueueReceive+0x3e>
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <xQueueReceive+0x42>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <xQueueReceive+0x44>
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xQueueReceive+0x5e>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	61fb      	str	r3, [r7, #28]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068a6:	f001 f9f3 	bl	8007c90 <xTaskGetSchedulerState>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <xQueueReceive+0x6e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <xQueueReceive+0x72>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <xQueueReceive+0x74>
 80068ba:	2300      	movs	r3, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <xQueueReceive+0x8e>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	61bb      	str	r3, [r7, #24]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068d6:	f002 f875 	bl	80089c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d01f      	beq.n	8006926 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ea:	f000 fa1b 	bl	8006d24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00f      	beq.n	800691e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	3310      	adds	r3, #16
 8006902:	4618      	mov	r0, r3
 8006904:	f000 ffa6 	bl	8007854 <xTaskRemoveFromEventList>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800690e:	4b3d      	ldr	r3, [pc, #244]	; (8006a04 <xQueueReceive+0x1bc>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800691e:	f002 f881 	bl	8008a24 <vPortExitCritical>
				return pdPASS;
 8006922:	2301      	movs	r3, #1
 8006924:	e069      	b.n	80069fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d103      	bne.n	8006934 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800692c:	f002 f87a 	bl	8008a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006930:	2300      	movs	r3, #0
 8006932:	e062      	b.n	80069fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800693a:	f107 0310 	add.w	r3, r7, #16
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f84c 	bl	80079dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006948:	f002 f86c 	bl	8008a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800694c:	f000 fd28 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006950:	f002 f838 	bl	80089c4 <vPortEnterCritical>
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800695a:	b25b      	sxtb	r3, r3
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d103      	bne.n	800696a <xQueueReceive+0x122>
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006970:	b25b      	sxtb	r3, r3
 8006972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006976:	d103      	bne.n	8006980 <xQueueReceive+0x138>
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006980:	f002 f850 	bl	8008a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006984:	1d3a      	adds	r2, r7, #4
 8006986:	f107 0310 	add.w	r3, r7, #16
 800698a:	4611      	mov	r1, r2
 800698c:	4618      	mov	r0, r3
 800698e:	f001 f83b 	bl	8007a08 <xTaskCheckForTimeOut>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d123      	bne.n	80069e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800699a:	f000 fa3b 	bl	8006e14 <prvIsQueueEmpty>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d017      	beq.n	80069d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	3324      	adds	r3, #36	; 0x24
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4611      	mov	r1, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fec5 	bl	800773c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b4:	f000 f9dc 	bl	8006d70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069b8:	f000 fd00 	bl	80073bc <xTaskResumeAll>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d189      	bne.n	80068d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069c2:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <xQueueReceive+0x1bc>)
 80069c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	e780      	b.n	80068d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d6:	f000 f9cb 	bl	8006d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069da:	f000 fcef 	bl	80073bc <xTaskResumeAll>
 80069de:	e77a      	b.n	80068d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e2:	f000 f9c5 	bl	8006d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069e6:	f000 fce9 	bl	80073bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ec:	f000 fa12 	bl	8006e14 <prvIsQueueEmpty>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f43f af6f 	beq.w	80068d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3730      	adds	r7, #48	; 0x30
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08e      	sub	sp, #56	; 0x38
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10a      	bne.n	8006a3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	623b      	str	r3, [r7, #32]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	61fb      	str	r3, [r7, #28]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a58:	f001 f91a 	bl	8007c90 <xTaskGetSchedulerState>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <xQueueSemaphoreTake+0x60>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <xQueueSemaphoreTake+0x64>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <xQueueSemaphoreTake+0x66>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	61bb      	str	r3, [r7, #24]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a88:	f001 ff9c 	bl	80089c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d024      	beq.n	8006ae2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	1e5a      	subs	r2, r3, #1
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006aa8:	f001 fab2 	bl	8008010 <pvTaskIncrementMutexHeldCount>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00f      	beq.n	8006ada <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	3310      	adds	r3, #16
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fec8 	bl	8007854 <xTaskRemoveFromEventList>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d007      	beq.n	8006ada <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aca:	4b54      	ldr	r3, [pc, #336]	; (8006c1c <xQueueSemaphoreTake+0x214>)
 8006acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ada:	f001 ffa3 	bl	8008a24 <vPortExitCritical>
				return pdPASS;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e097      	b.n	8006c12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d111      	bne.n	8006b0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	617b      	str	r3, [r7, #20]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b04:	f001 ff8e 	bl	8008a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e082      	b.n	8006c12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d106      	bne.n	8006b20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b12:	f107 030c 	add.w	r3, r7, #12
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 ff60 	bl	80079dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b20:	f001 ff80 	bl	8008a24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b24:	f000 fc3c 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b28:	f001 ff4c 	bl	80089c4 <vPortEnterCritical>
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b32:	b25b      	sxtb	r3, r3
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d103      	bne.n	8006b42 <xQueueSemaphoreTake+0x13a>
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b48:	b25b      	sxtb	r3, r3
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d103      	bne.n	8006b58 <xQueueSemaphoreTake+0x150>
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b58:	f001 ff64 	bl	8008a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b5c:	463a      	mov	r2, r7
 8006b5e:	f107 030c 	add.w	r3, r7, #12
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 ff4f 	bl	8007a08 <xTaskCheckForTimeOut>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d132      	bne.n	8006bd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b72:	f000 f94f 	bl	8006e14 <prvIsQueueEmpty>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d026      	beq.n	8006bca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d109      	bne.n	8006b98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006b84:	f001 ff1e 	bl	80089c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 f89d 	bl	8007ccc <xTaskPriorityInherit>
 8006b92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006b94:	f001 ff46 	bl	8008a24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	3324      	adds	r3, #36	; 0x24
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 fdcb 	bl	800773c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ba8:	f000 f8e2 	bl	8006d70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bac:	f000 fc06 	bl	80073bc <xTaskResumeAll>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f47f af68 	bne.w	8006a88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006bb8:	4b18      	ldr	r3, [pc, #96]	; (8006c1c <xQueueSemaphoreTake+0x214>)
 8006bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	e75e      	b.n	8006a88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bcc:	f000 f8d0 	bl	8006d70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bd0:	f000 fbf4 	bl	80073bc <xTaskResumeAll>
 8006bd4:	e758      	b.n	8006a88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bd8:	f000 f8ca 	bl	8006d70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bdc:	f000 fbee 	bl	80073bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006be2:	f000 f917 	bl	8006e14 <prvIsQueueEmpty>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f43f af4d 	beq.w	8006a88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00d      	beq.n	8006c10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006bf4:	f001 fee6 	bl	80089c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bfa:	f000 f811 	bl	8006c20 <prvGetDisinheritPriorityAfterTimeout>
 8006bfe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 f95c 	bl	8007ec4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c0c:	f001 ff0a 	bl	8008a24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3738      	adds	r7, #56	; 0x38
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d006      	beq.n	8006c3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f1c3 0307 	rsb	r3, r3, #7
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	e001      	b.n	8006c42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006c42:	68fb      	ldr	r3, [r7, #12]
	}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10d      	bne.n	8006c8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d14d      	bne.n	8006d12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 f89c 	bl	8007db8 <xTaskPriorityDisinherit>
 8006c80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	609a      	str	r2, [r3, #8]
 8006c88:	e043      	b.n	8006d12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d119      	bne.n	8006cc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6858      	ldr	r0, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	f002 fb99 	bl	80093d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	441a      	add	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d32b      	bcc.n	8006d12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	e026      	b.n	8006d12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68d8      	ldr	r0, [r3, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	f002 fb7f 	bl	80093d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	425b      	negs	r3, r3
 8006cde:	441a      	add	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d207      	bcs.n	8006d00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	425b      	negs	r3, r3
 8006cfa:	441a      	add	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d105      	bne.n	8006d12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d1a:	697b      	ldr	r3, [r7, #20]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d018      	beq.n	8006d68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	441a      	add	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d303      	bcc.n	8006d58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68d9      	ldr	r1, [r3, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	461a      	mov	r2, r3
 8006d62:	6838      	ldr	r0, [r7, #0]
 8006d64:	f002 fb35 	bl	80093d2 <memcpy>
	}
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d78:	f001 fe24 	bl	80089c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d84:	e011      	b.n	8006daa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d012      	beq.n	8006db4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3324      	adds	r3, #36	; 0x24
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fd5e 	bl	8007854 <xTaskRemoveFromEventList>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d9e:	f000 fe95 	bl	8007acc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	dce9      	bgt.n	8006d86 <prvUnlockQueue+0x16>
 8006db2:	e000      	b.n	8006db6 <prvUnlockQueue+0x46>
					break;
 8006db4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	22ff      	movs	r2, #255	; 0xff
 8006dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006dbe:	f001 fe31 	bl	8008a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dc2:	f001 fdff 	bl	80089c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dce:	e011      	b.n	8006df4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3310      	adds	r3, #16
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fd39 	bl	8007854 <xTaskRemoveFromEventList>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006de8:	f000 fe70 	bl	8007acc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dce9      	bgt.n	8006dd0 <prvUnlockQueue+0x60>
 8006dfc:	e000      	b.n	8006e00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006dfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	22ff      	movs	r2, #255	; 0xff
 8006e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e08:	f001 fe0c 	bl	8008a24 <vPortExitCritical>
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e1c:	f001 fdd2 	bl	80089c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	e001      	b.n	8006e32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e32:	f001 fdf7 	bl	8008a24 <vPortExitCritical>

	return xReturn;
 8006e36:	68fb      	ldr	r3, [r7, #12]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e48:	f001 fdbc 	bl	80089c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d102      	bne.n	8006e5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e001      	b.n	8006e62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e62:	f001 fddf 	bl	8008a24 <vPortExitCritical>

	return xReturn;
 8006e66:	68fb      	ldr	r3, [r7, #12]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	e014      	b.n	8006eaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e80:	4a0f      	ldr	r2, [pc, #60]	; (8006ec0 <vQueueAddToRegistry+0x50>)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10b      	bne.n	8006ea4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e8c:	490c      	ldr	r1, [pc, #48]	; (8006ec0 <vQueueAddToRegistry+0x50>)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e96:	4a0a      	ldr	r2, [pc, #40]	; (8006ec0 <vQueueAddToRegistry+0x50>)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	4413      	add	r3, r2
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ea2:	e006      	b.n	8006eb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b07      	cmp	r3, #7
 8006eae:	d9e7      	bls.n	8006e80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20001ac0 	.word	0x20001ac0

08006ec4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ed4:	f001 fd76 	bl	80089c4 <vPortEnterCritical>
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ede:	b25b      	sxtb	r3, r3
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d103      	bne.n	8006eee <vQueueWaitForMessageRestricted+0x2a>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ef4:	b25b      	sxtb	r3, r3
 8006ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efa:	d103      	bne.n	8006f04 <vQueueWaitForMessageRestricted+0x40>
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f04:	f001 fd8e 	bl	8008a24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fc6f 	bl	80077fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f1e:	6978      	ldr	r0, [r7, #20]
 8006f20:	f7ff ff26 	bl	8006d70 <prvUnlockQueue>
	}
 8006f24:	bf00      	nop
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08e      	sub	sp, #56	; 0x38
 8006f30:	af04      	add	r7, sp, #16
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	623b      	str	r3, [r7, #32]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	61fb      	str	r3, [r7, #28]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f72:	235c      	movs	r3, #92	; 0x5c
 8006f74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b5c      	cmp	r3, #92	; 0x5c
 8006f7a:	d00a      	beq.n	8006f92 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	61bb      	str	r3, [r7, #24]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01e      	beq.n	8006fd8 <xTaskCreateStatic+0xac>
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	2202      	movs	r2, #2
 8006fae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9303      	str	r3, [sp, #12]
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	9302      	str	r3, [sp, #8]
 8006fba:	f107 0314 	add.w	r3, r7, #20
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68b9      	ldr	r1, [r7, #8]
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f850 	bl	8007070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fd2:	f000 f8dd 	bl	8007190 <prvAddNewTaskToReadyList>
 8006fd6:	e001      	b.n	8006fdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006fdc:	697b      	ldr	r3, [r7, #20]
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3728      	adds	r7, #40	; 0x28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b08c      	sub	sp, #48	; 0x30
 8006fea:	af04      	add	r7, sp, #16
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	603b      	str	r3, [r7, #0]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 fe04 	bl	8008c08 <pvPortMalloc>
 8007000:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00e      	beq.n	8007026 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007008:	205c      	movs	r0, #92	; 0x5c
 800700a:	f001 fdfd 	bl	8008c08 <pvPortMalloc>
 800700e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
 800701c:	e005      	b.n	800702a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800701e:	6978      	ldr	r0, [r7, #20]
 8007020:	f001 febe 	bl	8008da0 <vPortFree>
 8007024:	e001      	b.n	800702a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d017      	beq.n	8007060 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007038:	88fa      	ldrh	r2, [r7, #6]
 800703a:	2300      	movs	r3, #0
 800703c:	9303      	str	r3, [sp, #12]
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	9302      	str	r3, [sp, #8]
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f80e 	bl	8007070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007054:	69f8      	ldr	r0, [r7, #28]
 8007056:	f000 f89b 	bl	8007190 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800705a:	2301      	movs	r3, #1
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e002      	b.n	8007066 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007066:	69bb      	ldr	r3, [r7, #24]
	}
 8007068:	4618      	mov	r0, r3
 800706a:	3720      	adds	r7, #32
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007080:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	461a      	mov	r2, r3
 8007088:	21a5      	movs	r1, #165	; 0xa5
 800708a:	f002 f9b0 	bl	80093ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007098:	3b01      	subs	r3, #1
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	f023 0307 	bic.w	r3, r3, #7
 80070a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	617b      	str	r3, [r7, #20]
}
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01f      	beq.n	800710e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	e012      	b.n	80070fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	7819      	ldrb	r1, [r3, #0]
 80070dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	3334      	adds	r3, #52	; 0x34
 80070e4:	460a      	mov	r2, r1
 80070e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d006      	beq.n	8007102 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61fb      	str	r3, [r7, #28]
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	2b0f      	cmp	r3, #15
 80070fe:	d9e9      	bls.n	80070d4 <prvInitialiseNewTask+0x64>
 8007100:	e000      	b.n	8007104 <prvInitialiseNewTask+0x94>
			{
				break;
 8007102:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800710c:	e003      	b.n	8007116 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	2b06      	cmp	r3, #6
 800711a:	d901      	bls.n	8007120 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800711c:	2306      	movs	r3, #6
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007124:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800712a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	2200      	movs	r2, #0
 8007130:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	3304      	adds	r3, #4
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe ffe7 	bl	800610a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	3318      	adds	r3, #24
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe ffe2 	bl	800610a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	f1c3 0207 	rsb	r2, r3, #7
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	2200      	movs	r2, #0
 8007160:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	68f9      	ldr	r1, [r7, #12]
 800716e:	69b8      	ldr	r0, [r7, #24]
 8007170:	f001 fafa 	bl	8008768 <pxPortInitialiseStack>
 8007174:	4602      	mov	r2, r0
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007186:	bf00      	nop
 8007188:	3720      	adds	r7, #32
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007198:	f001 fc14 	bl	80089c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800719c:	4b2c      	ldr	r3, [pc, #176]	; (8007250 <prvAddNewTaskToReadyList+0xc0>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3301      	adds	r3, #1
 80071a2:	4a2b      	ldr	r2, [pc, #172]	; (8007250 <prvAddNewTaskToReadyList+0xc0>)
 80071a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071a6:	4b2b      	ldr	r3, [pc, #172]	; (8007254 <prvAddNewTaskToReadyList+0xc4>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ae:	4a29      	ldr	r2, [pc, #164]	; (8007254 <prvAddNewTaskToReadyList+0xc4>)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071b4:	4b26      	ldr	r3, [pc, #152]	; (8007250 <prvAddNewTaskToReadyList+0xc0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d110      	bne.n	80071de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071bc:	f000 fcaa 	bl	8007b14 <prvInitialiseTaskLists>
 80071c0:	e00d      	b.n	80071de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071c2:	4b25      	ldr	r3, [pc, #148]	; (8007258 <prvAddNewTaskToReadyList+0xc8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071ca:	4b22      	ldr	r3, [pc, #136]	; (8007254 <prvAddNewTaskToReadyList+0xc4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d802      	bhi.n	80071de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071d8:	4a1e      	ldr	r2, [pc, #120]	; (8007254 <prvAddNewTaskToReadyList+0xc4>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071de:	4b1f      	ldr	r3, [pc, #124]	; (800725c <prvAddNewTaskToReadyList+0xcc>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	4a1d      	ldr	r2, [pc, #116]	; (800725c <prvAddNewTaskToReadyList+0xcc>)
 80071e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <prvAddNewTaskToReadyList+0xcc>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	4b19      	ldr	r3, [pc, #100]	; (8007260 <prvAddNewTaskToReadyList+0xd0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	4a18      	ldr	r2, [pc, #96]	; (8007260 <prvAddNewTaskToReadyList+0xd0>)
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4a15      	ldr	r2, [pc, #84]	; (8007264 <prvAddNewTaskToReadyList+0xd4>)
 8007210:	441a      	add	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3304      	adds	r3, #4
 8007216:	4619      	mov	r1, r3
 8007218:	4610      	mov	r0, r2
 800721a:	f7fe ff83 	bl	8006124 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800721e:	f001 fc01 	bl	8008a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <prvAddNewTaskToReadyList+0xc8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00e      	beq.n	8007248 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800722a:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <prvAddNewTaskToReadyList+0xc4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	429a      	cmp	r2, r3
 8007236:	d207      	bcs.n	8007248 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <prvAddNewTaskToReadyList+0xd8>)
 800723a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20001c00 	.word	0x20001c00
 8007254:	20001b00 	.word	0x20001b00
 8007258:	20001c0c 	.word	0x20001c0c
 800725c:	20001c1c 	.word	0x20001c1c
 8007260:	20001c08 	.word	0x20001c08
 8007264:	20001b04 	.word	0x20001b04
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d017      	beq.n	80072ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800727e:	4b13      	ldr	r3, [pc, #76]	; (80072cc <vTaskDelay+0x60>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <vTaskDelay+0x30>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60bb      	str	r3, [r7, #8]
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800729c:	f000 f880 	bl	80073a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072a0:	2100      	movs	r1, #0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fec8 	bl	8008038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072a8:	f000 f888 	bl	80073bc <xTaskResumeAll>
 80072ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d107      	bne.n	80072c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <vTaskDelay+0x64>)
 80072b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20001c28 	.word	0x20001c28
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08a      	sub	sp, #40	; 0x28
 80072d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072e2:	463a      	mov	r2, r7
 80072e4:	1d39      	adds	r1, r7, #4
 80072e6:	f107 0308 	add.w	r3, r7, #8
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7f9 f94a 	bl	8000584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	9202      	str	r2, [sp, #8]
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	2300      	movs	r3, #0
 8007300:	460a      	mov	r2, r1
 8007302:	4921      	ldr	r1, [pc, #132]	; (8007388 <vTaskStartScheduler+0xb4>)
 8007304:	4821      	ldr	r0, [pc, #132]	; (800738c <vTaskStartScheduler+0xb8>)
 8007306:	f7ff fe11 	bl	8006f2c <xTaskCreateStatic>
 800730a:	4603      	mov	r3, r0
 800730c:	4a20      	ldr	r2, [pc, #128]	; (8007390 <vTaskStartScheduler+0xbc>)
 800730e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007310:	4b1f      	ldr	r3, [pc, #124]	; (8007390 <vTaskStartScheduler+0xbc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007318:	2301      	movs	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e001      	b.n	8007322 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007328:	f000 feec 	bl	8008104 <xTimerCreateTimerTask>
 800732c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d116      	bne.n	8007362 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	613b      	str	r3, [r7, #16]
}
 8007346:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007348:	4b12      	ldr	r3, [pc, #72]	; (8007394 <vTaskStartScheduler+0xc0>)
 800734a:	f04f 32ff 	mov.w	r2, #4294967295
 800734e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007350:	4b11      	ldr	r3, [pc, #68]	; (8007398 <vTaskStartScheduler+0xc4>)
 8007352:	2201      	movs	r2, #1
 8007354:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <vTaskStartScheduler+0xc8>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800735c:	f001 fa90 	bl	8008880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007360:	e00e      	b.n	8007380 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d10a      	bne.n	8007380 <vTaskStartScheduler+0xac>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	60fb      	str	r3, [r7, #12]
}
 800737c:	bf00      	nop
 800737e:	e7fe      	b.n	800737e <vTaskStartScheduler+0xaa>
}
 8007380:	bf00      	nop
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	0800a3a8 	.word	0x0800a3a8
 800738c:	08007ae5 	.word	0x08007ae5
 8007390:	20001c24 	.word	0x20001c24
 8007394:	20001c20 	.word	0x20001c20
 8007398:	20001c0c 	.word	0x20001c0c
 800739c:	20001c04 	.word	0x20001c04

080073a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073a4:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <vTaskSuspendAll+0x18>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	4a03      	ldr	r2, [pc, #12]	; (80073b8 <vTaskSuspendAll+0x18>)
 80073ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073ae:	bf00      	nop
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	20001c28 	.word	0x20001c28

080073bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ca:	4b41      	ldr	r3, [pc, #260]	; (80074d0 <xTaskResumeAll+0x114>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	603b      	str	r3, [r7, #0]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073e8:	f001 faec 	bl	80089c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073ec:	4b38      	ldr	r3, [pc, #224]	; (80074d0 <xTaskResumeAll+0x114>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	4a37      	ldr	r2, [pc, #220]	; (80074d0 <xTaskResumeAll+0x114>)
 80073f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f6:	4b36      	ldr	r3, [pc, #216]	; (80074d0 <xTaskResumeAll+0x114>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d161      	bne.n	80074c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073fe:	4b35      	ldr	r3, [pc, #212]	; (80074d4 <xTaskResumeAll+0x118>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d05d      	beq.n	80074c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007406:	e02e      	b.n	8007466 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007408:	4b33      	ldr	r3, [pc, #204]	; (80074d8 <xTaskResumeAll+0x11c>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	3318      	adds	r3, #24
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe fee2 	bl	80061de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fedd 	bl	80061de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	2201      	movs	r2, #1
 800742a:	409a      	lsls	r2, r3
 800742c:	4b2b      	ldr	r3, [pc, #172]	; (80074dc <xTaskResumeAll+0x120>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4313      	orrs	r3, r2
 8007432:	4a2a      	ldr	r2, [pc, #168]	; (80074dc <xTaskResumeAll+0x120>)
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4a27      	ldr	r2, [pc, #156]	; (80074e0 <xTaskResumeAll+0x124>)
 8007444:	441a      	add	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7fe fe69 	bl	8006124 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007456:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <xTaskResumeAll+0x128>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d302      	bcc.n	8007466 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007460:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <xTaskResumeAll+0x12c>)
 8007462:	2201      	movs	r2, #1
 8007464:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007466:	4b1c      	ldr	r3, [pc, #112]	; (80074d8 <xTaskResumeAll+0x11c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1cc      	bne.n	8007408 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007474:	f000 fbec 	bl	8007c50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007478:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <xTaskResumeAll+0x130>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d010      	beq.n	80074a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007484:	f000 f846 	bl	8007514 <xTaskIncrementTick>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800748e:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <xTaskResumeAll+0x12c>)
 8007490:	2201      	movs	r2, #1
 8007492:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3b01      	subs	r3, #1
 8007498:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f1      	bne.n	8007484 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80074a0:	4b12      	ldr	r3, [pc, #72]	; (80074ec <xTaskResumeAll+0x130>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <xTaskResumeAll+0x12c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074b2:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <xTaskResumeAll+0x134>)
 80074b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074c2:	f001 faaf 	bl	8008a24 <vPortExitCritical>

	return xAlreadyYielded;
 80074c6:	68bb      	ldr	r3, [r7, #8]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20001c28 	.word	0x20001c28
 80074d4:	20001c00 	.word	0x20001c00
 80074d8:	20001bc0 	.word	0x20001bc0
 80074dc:	20001c08 	.word	0x20001c08
 80074e0:	20001b04 	.word	0x20001b04
 80074e4:	20001b00 	.word	0x20001b00
 80074e8:	20001c14 	.word	0x20001c14
 80074ec:	20001c10 	.word	0x20001c10
 80074f0:	e000ed04 	.word	0xe000ed04

080074f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074fa:	4b05      	ldr	r3, [pc, #20]	; (8007510 <xTaskGetTickCount+0x1c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007500:	687b      	ldr	r3, [r7, #4]
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20001c04 	.word	0x20001c04

08007514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800751a:	2300      	movs	r3, #0
 800751c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800751e:	4b4e      	ldr	r3, [pc, #312]	; (8007658 <xTaskIncrementTick+0x144>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 808e 	bne.w	8007644 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007528:	4b4c      	ldr	r3, [pc, #304]	; (800765c <xTaskIncrementTick+0x148>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3301      	adds	r3, #1
 800752e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007530:	4a4a      	ldr	r2, [pc, #296]	; (800765c <xTaskIncrementTick+0x148>)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d120      	bne.n	800757e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800753c:	4b48      	ldr	r3, [pc, #288]	; (8007660 <xTaskIncrementTick+0x14c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <xTaskIncrementTick+0x48>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	603b      	str	r3, [r7, #0]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <xTaskIncrementTick+0x46>
 800755c:	4b40      	ldr	r3, [pc, #256]	; (8007660 <xTaskIncrementTick+0x14c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	4b40      	ldr	r3, [pc, #256]	; (8007664 <xTaskIncrementTick+0x150>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a3e      	ldr	r2, [pc, #248]	; (8007660 <xTaskIncrementTick+0x14c>)
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	4a3e      	ldr	r2, [pc, #248]	; (8007664 <xTaskIncrementTick+0x150>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	4b3d      	ldr	r3, [pc, #244]	; (8007668 <xTaskIncrementTick+0x154>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3301      	adds	r3, #1
 8007576:	4a3c      	ldr	r2, [pc, #240]	; (8007668 <xTaskIncrementTick+0x154>)
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	f000 fb69 	bl	8007c50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800757e:	4b3b      	ldr	r3, [pc, #236]	; (800766c <xTaskIncrementTick+0x158>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	429a      	cmp	r2, r3
 8007586:	d348      	bcc.n	800761a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007588:	4b35      	ldr	r3, [pc, #212]	; (8007660 <xTaskIncrementTick+0x14c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d104      	bne.n	800759c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007592:	4b36      	ldr	r3, [pc, #216]	; (800766c <xTaskIncrementTick+0x158>)
 8007594:	f04f 32ff 	mov.w	r2, #4294967295
 8007598:	601a      	str	r2, [r3, #0]
					break;
 800759a:	e03e      	b.n	800761a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759c:	4b30      	ldr	r3, [pc, #192]	; (8007660 <xTaskIncrementTick+0x14c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d203      	bcs.n	80075bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075b4:	4a2d      	ldr	r2, [pc, #180]	; (800766c <xTaskIncrementTick+0x158>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075ba:	e02e      	b.n	800761a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3304      	adds	r3, #4
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fe fe0c 	bl	80061de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d004      	beq.n	80075d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	3318      	adds	r3, #24
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fe03 	bl	80061de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	2201      	movs	r2, #1
 80075de:	409a      	lsls	r2, r3
 80075e0:	4b23      	ldr	r3, [pc, #140]	; (8007670 <xTaskIncrementTick+0x15c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	4a22      	ldr	r2, [pc, #136]	; (8007670 <xTaskIncrementTick+0x15c>)
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <xTaskIncrementTick+0x160>)
 80075f8:	441a      	add	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4619      	mov	r1, r3
 8007600:	4610      	mov	r0, r2
 8007602:	f7fe fd8f 	bl	8006124 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	4b1b      	ldr	r3, [pc, #108]	; (8007678 <xTaskIncrementTick+0x164>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	429a      	cmp	r2, r3
 8007612:	d3b9      	bcc.n	8007588 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007614:	2301      	movs	r3, #1
 8007616:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007618:	e7b6      	b.n	8007588 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800761a:	4b17      	ldr	r3, [pc, #92]	; (8007678 <xTaskIncrementTick+0x164>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007620:	4914      	ldr	r1, [pc, #80]	; (8007674 <xTaskIncrementTick+0x160>)
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d901      	bls.n	8007636 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007632:	2301      	movs	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <xTaskIncrementTick+0x168>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800763e:	2301      	movs	r3, #1
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	e004      	b.n	800764e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007644:	4b0e      	ldr	r3, [pc, #56]	; (8007680 <xTaskIncrementTick+0x16c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	4a0d      	ldr	r2, [pc, #52]	; (8007680 <xTaskIncrementTick+0x16c>)
 800764c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800764e:	697b      	ldr	r3, [r7, #20]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20001c28 	.word	0x20001c28
 800765c:	20001c04 	.word	0x20001c04
 8007660:	20001bb8 	.word	0x20001bb8
 8007664:	20001bbc 	.word	0x20001bbc
 8007668:	20001c18 	.word	0x20001c18
 800766c:	20001c20 	.word	0x20001c20
 8007670:	20001c08 	.word	0x20001c08
 8007674:	20001b04 	.word	0x20001b04
 8007678:	20001b00 	.word	0x20001b00
 800767c:	20001c14 	.word	0x20001c14
 8007680:	20001c10 	.word	0x20001c10

08007684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800768a:	4b27      	ldr	r3, [pc, #156]	; (8007728 <vTaskSwitchContext+0xa4>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007692:	4b26      	ldr	r3, [pc, #152]	; (800772c <vTaskSwitchContext+0xa8>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007698:	e03f      	b.n	800771a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800769a:	4b24      	ldr	r3, [pc, #144]	; (800772c <vTaskSwitchContext+0xa8>)
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a0:	4b23      	ldr	r3, [pc, #140]	; (8007730 <vTaskSwitchContext+0xac>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	fab3 f383 	clz	r3, r3
 80076ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80076ae:	7afb      	ldrb	r3, [r7, #11]
 80076b0:	f1c3 031f 	rsb	r3, r3, #31
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	491f      	ldr	r1, [pc, #124]	; (8007734 <vTaskSwitchContext+0xb0>)
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	440b      	add	r3, r1
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	607b      	str	r3, [r7, #4]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <vTaskSwitchContext+0x5a>
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4a12      	ldr	r2, [pc, #72]	; (8007734 <vTaskSwitchContext+0xb0>)
 80076ec:	4413      	add	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3308      	adds	r3, #8
 8007702:	429a      	cmp	r2, r3
 8007704:	d104      	bne.n	8007710 <vTaskSwitchContext+0x8c>
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	605a      	str	r2, [r3, #4]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	4a08      	ldr	r2, [pc, #32]	; (8007738 <vTaskSwitchContext+0xb4>)
 8007718:	6013      	str	r3, [r2, #0]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20001c28 	.word	0x20001c28
 800772c:	20001c14 	.word	0x20001c14
 8007730:	20001c08 	.word	0x20001c08
 8007734:	20001b04 	.word	0x20001b04
 8007738:	20001b00 	.word	0x20001b00

0800773c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	60fb      	str	r3, [r7, #12]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007762:	4b07      	ldr	r3, [pc, #28]	; (8007780 <vTaskPlaceOnEventList+0x44>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3318      	adds	r3, #24
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fe fcfe 	bl	800616c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007770:	2101      	movs	r1, #1
 8007772:	6838      	ldr	r0, [r7, #0]
 8007774:	f000 fc60 	bl	8008038 <prvAddCurrentTaskToDelayedList>
}
 8007778:	bf00      	nop
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	20001b00 	.word	0x20001b00

08007784 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	617b      	str	r3, [r7, #20]
}
 80077a8:	bf00      	nop
 80077aa:	e7fe      	b.n	80077aa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80077ac:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <vTaskPlaceOnUnorderedEventList+0x70>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	613b      	str	r3, [r7, #16]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80077d4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077d6:	4b08      	ldr	r3, [pc, #32]	; (80077f8 <vTaskPlaceOnUnorderedEventList+0x74>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3318      	adds	r3, #24
 80077dc:	4619      	mov	r1, r3
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7fe fca0 	bl	8006124 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077e4:	2101      	movs	r1, #1
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fc26 	bl	8008038 <prvAddCurrentTaskToDelayedList>
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20001c28 	.word	0x20001c28
 80077f8:	20001b00 	.word	0x20001b00

080077fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	617b      	str	r3, [r7, #20]
}
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <vTaskPlaceOnEventListRestricted+0x54>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3318      	adds	r3, #24
 800782a:	4619      	mov	r1, r3
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7fe fc79 	bl	8006124 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007838:	f04f 33ff 	mov.w	r3, #4294967295
 800783c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 fbf9 	bl	8008038 <prvAddCurrentTaskToDelayedList>
	}
 8007846:	bf00      	nop
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20001b00 	.word	0x20001b00

08007854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	60fb      	str	r3, [r7, #12]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	3318      	adds	r3, #24
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe fcaa 	bl	80061de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800788a:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <xTaskRemoveFromEventList+0xac>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11c      	bne.n	80078cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	3304      	adds	r3, #4
 8007896:	4618      	mov	r0, r3
 8007898:	f7fe fca1 	bl	80061de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	4b17      	ldr	r3, [pc, #92]	; (8007904 <xTaskRemoveFromEventList+0xb0>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	4a16      	ldr	r2, [pc, #88]	; (8007904 <xTaskRemoveFromEventList+0xb0>)
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4a13      	ldr	r2, [pc, #76]	; (8007908 <xTaskRemoveFromEventList+0xb4>)
 80078bc:	441a      	add	r2, r3
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	3304      	adds	r3, #4
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f7fe fc2d 	bl	8006124 <vListInsertEnd>
 80078ca:	e005      	b.n	80078d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	3318      	adds	r3, #24
 80078d0:	4619      	mov	r1, r3
 80078d2:	480e      	ldr	r0, [pc, #56]	; (800790c <xTaskRemoveFromEventList+0xb8>)
 80078d4:	f7fe fc26 	bl	8006124 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <xTaskRemoveFromEventList+0xbc>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d905      	bls.n	80078f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078e6:	2301      	movs	r3, #1
 80078e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078ea:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <xTaskRemoveFromEventList+0xc0>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e001      	b.n	80078f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078f6:	697b      	ldr	r3, [r7, #20]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20001c28 	.word	0x20001c28
 8007904:	20001c08 	.word	0x20001c08
 8007908:	20001b04 	.word	0x20001b04
 800790c:	20001bc0 	.word	0x20001bc0
 8007910:	20001b00 	.word	0x20001b00
 8007914:	20001c14 	.word	0x20001c14

08007918 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007922:	4b29      	ldr	r3, [pc, #164]	; (80079c8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	613b      	str	r3, [r7, #16]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	60fb      	str	r3, [r7, #12]
}
 8007968:	bf00      	nop
 800796a:	e7fe      	b.n	800796a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fe fc36 	bl	80061de <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	3304      	adds	r3, #4
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fc31 	bl	80061de <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	2201      	movs	r2, #1
 8007982:	409a      	lsls	r2, r3
 8007984:	4b11      	ldr	r3, [pc, #68]	; (80079cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4313      	orrs	r3, r2
 800798a:	4a10      	ldr	r2, [pc, #64]	; (80079cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4a0d      	ldr	r2, [pc, #52]	; (80079d0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800799c:	441a      	add	r2, r3
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7fe fbbd 	bl	8006124 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ae:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d902      	bls.n	80079be <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80079b8:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	601a      	str	r2, [r3, #0]
	}
}
 80079be:	bf00      	nop
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20001c28 	.word	0x20001c28
 80079cc:	20001c08 	.word	0x20001c08
 80079d0:	20001b04 	.word	0x20001b04
 80079d4:	20001b00 	.word	0x20001b00
 80079d8:	20001c14 	.word	0x20001c14

080079dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <vTaskInternalSetTimeOutState+0x24>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <vTaskInternalSetTimeOutState+0x28>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	605a      	str	r2, [r3, #4]
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	20001c18 	.word	0x20001c18
 8007a04:	20001c04 	.word	0x20001c04

08007a08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10a      	bne.n	8007a2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	613b      	str	r3, [r7, #16]
}
 8007a2a:	bf00      	nop
 8007a2c:	e7fe      	b.n	8007a2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	60fb      	str	r3, [r7, #12]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007a4a:	f000 ffbb 	bl	80089c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ac4 <xTaskCheckForTimeOut+0xbc>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d102      	bne.n	8007a6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e023      	b.n	8007ab6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <xTaskCheckForTimeOut+0xc0>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d007      	beq.n	8007a8a <xTaskCheckForTimeOut+0x82>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d302      	bcc.n	8007a8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	e015      	b.n	8007ab6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d20b      	bcs.n	8007aac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	1ad2      	subs	r2, r2, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff ff9b 	bl	80079dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	e004      	b.n	8007ab6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ab6:	f000 ffb5 	bl	8008a24 <vPortExitCritical>

	return xReturn;
 8007aba:	69fb      	ldr	r3, [r7, #28]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20001c04 	.word	0x20001c04
 8007ac8:	20001c18 	.word	0x20001c18

08007acc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ad0:	4b03      	ldr	r3, [pc, #12]	; (8007ae0 <vTaskMissedYield+0x14>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20001c14 	.word	0x20001c14

08007ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007aec:	f000 f852 	bl	8007b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007af0:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <prvIdleTask+0x28>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d9f9      	bls.n	8007aec <prvIdleTask+0x8>
			{
				taskYIELD();
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <prvIdleTask+0x2c>)
 8007afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b08:	e7f0      	b.n	8007aec <prvIdleTask+0x8>
 8007b0a:	bf00      	nop
 8007b0c:	20001b04 	.word	0x20001b04
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	e00c      	b.n	8007b3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4a12      	ldr	r2, [pc, #72]	; (8007b74 <prvInitialiseTaskLists+0x60>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe facb 	bl	80060ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3301      	adds	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b06      	cmp	r3, #6
 8007b3e:	d9ef      	bls.n	8007b20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b40:	480d      	ldr	r0, [pc, #52]	; (8007b78 <prvInitialiseTaskLists+0x64>)
 8007b42:	f7fe fac2 	bl	80060ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b46:	480d      	ldr	r0, [pc, #52]	; (8007b7c <prvInitialiseTaskLists+0x68>)
 8007b48:	f7fe fabf 	bl	80060ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b4c:	480c      	ldr	r0, [pc, #48]	; (8007b80 <prvInitialiseTaskLists+0x6c>)
 8007b4e:	f7fe fabc 	bl	80060ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b52:	480c      	ldr	r0, [pc, #48]	; (8007b84 <prvInitialiseTaskLists+0x70>)
 8007b54:	f7fe fab9 	bl	80060ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b58:	480b      	ldr	r0, [pc, #44]	; (8007b88 <prvInitialiseTaskLists+0x74>)
 8007b5a:	f7fe fab6 	bl	80060ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b5e:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <prvInitialiseTaskLists+0x78>)
 8007b60:	4a05      	ldr	r2, [pc, #20]	; (8007b78 <prvInitialiseTaskLists+0x64>)
 8007b62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b64:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <prvInitialiseTaskLists+0x7c>)
 8007b66:	4a05      	ldr	r2, [pc, #20]	; (8007b7c <prvInitialiseTaskLists+0x68>)
 8007b68:	601a      	str	r2, [r3, #0]
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20001b04 	.word	0x20001b04
 8007b78:	20001b90 	.word	0x20001b90
 8007b7c:	20001ba4 	.word	0x20001ba4
 8007b80:	20001bc0 	.word	0x20001bc0
 8007b84:	20001bd4 	.word	0x20001bd4
 8007b88:	20001bec 	.word	0x20001bec
 8007b8c:	20001bb8 	.word	0x20001bb8
 8007b90:	20001bbc 	.word	0x20001bbc

08007b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b9a:	e019      	b.n	8007bd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b9c:	f000 ff12 	bl	80089c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba0:	4b10      	ldr	r3, [pc, #64]	; (8007be4 <prvCheckTasksWaitingTermination+0x50>)
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7fe fb16 	bl	80061de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bb2:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <prvCheckTasksWaitingTermination+0x54>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	4a0b      	ldr	r2, [pc, #44]	; (8007be8 <prvCheckTasksWaitingTermination+0x54>)
 8007bba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <prvCheckTasksWaitingTermination+0x58>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	4a0a      	ldr	r2, [pc, #40]	; (8007bec <prvCheckTasksWaitingTermination+0x58>)
 8007bc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bc6:	f000 ff2d 	bl	8008a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f810 	bl	8007bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <prvCheckTasksWaitingTermination+0x58>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e1      	bne.n	8007b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20001bd4 	.word	0x20001bd4
 8007be8:	20001c00 	.word	0x20001c00
 8007bec:	20001be8 	.word	0x20001be8

08007bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d108      	bne.n	8007c14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f8ca 	bl	8008da0 <vPortFree>
				vPortFree( pxTCB );
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 f8c7 	bl	8008da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c12:	e018      	b.n	8007c46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d103      	bne.n	8007c26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f8be 	bl	8008da0 <vPortFree>
	}
 8007c24:	e00f      	b.n	8007c46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d00a      	beq.n	8007c46 <prvDeleteTCB+0x56>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60fb      	str	r3, [r7, #12]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <prvDeleteTCB+0x54>
	}
 8007c46:	bf00      	nop
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <prvResetNextTaskUnblockTime+0x38>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <prvResetNextTaskUnblockTime+0x3c>)
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295
 8007c66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c68:	e008      	b.n	8007c7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <prvResetNextTaskUnblockTime+0x38>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	4a04      	ldr	r2, [pc, #16]	; (8007c8c <prvResetNextTaskUnblockTime+0x3c>)
 8007c7a:	6013      	str	r3, [r2, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	20001bb8 	.word	0x20001bb8
 8007c8c:	20001c20 	.word	0x20001c20

08007c90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c96:	4b0b      	ldr	r3, [pc, #44]	; (8007cc4 <xTaskGetSchedulerState+0x34>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	607b      	str	r3, [r7, #4]
 8007ca2:	e008      	b.n	8007cb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca4:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <xTaskGetSchedulerState+0x38>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d102      	bne.n	8007cb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cac:	2302      	movs	r3, #2
 8007cae:	607b      	str	r3, [r7, #4]
 8007cb0:	e001      	b.n	8007cb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cb6:	687b      	ldr	r3, [r7, #4]
	}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	20001c0c 	.word	0x20001c0c
 8007cc8:	20001c28 	.word	0x20001c28

08007ccc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d05e      	beq.n	8007da0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce6:	4b31      	ldr	r3, [pc, #196]	; (8007dac <xTaskPriorityInherit+0xe0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d24e      	bcs.n	8007d8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	db06      	blt.n	8007d06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf8:	4b2c      	ldr	r3, [pc, #176]	; (8007dac <xTaskPriorityInherit+0xe0>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	f1c3 0207 	rsb	r2, r3, #7
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6959      	ldr	r1, [r3, #20]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0e:	4613      	mov	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4a26      	ldr	r2, [pc, #152]	; (8007db0 <xTaskPriorityInherit+0xe4>)
 8007d18:	4413      	add	r3, r2
 8007d1a:	4299      	cmp	r1, r3
 8007d1c:	d12f      	bne.n	8007d7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fa5b 	bl	80061de <uxListRemove>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	2201      	movs	r2, #1
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	43da      	mvns	r2, r3
 8007d3a:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <xTaskPriorityInherit+0xe8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <xTaskPriorityInherit+0xe8>)
 8007d42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d44:	4b19      	ldr	r3, [pc, #100]	; (8007dac <xTaskPriorityInherit+0xe0>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d52:	2201      	movs	r2, #1
 8007d54:	409a      	lsls	r2, r3
 8007d56:	4b17      	ldr	r3, [pc, #92]	; (8007db4 <xTaskPriorityInherit+0xe8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <xTaskPriorityInherit+0xe8>)
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4a10      	ldr	r2, [pc, #64]	; (8007db0 <xTaskPriorityInherit+0xe4>)
 8007d6e:	441a      	add	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f7fe f9d4 	bl	8006124 <vListInsertEnd>
 8007d7c:	e004      	b.n	8007d88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d7e:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <xTaskPriorityInherit+0xe0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	e008      	b.n	8007da0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d92:	4b06      	ldr	r3, [pc, #24]	; (8007dac <xTaskPriorityInherit+0xe0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d201      	bcs.n	8007da0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007da0:	68fb      	ldr	r3, [r7, #12]
	}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20001b00 	.word	0x20001b00
 8007db0:	20001b04 	.word	0x20001b04
 8007db4:	20001c08 	.word	0x20001c08

08007db8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d06e      	beq.n	8007eac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dce:	4b3a      	ldr	r3, [pc, #232]	; (8007eb8 <xTaskPriorityDisinherit+0x100>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d00a      	beq.n	8007dee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	60fb      	str	r3, [r7, #12]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60bb      	str	r3, [r7, #8]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e10:	1e5a      	subs	r2, r3, #1
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d044      	beq.n	8007eac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d140      	bne.n	8007eac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe f9d5 	bl	80061de <uxListRemove>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d115      	bne.n	8007e66 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3e:	491f      	ldr	r1, [pc, #124]	; (8007ebc <xTaskPriorityDisinherit+0x104>)
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <xTaskPriorityDisinherit+0xae>
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	2201      	movs	r2, #1
 8007e56:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5a:	43da      	mvns	r2, r3
 8007e5c:	4b18      	ldr	r3, [pc, #96]	; (8007ec0 <xTaskPriorityDisinherit+0x108>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4013      	ands	r3, r2
 8007e62:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <xTaskPriorityDisinherit+0x108>)
 8007e64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	f1c3 0207 	rsb	r2, r3, #7
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	2201      	movs	r2, #1
 8007e80:	409a      	lsls	r2, r3
 8007e82:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <xTaskPriorityDisinherit+0x108>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	4a0d      	ldr	r2, [pc, #52]	; (8007ec0 <xTaskPriorityDisinherit+0x108>)
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4a08      	ldr	r2, [pc, #32]	; (8007ebc <xTaskPriorityDisinherit+0x104>)
 8007e9a:	441a      	add	r2, r3
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	f7fe f93e 	bl	8006124 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007eac:	697b      	ldr	r3, [r7, #20]
	}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20001b00 	.word	0x20001b00
 8007ebc:	20001b04 	.word	0x20001b04
 8007ec0:	20001c08 	.word	0x20001c08

08007ec4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d077      	beq.n	8007fcc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	60fb      	str	r3, [r7, #12]
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d902      	bls.n	8007f0a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	e002      	b.n	8007f10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d058      	beq.n	8007fcc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d153      	bne.n	8007fcc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f24:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d10a      	bne.n	8007f44 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	60bb      	str	r3, [r7, #8]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	69fa      	ldr	r2, [r7, #28]
 8007f4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	db04      	blt.n	8007f62 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f1c3 0207 	rsb	r2, r3, #7
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	6959      	ldr	r1, [r3, #20]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4a19      	ldr	r2, [pc, #100]	; (8007fd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f72:	4413      	add	r3, r2
 8007f74:	4299      	cmp	r1, r3
 8007f76:	d129      	bne.n	8007fcc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe f92e 	bl	80061de <uxListRemove>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	43da      	mvns	r2, r3
 8007f94:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	4a10      	ldr	r2, [pc, #64]	; (8007fdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007f9c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	409a      	lsls	r2, r3
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	4a0b      	ldr	r2, [pc, #44]	; (8007fdc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4a06      	ldr	r2, [pc, #24]	; (8007fd8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007fbe:	441a      	add	r2, r3
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f7fe f8ac 	bl	8006124 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fcc:	bf00      	nop
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20001b00 	.word	0x20001b00
 8007fd8:	20001b04 	.word	0x20001b04
 8007fdc:	20001c08 	.word	0x20001c08

08007fe0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <uxTaskResetEventItemValue+0x2c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fee:	4b07      	ldr	r3, [pc, #28]	; (800800c <uxTaskResetEventItemValue+0x2c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <uxTaskResetEventItemValue+0x2c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f1c2 0207 	rsb	r2, r2, #7
 8007ffc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007ffe:	687b      	ldr	r3, [r7, #4]
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	20001b00 	.word	0x20001b00

08008010 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008014:	4b07      	ldr	r3, [pc, #28]	; (8008034 <pvTaskIncrementMutexHeldCount+0x24>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d004      	beq.n	8008026 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <pvTaskIncrementMutexHeldCount+0x24>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008022:	3201      	adds	r2, #1
 8008024:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <pvTaskIncrementMutexHeldCount+0x24>)
 8008028:	681b      	ldr	r3, [r3, #0]
	}
 800802a:	4618      	mov	r0, r3
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	20001b00 	.word	0x20001b00

08008038 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008042:	4b29      	ldr	r3, [pc, #164]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008048:	4b28      	ldr	r3, [pc, #160]	; (80080ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3304      	adds	r3, #4
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe f8c5 	bl	80061de <uxListRemove>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800805a:	4b24      	ldr	r3, [pc, #144]	; (80080ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	2201      	movs	r2, #1
 8008062:	fa02 f303 	lsl.w	r3, r2, r3
 8008066:	43da      	mvns	r2, r3
 8008068:	4b21      	ldr	r3, [pc, #132]	; (80080f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4013      	ands	r3, r2
 800806e:	4a20      	ldr	r2, [pc, #128]	; (80080f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008070:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008078:	d10a      	bne.n	8008090 <prvAddCurrentTaskToDelayedList+0x58>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008080:	4b1a      	ldr	r3, [pc, #104]	; (80080ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3304      	adds	r3, #4
 8008086:	4619      	mov	r1, r3
 8008088:	481a      	ldr	r0, [pc, #104]	; (80080f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800808a:	f7fe f84b 	bl	8006124 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800808e:	e026      	b.n	80080de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4413      	add	r3, r2
 8008096:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008098:	4b14      	ldr	r3, [pc, #80]	; (80080ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d209      	bcs.n	80080bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080a8:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f7fe f859 	bl	800616c <vListInsert>
}
 80080ba:	e010      	b.n	80080de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3304      	adds	r3, #4
 80080c6:	4619      	mov	r1, r3
 80080c8:	4610      	mov	r0, r2
 80080ca:	f7fe f84f 	bl	800616c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d202      	bcs.n	80080de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80080d8:	4a09      	ldr	r2, [pc, #36]	; (8008100 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	6013      	str	r3, [r2, #0]
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20001c04 	.word	0x20001c04
 80080ec:	20001b00 	.word	0x20001b00
 80080f0:	20001c08 	.word	0x20001c08
 80080f4:	20001bec 	.word	0x20001bec
 80080f8:	20001bbc 	.word	0x20001bbc
 80080fc:	20001bb8 	.word	0x20001bb8
 8008100:	20001c20 	.word	0x20001c20

08008104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08a      	sub	sp, #40	; 0x28
 8008108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800810e:	f000 faeb 	bl	80086e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008112:	4b1c      	ldr	r3, [pc, #112]	; (8008184 <xTimerCreateTimerTask+0x80>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d021      	beq.n	800815e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008122:	1d3a      	adds	r2, r7, #4
 8008124:	f107 0108 	add.w	r1, r7, #8
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	4618      	mov	r0, r3
 800812e:	f7f8 fa43 	bl	80005b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	9202      	str	r2, [sp, #8]
 800813a:	9301      	str	r3, [sp, #4]
 800813c:	2304      	movs	r3, #4
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	2300      	movs	r3, #0
 8008142:	460a      	mov	r2, r1
 8008144:	4910      	ldr	r1, [pc, #64]	; (8008188 <xTimerCreateTimerTask+0x84>)
 8008146:	4811      	ldr	r0, [pc, #68]	; (800818c <xTimerCreateTimerTask+0x88>)
 8008148:	f7fe fef0 	bl	8006f2c <xTaskCreateStatic>
 800814c:	4603      	mov	r3, r0
 800814e:	4a10      	ldr	r2, [pc, #64]	; (8008190 <xTimerCreateTimerTask+0x8c>)
 8008150:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008152:	4b0f      	ldr	r3, [pc, #60]	; (8008190 <xTimerCreateTimerTask+0x8c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800815a:	2301      	movs	r3, #1
 800815c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	613b      	str	r3, [r7, #16]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800817a:	697b      	ldr	r3, [r7, #20]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20001c5c 	.word	0x20001c5c
 8008188:	0800a3c0 	.word	0x0800a3c0
 800818c:	080082c9 	.word	0x080082c9
 8008190:	20001c60 	.word	0x20001c60

08008194 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	; 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10a      	bne.n	80081c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	623b      	str	r3, [r7, #32]
}
 80081be:	bf00      	nop
 80081c0:	e7fe      	b.n	80081c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081c2:	4b1a      	ldr	r3, [pc, #104]	; (800822c <xTimerGenericCommand+0x98>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d02a      	beq.n	8008220 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b05      	cmp	r3, #5
 80081da:	dc18      	bgt.n	800820e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081dc:	f7ff fd58 	bl	8007c90 <xTaskGetSchedulerState>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d109      	bne.n	80081fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081e6:	4b11      	ldr	r3, [pc, #68]	; (800822c <xTimerGenericCommand+0x98>)
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f107 0114 	add.w	r1, r7, #20
 80081ee:	2300      	movs	r3, #0
 80081f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f2:	f7fe f98f 	bl	8006514 <xQueueGenericSend>
 80081f6:	6278      	str	r0, [r7, #36]	; 0x24
 80081f8:	e012      	b.n	8008220 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081fa:	4b0c      	ldr	r3, [pc, #48]	; (800822c <xTimerGenericCommand+0x98>)
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	f107 0114 	add.w	r1, r7, #20
 8008202:	2300      	movs	r3, #0
 8008204:	2200      	movs	r2, #0
 8008206:	f7fe f985 	bl	8006514 <xQueueGenericSend>
 800820a:	6278      	str	r0, [r7, #36]	; 0x24
 800820c:	e008      	b.n	8008220 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800820e:	4b07      	ldr	r3, [pc, #28]	; (800822c <xTimerGenericCommand+0x98>)
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	f107 0114 	add.w	r1, r7, #20
 8008216:	2300      	movs	r3, #0
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	f7fe fa79 	bl	8006710 <xQueueGenericSendFromISR>
 800821e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008222:	4618      	mov	r0, r3
 8008224:	3728      	adds	r7, #40	; 0x28
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20001c5c 	.word	0x20001c5c

08008230 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af02      	add	r7, sp, #8
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800823a:	4b22      	ldr	r3, [pc, #136]	; (80082c4 <prvProcessExpiredTimer+0x94>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	3304      	adds	r3, #4
 8008248:	4618      	mov	r0, r3
 800824a:	f7fd ffc8 	bl	80061de <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d022      	beq.n	80082a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	18d1      	adds	r1, r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	6978      	ldr	r0, [r7, #20]
 800826a:	f000 f8d1 	bl	8008410 <prvInsertTimerInActiveList>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01f      	beq.n	80082b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008274:	2300      	movs	r3, #0
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	2300      	movs	r3, #0
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	2100      	movs	r1, #0
 800827e:	6978      	ldr	r0, [r7, #20]
 8008280:	f7ff ff88 	bl	8008194 <xTimerGenericCommand>
 8008284:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d113      	bne.n	80082b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	60fb      	str	r3, [r7, #12]
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	6978      	ldr	r0, [r7, #20]
 80082ba:	4798      	blx	r3
}
 80082bc:	bf00      	nop
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	20001c54 	.word	0x20001c54

080082c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082d0:	f107 0308 	add.w	r3, r7, #8
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 f857 	bl	8008388 <prvGetNextExpireTime>
 80082da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4619      	mov	r1, r3
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 f803 	bl	80082ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082e6:	f000 f8d5 	bl	8008494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082ea:	e7f1      	b.n	80082d0 <prvTimerTask+0x8>

080082ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082f6:	f7ff f853 	bl	80073a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f866 	bl	80083d0 <prvSampleTimeNow>
 8008304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d130      	bne.n	800836e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <prvProcessTimerOrBlockTask+0x3c>
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	429a      	cmp	r2, r3
 8008318:	d806      	bhi.n	8008328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800831a:	f7ff f84f 	bl	80073bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff ff85 	bl	8008230 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008326:	e024      	b.n	8008372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d008      	beq.n	8008340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800832e:	4b13      	ldr	r3, [pc, #76]	; (800837c <prvProcessTimerOrBlockTask+0x90>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <prvProcessTimerOrBlockTask+0x50>
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <prvProcessTimerOrBlockTask+0x52>
 800833c:	2300      	movs	r3, #0
 800833e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008340:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <prvProcessTimerOrBlockTask+0x94>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	4619      	mov	r1, r3
 800834e:	f7fe fdb9 	bl	8006ec4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008352:	f7ff f833 	bl	80073bc <xTaskResumeAll>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800835c:	4b09      	ldr	r3, [pc, #36]	; (8008384 <prvProcessTimerOrBlockTask+0x98>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
}
 800836c:	e001      	b.n	8008372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800836e:	f7ff f825 	bl	80073bc <xTaskResumeAll>
}
 8008372:	bf00      	nop
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20001c58 	.word	0x20001c58
 8008380:	20001c5c 	.word	0x20001c5c
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008390:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <prvGetNextExpireTime+0x44>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <prvGetNextExpireTime+0x16>
 800839a:	2201      	movs	r2, #1
 800839c:	e000      	b.n	80083a0 <prvGetNextExpireTime+0x18>
 800839e:	2200      	movs	r2, #0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d105      	bne.n	80083b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083ac:	4b07      	ldr	r3, [pc, #28]	; (80083cc <prvGetNextExpireTime+0x44>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e001      	b.n	80083bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083bc:	68fb      	ldr	r3, [r7, #12]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20001c54 	.word	0x20001c54

080083d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083d8:	f7ff f88c 	bl	80074f4 <xTaskGetTickCount>
 80083dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083de:	4b0b      	ldr	r3, [pc, #44]	; (800840c <prvSampleTimeNow+0x3c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d205      	bcs.n	80083f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083e8:	f000 f91a 	bl	8008620 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	e002      	b.n	80083fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083fa:	4a04      	ldr	r2, [pc, #16]	; (800840c <prvSampleTimeNow+0x3c>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008400:	68fb      	ldr	r3, [r7, #12]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20001c64 	.word	0x20001c64

08008410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800841e:	2300      	movs	r3, #0
 8008420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	429a      	cmp	r2, r3
 8008434:	d812      	bhi.n	800845c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	1ad2      	subs	r2, r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	429a      	cmp	r2, r3
 8008442:	d302      	bcc.n	800844a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008444:	2301      	movs	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e01b      	b.n	8008482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800844a:	4b10      	ldr	r3, [pc, #64]	; (800848c <prvInsertTimerInActiveList+0x7c>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3304      	adds	r3, #4
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f7fd fe89 	bl	800616c <vListInsert>
 800845a:	e012      	b.n	8008482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d206      	bcs.n	8008472 <prvInsertTimerInActiveList+0x62>
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800846c:	2301      	movs	r3, #1
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	e007      	b.n	8008482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008472:	4b07      	ldr	r3, [pc, #28]	; (8008490 <prvInsertTimerInActiveList+0x80>)
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3304      	adds	r3, #4
 800847a:	4619      	mov	r1, r3
 800847c:	4610      	mov	r0, r2
 800847e:	f7fd fe75 	bl	800616c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008482:	697b      	ldr	r3, [r7, #20]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20001c58 	.word	0x20001c58
 8008490:	20001c54 	.word	0x20001c54

08008494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08c      	sub	sp, #48	; 0x30
 8008498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800849a:	e0ae      	b.n	80085fa <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f2c0 80aa 	blt.w	80085f8 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	3304      	adds	r3, #4
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fd fe92 	bl	80061de <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ba:	1d3b      	adds	r3, r7, #4
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff ff87 	bl	80083d0 <prvSampleTimeNow>
 80084c2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b09      	cmp	r3, #9
 80084c8:	f200 8097 	bhi.w	80085fa <prvProcessReceivedCommands+0x166>
 80084cc:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <prvProcessReceivedCommands+0x40>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	080084fd 	.word	0x080084fd
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	080084fd 	.word	0x080084fd
 80084e0:	08008571 	.word	0x08008571
 80084e4:	08008585 	.word	0x08008585
 80084e8:	080085cf 	.word	0x080085cf
 80084ec:	080084fd 	.word	0x080084fd
 80084f0:	080084fd 	.word	0x080084fd
 80084f4:	08008571 	.word	0x08008571
 80084f8:	08008585 	.word	0x08008585
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	b2da      	uxtb	r2, r3
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	18d1      	adds	r1, r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a3a      	ldr	r2, [r7, #32]
 800851a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800851c:	f7ff ff78 	bl	8008410 <prvInsertTimerInActiveList>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d069      	beq.n	80085fa <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800852c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d05e      	beq.n	80085fa <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	441a      	add	r2, r3
 8008544:	2300      	movs	r3, #0
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	2300      	movs	r3, #0
 800854a:	2100      	movs	r1, #0
 800854c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800854e:	f7ff fe21 	bl	8008194 <xTimerGenericCommand>
 8008552:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d14f      	bne.n	80085fa <prvProcessReceivedCommands+0x166>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	61bb      	str	r3, [r7, #24]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008576:	f023 0301 	bic.w	r3, r3, #1
 800857a:	b2da      	uxtb	r2, r3
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008582:	e03a      	b.n	80085fa <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	b2da      	uxtb	r2, r3
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <prvProcessReceivedCommands+0x126>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	617b      	str	r3, [r7, #20]
}
 80085b6:	bf00      	nop
 80085b8:	e7fe      	b.n	80085b8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	699a      	ldr	r2, [r3, #24]
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	18d1      	adds	r1, r2, r3
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	6a3a      	ldr	r2, [r7, #32]
 80085c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085c8:	f7ff ff22 	bl	8008410 <prvInsertTimerInActiveList>
					break;
 80085cc:	e015      	b.n	80085fa <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80085dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085de:	f000 fbdf 	bl	8008da0 <vPortFree>
 80085e2:	e00a      	b.n	80085fa <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085ea:	f023 0301 	bic.w	r3, r3, #1
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085f6:	e000      	b.n	80085fa <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80085f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085fa:	4b08      	ldr	r3, [pc, #32]	; (800861c <prvProcessReceivedCommands+0x188>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f107 0108 	add.w	r1, r7, #8
 8008602:	2200      	movs	r2, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe f91f 	bl	8006848 <xQueueReceive>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	f47f af45 	bne.w	800849c <prvProcessReceivedCommands+0x8>
	}
}
 8008612:	bf00      	nop
 8008614:	bf00      	nop
 8008616:	3728      	adds	r7, #40	; 0x28
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20001c5c 	.word	0x20001c5c

08008620 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008626:	e048      	b.n	80086ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008628:	4b2d      	ldr	r3, [pc, #180]	; (80086e0 <prvSwitchTimerLists+0xc0>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008632:	4b2b      	ldr	r3, [pc, #172]	; (80086e0 <prvSwitchTimerLists+0xc0>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3304      	adds	r3, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f7fd fdcc 	bl	80061de <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d02e      	beq.n	80086ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4413      	add	r3, r2
 8008664:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	429a      	cmp	r2, r3
 800866c:	d90e      	bls.n	800868c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800867a:	4b19      	ldr	r3, [pc, #100]	; (80086e0 <prvSwitchTimerLists+0xc0>)
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3304      	adds	r3, #4
 8008682:	4619      	mov	r1, r3
 8008684:	4610      	mov	r0, r2
 8008686:	f7fd fd71 	bl	800616c <vListInsert>
 800868a:	e016      	b.n	80086ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800868c:	2300      	movs	r3, #0
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	2300      	movs	r3, #0
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	2100      	movs	r1, #0
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fd7c 	bl	8008194 <xTimerGenericCommand>
 800869c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	603b      	str	r3, [r7, #0]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <prvSwitchTimerLists+0xc0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1b1      	bne.n	8008628 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086c4:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <prvSwitchTimerLists+0xc0>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086ca:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <prvSwitchTimerLists+0xc4>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a04      	ldr	r2, [pc, #16]	; (80086e0 <prvSwitchTimerLists+0xc0>)
 80086d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086d2:	4a04      	ldr	r2, [pc, #16]	; (80086e4 <prvSwitchTimerLists+0xc4>)
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	6013      	str	r3, [r2, #0]
}
 80086d8:	bf00      	nop
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20001c54 	.word	0x20001c54
 80086e4:	20001c58 	.word	0x20001c58

080086e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086ee:	f000 f969 	bl	80089c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086f2:	4b15      	ldr	r3, [pc, #84]	; (8008748 <prvCheckForValidListAndQueue+0x60>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d120      	bne.n	800873c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086fa:	4814      	ldr	r0, [pc, #80]	; (800874c <prvCheckForValidListAndQueue+0x64>)
 80086fc:	f7fd fce5 	bl	80060ca <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008700:	4813      	ldr	r0, [pc, #76]	; (8008750 <prvCheckForValidListAndQueue+0x68>)
 8008702:	f7fd fce2 	bl	80060ca <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008706:	4b13      	ldr	r3, [pc, #76]	; (8008754 <prvCheckForValidListAndQueue+0x6c>)
 8008708:	4a10      	ldr	r2, [pc, #64]	; (800874c <prvCheckForValidListAndQueue+0x64>)
 800870a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800870c:	4b12      	ldr	r3, [pc, #72]	; (8008758 <prvCheckForValidListAndQueue+0x70>)
 800870e:	4a10      	ldr	r2, [pc, #64]	; (8008750 <prvCheckForValidListAndQueue+0x68>)
 8008710:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008712:	2300      	movs	r3, #0
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	4b11      	ldr	r3, [pc, #68]	; (800875c <prvCheckForValidListAndQueue+0x74>)
 8008718:	4a11      	ldr	r2, [pc, #68]	; (8008760 <prvCheckForValidListAndQueue+0x78>)
 800871a:	210c      	movs	r1, #12
 800871c:	200a      	movs	r0, #10
 800871e:	f7fd fdf1 	bl	8006304 <xQueueGenericCreateStatic>
 8008722:	4603      	mov	r3, r0
 8008724:	4a08      	ldr	r2, [pc, #32]	; (8008748 <prvCheckForValidListAndQueue+0x60>)
 8008726:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <prvCheckForValidListAndQueue+0x60>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008730:	4b05      	ldr	r3, [pc, #20]	; (8008748 <prvCheckForValidListAndQueue+0x60>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	490b      	ldr	r1, [pc, #44]	; (8008764 <prvCheckForValidListAndQueue+0x7c>)
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fb9a 	bl	8006e70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800873c:	f000 f972 	bl	8008a24 <vPortExitCritical>
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20001c5c 	.word	0x20001c5c
 800874c:	20001c2c 	.word	0x20001c2c
 8008750:	20001c40 	.word	0x20001c40
 8008754:	20001c54 	.word	0x20001c54
 8008758:	20001c58 	.word	0x20001c58
 800875c:	20001ce0 	.word	0x20001ce0
 8008760:	20001c68 	.word	0x20001c68
 8008764:	0800a3c8 	.word	0x0800a3c8

08008768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3b04      	subs	r3, #4
 8008778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3b04      	subs	r3, #4
 8008786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f023 0201 	bic.w	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3b04      	subs	r3, #4
 8008796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008798:	4a0c      	ldr	r2, [pc, #48]	; (80087cc <pxPortInitialiseStack+0x64>)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3b14      	subs	r3, #20
 80087a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3b04      	subs	r3, #4
 80087ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f06f 0202 	mvn.w	r2, #2
 80087b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3b20      	subs	r3, #32
 80087bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087be:	68fb      	ldr	r3, [r7, #12]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	080087d1 	.word	0x080087d1

080087d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087da:	4b12      	ldr	r3, [pc, #72]	; (8008824 <prvTaskExitError+0x54>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e2:	d00a      	beq.n	80087fa <prvTaskExitError+0x2a>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	60fb      	str	r3, [r7, #12]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <prvTaskExitError+0x28>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60bb      	str	r3, [r7, #8]
}
 800880c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800880e:	bf00      	nop
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0fc      	beq.n	8008810 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008816:	bf00      	nop
 8008818:	bf00      	nop
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	20000018 	.word	0x20000018
	...

08008830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <pxCurrentTCBConst2>)
 8008832:	6819      	ldr	r1, [r3, #0]
 8008834:	6808      	ldr	r0, [r1, #0]
 8008836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883a:	f380 8809 	msr	PSP, r0
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f380 8811 	msr	BASEPRI, r0
 800884a:	4770      	bx	lr
 800884c:	f3af 8000 	nop.w

08008850 <pxCurrentTCBConst2>:
 8008850:	20001b00 	.word	0x20001b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008858:	4808      	ldr	r0, [pc, #32]	; (800887c <prvPortStartFirstTask+0x24>)
 800885a:	6800      	ldr	r0, [r0, #0]
 800885c:	6800      	ldr	r0, [r0, #0]
 800885e:	f380 8808 	msr	MSP, r0
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8814 	msr	CONTROL, r0
 800886a:	b662      	cpsie	i
 800886c:	b661      	cpsie	f
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	df00      	svc	0
 8008878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800887a:	bf00      	nop
 800887c:	e000ed08 	.word	0xe000ed08

08008880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008886:	4b46      	ldr	r3, [pc, #280]	; (80089a0 <xPortStartScheduler+0x120>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a46      	ldr	r2, [pc, #280]	; (80089a4 <xPortStartScheduler+0x124>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d10a      	bne.n	80088a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	613b      	str	r3, [r7, #16]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088a6:	4b3e      	ldr	r3, [pc, #248]	; (80089a0 <xPortStartScheduler+0x120>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a3f      	ldr	r2, [pc, #252]	; (80089a8 <xPortStartScheduler+0x128>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10a      	bne.n	80088c6 <xPortStartScheduler+0x46>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	60fb      	str	r3, [r7, #12]
}
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <xPortStartScheduler+0x12c>)
 80088c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	22ff      	movs	r2, #255	; 0xff
 80088d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	4b31      	ldr	r3, [pc, #196]	; (80089b0 <xPortStartScheduler+0x130>)
 80088ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088ee:	4b31      	ldr	r3, [pc, #196]	; (80089b4 <xPortStartScheduler+0x134>)
 80088f0:	2207      	movs	r2, #7
 80088f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088f4:	e009      	b.n	800890a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80088f6:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <xPortStartScheduler+0x134>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a2d      	ldr	r2, [pc, #180]	; (80089b4 <xPortStartScheduler+0x134>)
 80088fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	2b80      	cmp	r3, #128	; 0x80
 8008914:	d0ef      	beq.n	80088f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008916:	4b27      	ldr	r3, [pc, #156]	; (80089b4 <xPortStartScheduler+0x134>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f1c3 0307 	rsb	r3, r3, #7
 800891e:	2b04      	cmp	r3, #4
 8008920:	d00a      	beq.n	8008938 <xPortStartScheduler+0xb8>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	60bb      	str	r3, [r7, #8]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008938:	4b1e      	ldr	r3, [pc, #120]	; (80089b4 <xPortStartScheduler+0x134>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	4a1d      	ldr	r2, [pc, #116]	; (80089b4 <xPortStartScheduler+0x134>)
 8008940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008942:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <xPortStartScheduler+0x134>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800894a:	4a1a      	ldr	r2, [pc, #104]	; (80089b4 <xPortStartScheduler+0x134>)
 800894c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	b2da      	uxtb	r2, r3
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008956:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <xPortStartScheduler+0x138>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a17      	ldr	r2, [pc, #92]	; (80089b8 <xPortStartScheduler+0x138>)
 800895c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008962:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <xPortStartScheduler+0x138>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <xPortStartScheduler+0x138>)
 8008968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800896c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800896e:	f000 f8dd 	bl	8008b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008972:	4b12      	ldr	r3, [pc, #72]	; (80089bc <xPortStartScheduler+0x13c>)
 8008974:	2200      	movs	r2, #0
 8008976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008978:	f000 f8fc 	bl	8008b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800897c:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <xPortStartScheduler+0x140>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0f      	ldr	r2, [pc, #60]	; (80089c0 <xPortStartScheduler+0x140>)
 8008982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008988:	f7ff ff66 	bl	8008858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800898c:	f7fe fe7a 	bl	8007684 <vTaskSwitchContext>
	prvTaskExitError();
 8008990:	f7ff ff1e 	bl	80087d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	e000ed00 	.word	0xe000ed00
 80089a4:	410fc271 	.word	0x410fc271
 80089a8:	410fc270 	.word	0x410fc270
 80089ac:	e000e400 	.word	0xe000e400
 80089b0:	20001d30 	.word	0x20001d30
 80089b4:	20001d34 	.word	0x20001d34
 80089b8:	e000ed20 	.word	0xe000ed20
 80089bc:	20000018 	.word	0x20000018
 80089c0:	e000ef34 	.word	0xe000ef34

080089c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	607b      	str	r3, [r7, #4]
}
 80089dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089de:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <vPortEnterCritical+0x58>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	4a0d      	ldr	r2, [pc, #52]	; (8008a1c <vPortEnterCritical+0x58>)
 80089e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089e8:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <vPortEnterCritical+0x58>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d10f      	bne.n	8008a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <vPortEnterCritical+0x5c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	603b      	str	r3, [r7, #0]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <vPortEnterCritical+0x4a>
	}
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	20000018 	.word	0x20000018
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a2a:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <vPortExitCritical+0x50>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <vPortExitCritical+0x24>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	607b      	str	r3, [r7, #4]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a48:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <vPortExitCritical+0x50>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <vPortExitCritical+0x50>)
 8008a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a52:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <vPortExitCritical+0x50>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d105      	bne.n	8008a66 <vPortExitCritical+0x42>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f383 8811 	msr	BASEPRI, r3
}
 8008a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000018 	.word	0x20000018
	...

08008a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a80:	f3ef 8009 	mrs	r0, PSP
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <pxCurrentTCBConst>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	f01e 0f10 	tst.w	lr, #16
 8008a90:	bf08      	it	eq
 8008a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9a:	6010      	str	r0, [r2, #0]
 8008a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008aa4:	f380 8811 	msr	BASEPRI, r0
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f7fe fde8 	bl	8007684 <vTaskSwitchContext>
 8008ab4:	f04f 0000 	mov.w	r0, #0
 8008ab8:	f380 8811 	msr	BASEPRI, r0
 8008abc:	bc09      	pop	{r0, r3}
 8008abe:	6819      	ldr	r1, [r3, #0]
 8008ac0:	6808      	ldr	r0, [r1, #0]
 8008ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac6:	f01e 0f10 	tst.w	lr, #16
 8008aca:	bf08      	it	eq
 8008acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ad0:	f380 8809 	msr	PSP, r0
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w

08008ae0 <pxCurrentTCBConst>:
 8008ae0:	20001b00 	.word	0x20001b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop

08008ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	607b      	str	r3, [r7, #4]
}
 8008b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b02:	f7fe fd07 	bl	8007514 <xTaskIncrementTick>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b0c:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <SysTick_Handler+0x40>)
 8008b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	2300      	movs	r3, #0
 8008b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f383 8811 	msr	BASEPRI, r3
}
 8008b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b30:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <vPortSetupTimerInterrupt+0x34>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b36:	4b0b      	ldr	r3, [pc, #44]	; (8008b64 <vPortSetupTimerInterrupt+0x38>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <vPortSetupTimerInterrupt+0x3c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0a      	ldr	r2, [pc, #40]	; (8008b6c <vPortSetupTimerInterrupt+0x40>)
 8008b42:	fba2 2303 	umull	r2, r3, r2, r3
 8008b46:	099b      	lsrs	r3, r3, #6
 8008b48:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <vPortSetupTimerInterrupt+0x44>)
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b4e:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <vPortSetupTimerInterrupt+0x34>)
 8008b50:	2207      	movs	r2, #7
 8008b52:	601a      	str	r2, [r3, #0]
}
 8008b54:	bf00      	nop
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	e000e010 	.word	0xe000e010
 8008b64:	e000e018 	.word	0xe000e018
 8008b68:	2000000c 	.word	0x2000000c
 8008b6c:	10624dd3 	.word	0x10624dd3
 8008b70:	e000e014 	.word	0xe000e014

08008b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b84 <vPortEnableVFP+0x10>
 8008b78:	6801      	ldr	r1, [r0, #0]
 8008b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b7e:	6001      	str	r1, [r0, #0]
 8008b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b82:	bf00      	nop
 8008b84:	e000ed88 	.word	0xe000ed88

08008b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b8e:	f3ef 8305 	mrs	r3, IPSR
 8008b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b0f      	cmp	r3, #15
 8008b98:	d914      	bls.n	8008bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b9a:	4a17      	ldr	r2, [pc, #92]	; (8008bf8 <vPortValidateInterruptPriority+0x70>)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ba4:	4b15      	ldr	r3, [pc, #84]	; (8008bfc <vPortValidateInterruptPriority+0x74>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	7afa      	ldrb	r2, [r7, #11]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d20a      	bcs.n	8008bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008bc4:	4b0e      	ldr	r3, [pc, #56]	; (8008c00 <vPortValidateInterruptPriority+0x78>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <vPortValidateInterruptPriority+0x7c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d90a      	bls.n	8008bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	603b      	str	r3, [r7, #0]
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <vPortValidateInterruptPriority+0x60>
	}
 8008bea:	bf00      	nop
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	e000e3f0 	.word	0xe000e3f0
 8008bfc:	20001d30 	.word	0x20001d30
 8008c00:	e000ed0c 	.word	0xe000ed0c
 8008c04:	20001d34 	.word	0x20001d34

08008c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08a      	sub	sp, #40	; 0x28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c14:	f7fe fbc4 	bl	80073a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c18:	4b5b      	ldr	r3, [pc, #364]	; (8008d88 <pvPortMalloc+0x180>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c20:	f000 f920 	bl	8008e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c24:	4b59      	ldr	r3, [pc, #356]	; (8008d8c <pvPortMalloc+0x184>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f040 8093 	bne.w	8008d58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01d      	beq.n	8008c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c38:	2208      	movs	r2, #8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d014      	beq.n	8008c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	3308      	adds	r3, #8
 8008c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <pvPortMalloc+0x6c>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	617b      	str	r3, [r7, #20]
}
 8008c70:	bf00      	nop
 8008c72:	e7fe      	b.n	8008c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d06e      	beq.n	8008d58 <pvPortMalloc+0x150>
 8008c7a:	4b45      	ldr	r3, [pc, #276]	; (8008d90 <pvPortMalloc+0x188>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d869      	bhi.n	8008d58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c84:	4b43      	ldr	r3, [pc, #268]	; (8008d94 <pvPortMalloc+0x18c>)
 8008c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c88:	4b42      	ldr	r3, [pc, #264]	; (8008d94 <pvPortMalloc+0x18c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c8e:	e004      	b.n	8008c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d903      	bls.n	8008cac <pvPortMalloc+0xa4>
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1f1      	bne.n	8008c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cac:	4b36      	ldr	r3, [pc, #216]	; (8008d88 <pvPortMalloc+0x180>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d050      	beq.n	8008d58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2208      	movs	r2, #8
 8008cbc:	4413      	add	r3, r2
 8008cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d91f      	bls.n	8008d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4413      	add	r3, r2
 8008cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <pvPortMalloc+0xf8>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	613b      	str	r3, [r7, #16]
}
 8008cfc:	bf00      	nop
 8008cfe:	e7fe      	b.n	8008cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	1ad2      	subs	r2, r2, r3
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d12:	69b8      	ldr	r0, [r7, #24]
 8008d14:	f000 f908 	bl	8008f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d18:	4b1d      	ldr	r3, [pc, #116]	; (8008d90 <pvPortMalloc+0x188>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	4a1b      	ldr	r2, [pc, #108]	; (8008d90 <pvPortMalloc+0x188>)
 8008d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d26:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <pvPortMalloc+0x188>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	4b1b      	ldr	r3, [pc, #108]	; (8008d98 <pvPortMalloc+0x190>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d203      	bcs.n	8008d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d32:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <pvPortMalloc+0x188>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a18      	ldr	r2, [pc, #96]	; (8008d98 <pvPortMalloc+0x190>)
 8008d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <pvPortMalloc+0x184>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	431a      	orrs	r2, r3
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d4e:	4b13      	ldr	r3, [pc, #76]	; (8008d9c <pvPortMalloc+0x194>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	4a11      	ldr	r2, [pc, #68]	; (8008d9c <pvPortMalloc+0x194>)
 8008d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d58:	f7fe fb30 	bl	80073bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f003 0307 	and.w	r3, r3, #7
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00a      	beq.n	8008d7c <pvPortMalloc+0x174>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	60fb      	str	r3, [r7, #12]
}
 8008d78:	bf00      	nop
 8008d7a:	e7fe      	b.n	8008d7a <pvPortMalloc+0x172>
	return pvReturn;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3728      	adds	r7, #40	; 0x28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	2000dd40 	.word	0x2000dd40
 8008d8c:	2000dd54 	.word	0x2000dd54
 8008d90:	2000dd44 	.word	0x2000dd44
 8008d94:	2000dd38 	.word	0x2000dd38
 8008d98:	2000dd48 	.word	0x2000dd48
 8008d9c:	2000dd4c 	.word	0x2000dd4c

08008da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d04d      	beq.n	8008e4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008db2:	2308      	movs	r3, #8
 8008db4:	425b      	negs	r3, r3
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4413      	add	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <vPortFree+0xb8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4013      	ands	r3, r2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <vPortFree+0x44>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	60fb      	str	r3, [r7, #12]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <vPortFree+0x62>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	60bb      	str	r3, [r7, #8]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	4b14      	ldr	r3, [pc, #80]	; (8008e58 <vPortFree+0xb8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01e      	beq.n	8008e4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d11a      	bne.n	8008e4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <vPortFree+0xb8>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	43db      	mvns	r3, r3
 8008e22:	401a      	ands	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e28:	f7fe faba 	bl	80073a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <vPortFree+0xbc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4413      	add	r3, r2
 8008e36:	4a09      	ldr	r2, [pc, #36]	; (8008e5c <vPortFree+0xbc>)
 8008e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e3a:	6938      	ldr	r0, [r7, #16]
 8008e3c:	f000 f874 	bl	8008f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <vPortFree+0xc0>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	4a06      	ldr	r2, [pc, #24]	; (8008e60 <vPortFree+0xc0>)
 8008e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e4a:	f7fe fab7 	bl	80073bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e4e:	bf00      	nop
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	2000dd54 	.word	0x2000dd54
 8008e5c:	2000dd44 	.word	0x2000dd44
 8008e60:	2000dd50 	.word	0x2000dd50

08008e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e70:	4b27      	ldr	r3, [pc, #156]	; (8008f10 <prvHeapInit+0xac>)
 8008e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00c      	beq.n	8008e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3307      	adds	r3, #7
 8008e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 0307 	bic.w	r3, r3, #7
 8008e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	4a1f      	ldr	r2, [pc, #124]	; (8008f10 <prvHeapInit+0xac>)
 8008e94:	4413      	add	r3, r2
 8008e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e9c:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <prvHeapInit+0xb0>)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <prvHeapInit+0xb0>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	4413      	add	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0307 	bic.w	r3, r3, #7
 8008ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4a15      	ldr	r2, [pc, #84]	; (8008f18 <prvHeapInit+0xb4>)
 8008ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ec6:	4b14      	ldr	r3, [pc, #80]	; (8008f18 <prvHeapInit+0xb4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ece:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <prvHeapInit+0xb4>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	1ad2      	subs	r2, r2, r3
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <prvHeapInit+0xb4>)
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	4a0a      	ldr	r2, [pc, #40]	; (8008f1c <prvHeapInit+0xb8>)
 8008ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	4a09      	ldr	r2, [pc, #36]	; (8008f20 <prvHeapInit+0xbc>)
 8008efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008efc:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <prvHeapInit+0xc0>)
 8008efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f02:	601a      	str	r2, [r3, #0]
}
 8008f04:	bf00      	nop
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	20001d38 	.word	0x20001d38
 8008f14:	2000dd38 	.word	0x2000dd38
 8008f18:	2000dd40 	.word	0x2000dd40
 8008f1c:	2000dd48 	.word	0x2000dd48
 8008f20:	2000dd44 	.word	0x2000dd44
 8008f24:	2000dd54 	.word	0x2000dd54

08008f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f30:	4b28      	ldr	r3, [pc, #160]	; (8008fd4 <prvInsertBlockIntoFreeList+0xac>)
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e002      	b.n	8008f3c <prvInsertBlockIntoFreeList+0x14>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d8f7      	bhi.n	8008f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d108      	bne.n	8008f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	441a      	add	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	441a      	add	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d118      	bne.n	8008fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d00d      	beq.n	8008fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	441a      	add	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	e008      	b.n	8008fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fa6:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e003      	b.n	8008fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d002      	beq.n	8008fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	2000dd38 	.word	0x2000dd38
 8008fd8:	2000dd40 	.word	0x2000dd40

08008fdc <atoi>:
 8008fdc:	220a      	movs	r2, #10
 8008fde:	2100      	movs	r1, #0
 8008fe0:	f000 bbf2 	b.w	80097c8 <strtol>

08008fe4 <__errno>:
 8008fe4:	4b01      	ldr	r3, [pc, #4]	; (8008fec <__errno+0x8>)
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	2000001c 	.word	0x2000001c

08008ff0 <__sflush_r>:
 8008ff0:	898a      	ldrh	r2, [r1, #12]
 8008ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	0710      	lsls	r0, r2, #28
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	d458      	bmi.n	80090b0 <__sflush_r+0xc0>
 8008ffe:	684b      	ldr	r3, [r1, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	dc05      	bgt.n	8009010 <__sflush_r+0x20>
 8009004:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	dc02      	bgt.n	8009010 <__sflush_r+0x20>
 800900a:	2000      	movs	r0, #0
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009012:	2e00      	cmp	r6, #0
 8009014:	d0f9      	beq.n	800900a <__sflush_r+0x1a>
 8009016:	2300      	movs	r3, #0
 8009018:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800901c:	682f      	ldr	r7, [r5, #0]
 800901e:	602b      	str	r3, [r5, #0]
 8009020:	d032      	beq.n	8009088 <__sflush_r+0x98>
 8009022:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	075a      	lsls	r2, r3, #29
 8009028:	d505      	bpl.n	8009036 <__sflush_r+0x46>
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	1ac0      	subs	r0, r0, r3
 800902e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009030:	b10b      	cbz	r3, 8009036 <__sflush_r+0x46>
 8009032:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009034:	1ac0      	subs	r0, r0, r3
 8009036:	2300      	movs	r3, #0
 8009038:	4602      	mov	r2, r0
 800903a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	4628      	mov	r0, r5
 8009040:	47b0      	blx	r6
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	d106      	bne.n	8009056 <__sflush_r+0x66>
 8009048:	6829      	ldr	r1, [r5, #0]
 800904a:	291d      	cmp	r1, #29
 800904c:	d82c      	bhi.n	80090a8 <__sflush_r+0xb8>
 800904e:	4a2a      	ldr	r2, [pc, #168]	; (80090f8 <__sflush_r+0x108>)
 8009050:	40ca      	lsrs	r2, r1
 8009052:	07d6      	lsls	r6, r2, #31
 8009054:	d528      	bpl.n	80090a8 <__sflush_r+0xb8>
 8009056:	2200      	movs	r2, #0
 8009058:	6062      	str	r2, [r4, #4]
 800905a:	04d9      	lsls	r1, r3, #19
 800905c:	6922      	ldr	r2, [r4, #16]
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	d504      	bpl.n	800906c <__sflush_r+0x7c>
 8009062:	1c42      	adds	r2, r0, #1
 8009064:	d101      	bne.n	800906a <__sflush_r+0x7a>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	b903      	cbnz	r3, 800906c <__sflush_r+0x7c>
 800906a:	6560      	str	r0, [r4, #84]	; 0x54
 800906c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800906e:	602f      	str	r7, [r5, #0]
 8009070:	2900      	cmp	r1, #0
 8009072:	d0ca      	beq.n	800900a <__sflush_r+0x1a>
 8009074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009078:	4299      	cmp	r1, r3
 800907a:	d002      	beq.n	8009082 <__sflush_r+0x92>
 800907c:	4628      	mov	r0, r5
 800907e:	f000 f9bf 	bl	8009400 <_free_r>
 8009082:	2000      	movs	r0, #0
 8009084:	6360      	str	r0, [r4, #52]	; 0x34
 8009086:	e7c1      	b.n	800900c <__sflush_r+0x1c>
 8009088:	6a21      	ldr	r1, [r4, #32]
 800908a:	2301      	movs	r3, #1
 800908c:	4628      	mov	r0, r5
 800908e:	47b0      	blx	r6
 8009090:	1c41      	adds	r1, r0, #1
 8009092:	d1c7      	bne.n	8009024 <__sflush_r+0x34>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d0c4      	beq.n	8009024 <__sflush_r+0x34>
 800909a:	2b1d      	cmp	r3, #29
 800909c:	d001      	beq.n	80090a2 <__sflush_r+0xb2>
 800909e:	2b16      	cmp	r3, #22
 80090a0:	d101      	bne.n	80090a6 <__sflush_r+0xb6>
 80090a2:	602f      	str	r7, [r5, #0]
 80090a4:	e7b1      	b.n	800900a <__sflush_r+0x1a>
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	e7ad      	b.n	800900c <__sflush_r+0x1c>
 80090b0:	690f      	ldr	r7, [r1, #16]
 80090b2:	2f00      	cmp	r7, #0
 80090b4:	d0a9      	beq.n	800900a <__sflush_r+0x1a>
 80090b6:	0793      	lsls	r3, r2, #30
 80090b8:	680e      	ldr	r6, [r1, #0]
 80090ba:	bf08      	it	eq
 80090bc:	694b      	ldreq	r3, [r1, #20]
 80090be:	600f      	str	r7, [r1, #0]
 80090c0:	bf18      	it	ne
 80090c2:	2300      	movne	r3, #0
 80090c4:	eba6 0807 	sub.w	r8, r6, r7
 80090c8:	608b      	str	r3, [r1, #8]
 80090ca:	f1b8 0f00 	cmp.w	r8, #0
 80090ce:	dd9c      	ble.n	800900a <__sflush_r+0x1a>
 80090d0:	6a21      	ldr	r1, [r4, #32]
 80090d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090d4:	4643      	mov	r3, r8
 80090d6:	463a      	mov	r2, r7
 80090d8:	4628      	mov	r0, r5
 80090da:	47b0      	blx	r6
 80090dc:	2800      	cmp	r0, #0
 80090de:	dc06      	bgt.n	80090ee <__sflush_r+0xfe>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ec:	e78e      	b.n	800900c <__sflush_r+0x1c>
 80090ee:	4407      	add	r7, r0
 80090f0:	eba8 0800 	sub.w	r8, r8, r0
 80090f4:	e7e9      	b.n	80090ca <__sflush_r+0xda>
 80090f6:	bf00      	nop
 80090f8:	20400001 	.word	0x20400001

080090fc <_fflush_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	4605      	mov	r5, r0
 8009102:	460c      	mov	r4, r1
 8009104:	b913      	cbnz	r3, 800910c <_fflush_r+0x10>
 8009106:	2500      	movs	r5, #0
 8009108:	4628      	mov	r0, r5
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	b118      	cbz	r0, 8009116 <_fflush_r+0x1a>
 800910e:	6983      	ldr	r3, [r0, #24]
 8009110:	b90b      	cbnz	r3, 8009116 <_fflush_r+0x1a>
 8009112:	f000 f899 	bl	8009248 <__sinit>
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <_fflush_r+0x6c>)
 8009118:	429c      	cmp	r4, r3
 800911a:	d11b      	bne.n	8009154 <_fflush_r+0x58>
 800911c:	686c      	ldr	r4, [r5, #4]
 800911e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0ef      	beq.n	8009106 <_fflush_r+0xa>
 8009126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009128:	07d0      	lsls	r0, r2, #31
 800912a:	d404      	bmi.n	8009136 <_fflush_r+0x3a>
 800912c:	0599      	lsls	r1, r3, #22
 800912e:	d402      	bmi.n	8009136 <_fflush_r+0x3a>
 8009130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009132:	f000 f94c 	bl	80093ce <__retarget_lock_acquire_recursive>
 8009136:	4628      	mov	r0, r5
 8009138:	4621      	mov	r1, r4
 800913a:	f7ff ff59 	bl	8008ff0 <__sflush_r>
 800913e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009140:	07da      	lsls	r2, r3, #31
 8009142:	4605      	mov	r5, r0
 8009144:	d4e0      	bmi.n	8009108 <_fflush_r+0xc>
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	059b      	lsls	r3, r3, #22
 800914a:	d4dd      	bmi.n	8009108 <_fflush_r+0xc>
 800914c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800914e:	f000 f93f 	bl	80093d0 <__retarget_lock_release_recursive>
 8009152:	e7d9      	b.n	8009108 <_fflush_r+0xc>
 8009154:	4b05      	ldr	r3, [pc, #20]	; (800916c <_fflush_r+0x70>)
 8009156:	429c      	cmp	r4, r3
 8009158:	d101      	bne.n	800915e <_fflush_r+0x62>
 800915a:	68ac      	ldr	r4, [r5, #8]
 800915c:	e7df      	b.n	800911e <_fflush_r+0x22>
 800915e:	4b04      	ldr	r3, [pc, #16]	; (8009170 <_fflush_r+0x74>)
 8009160:	429c      	cmp	r4, r3
 8009162:	bf08      	it	eq
 8009164:	68ec      	ldreq	r4, [r5, #12]
 8009166:	e7da      	b.n	800911e <_fflush_r+0x22>
 8009168:	0800a53c 	.word	0x0800a53c
 800916c:	0800a55c 	.word	0x0800a55c
 8009170:	0800a51c 	.word	0x0800a51c

08009174 <fflush>:
 8009174:	4601      	mov	r1, r0
 8009176:	b920      	cbnz	r0, 8009182 <fflush+0xe>
 8009178:	4b04      	ldr	r3, [pc, #16]	; (800918c <fflush+0x18>)
 800917a:	4905      	ldr	r1, [pc, #20]	; (8009190 <fflush+0x1c>)
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	f000 b8e1 	b.w	8009344 <_fwalk_reent>
 8009182:	4b04      	ldr	r3, [pc, #16]	; (8009194 <fflush+0x20>)
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	f7ff bfb9 	b.w	80090fc <_fflush_r>
 800918a:	bf00      	nop
 800918c:	0800a57c 	.word	0x0800a57c
 8009190:	080090fd 	.word	0x080090fd
 8009194:	2000001c 	.word	0x2000001c

08009198 <std>:
 8009198:	2300      	movs	r3, #0
 800919a:	b510      	push	{r4, lr}
 800919c:	4604      	mov	r4, r0
 800919e:	e9c0 3300 	strd	r3, r3, [r0]
 80091a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091a6:	6083      	str	r3, [r0, #8]
 80091a8:	8181      	strh	r1, [r0, #12]
 80091aa:	6643      	str	r3, [r0, #100]	; 0x64
 80091ac:	81c2      	strh	r2, [r0, #14]
 80091ae:	6183      	str	r3, [r0, #24]
 80091b0:	4619      	mov	r1, r3
 80091b2:	2208      	movs	r2, #8
 80091b4:	305c      	adds	r0, #92	; 0x5c
 80091b6:	f000 f91a 	bl	80093ee <memset>
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <std+0x38>)
 80091bc:	6263      	str	r3, [r4, #36]	; 0x24
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <std+0x3c>)
 80091c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <std+0x40>)
 80091c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091c6:	4b05      	ldr	r3, [pc, #20]	; (80091dc <std+0x44>)
 80091c8:	6224      	str	r4, [r4, #32]
 80091ca:	6323      	str	r3, [r4, #48]	; 0x30
 80091cc:	bd10      	pop	{r4, pc}
 80091ce:	bf00      	nop
 80091d0:	0800963d 	.word	0x0800963d
 80091d4:	0800965f 	.word	0x0800965f
 80091d8:	08009697 	.word	0x08009697
 80091dc:	080096bb 	.word	0x080096bb

080091e0 <_cleanup_r>:
 80091e0:	4901      	ldr	r1, [pc, #4]	; (80091e8 <_cleanup_r+0x8>)
 80091e2:	f000 b8af 	b.w	8009344 <_fwalk_reent>
 80091e6:	bf00      	nop
 80091e8:	080090fd 	.word	0x080090fd

080091ec <__sfmoreglue>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	2268      	movs	r2, #104	; 0x68
 80091f0:	1e4d      	subs	r5, r1, #1
 80091f2:	4355      	muls	r5, r2
 80091f4:	460e      	mov	r6, r1
 80091f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091fa:	f000 f96d 	bl	80094d8 <_malloc_r>
 80091fe:	4604      	mov	r4, r0
 8009200:	b140      	cbz	r0, 8009214 <__sfmoreglue+0x28>
 8009202:	2100      	movs	r1, #0
 8009204:	e9c0 1600 	strd	r1, r6, [r0]
 8009208:	300c      	adds	r0, #12
 800920a:	60a0      	str	r0, [r4, #8]
 800920c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009210:	f000 f8ed 	bl	80093ee <memset>
 8009214:	4620      	mov	r0, r4
 8009216:	bd70      	pop	{r4, r5, r6, pc}

08009218 <__sfp_lock_acquire>:
 8009218:	4801      	ldr	r0, [pc, #4]	; (8009220 <__sfp_lock_acquire+0x8>)
 800921a:	f000 b8d8 	b.w	80093ce <__retarget_lock_acquire_recursive>
 800921e:	bf00      	nop
 8009220:	2000dd59 	.word	0x2000dd59

08009224 <__sfp_lock_release>:
 8009224:	4801      	ldr	r0, [pc, #4]	; (800922c <__sfp_lock_release+0x8>)
 8009226:	f000 b8d3 	b.w	80093d0 <__retarget_lock_release_recursive>
 800922a:	bf00      	nop
 800922c:	2000dd59 	.word	0x2000dd59

08009230 <__sinit_lock_acquire>:
 8009230:	4801      	ldr	r0, [pc, #4]	; (8009238 <__sinit_lock_acquire+0x8>)
 8009232:	f000 b8cc 	b.w	80093ce <__retarget_lock_acquire_recursive>
 8009236:	bf00      	nop
 8009238:	2000dd5a 	.word	0x2000dd5a

0800923c <__sinit_lock_release>:
 800923c:	4801      	ldr	r0, [pc, #4]	; (8009244 <__sinit_lock_release+0x8>)
 800923e:	f000 b8c7 	b.w	80093d0 <__retarget_lock_release_recursive>
 8009242:	bf00      	nop
 8009244:	2000dd5a 	.word	0x2000dd5a

08009248 <__sinit>:
 8009248:	b510      	push	{r4, lr}
 800924a:	4604      	mov	r4, r0
 800924c:	f7ff fff0 	bl	8009230 <__sinit_lock_acquire>
 8009250:	69a3      	ldr	r3, [r4, #24]
 8009252:	b11b      	cbz	r3, 800925c <__sinit+0x14>
 8009254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009258:	f7ff bff0 	b.w	800923c <__sinit_lock_release>
 800925c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009260:	6523      	str	r3, [r4, #80]	; 0x50
 8009262:	4b13      	ldr	r3, [pc, #76]	; (80092b0 <__sinit+0x68>)
 8009264:	4a13      	ldr	r2, [pc, #76]	; (80092b4 <__sinit+0x6c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	62a2      	str	r2, [r4, #40]	; 0x28
 800926a:	42a3      	cmp	r3, r4
 800926c:	bf04      	itt	eq
 800926e:	2301      	moveq	r3, #1
 8009270:	61a3      	streq	r3, [r4, #24]
 8009272:	4620      	mov	r0, r4
 8009274:	f000 f820 	bl	80092b8 <__sfp>
 8009278:	6060      	str	r0, [r4, #4]
 800927a:	4620      	mov	r0, r4
 800927c:	f000 f81c 	bl	80092b8 <__sfp>
 8009280:	60a0      	str	r0, [r4, #8]
 8009282:	4620      	mov	r0, r4
 8009284:	f000 f818 	bl	80092b8 <__sfp>
 8009288:	2200      	movs	r2, #0
 800928a:	60e0      	str	r0, [r4, #12]
 800928c:	2104      	movs	r1, #4
 800928e:	6860      	ldr	r0, [r4, #4]
 8009290:	f7ff ff82 	bl	8009198 <std>
 8009294:	68a0      	ldr	r0, [r4, #8]
 8009296:	2201      	movs	r2, #1
 8009298:	2109      	movs	r1, #9
 800929a:	f7ff ff7d 	bl	8009198 <std>
 800929e:	68e0      	ldr	r0, [r4, #12]
 80092a0:	2202      	movs	r2, #2
 80092a2:	2112      	movs	r1, #18
 80092a4:	f7ff ff78 	bl	8009198 <std>
 80092a8:	2301      	movs	r3, #1
 80092aa:	61a3      	str	r3, [r4, #24]
 80092ac:	e7d2      	b.n	8009254 <__sinit+0xc>
 80092ae:	bf00      	nop
 80092b0:	0800a57c 	.word	0x0800a57c
 80092b4:	080091e1 	.word	0x080091e1

080092b8 <__sfp>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	4607      	mov	r7, r0
 80092bc:	f7ff ffac 	bl	8009218 <__sfp_lock_acquire>
 80092c0:	4b1e      	ldr	r3, [pc, #120]	; (800933c <__sfp+0x84>)
 80092c2:	681e      	ldr	r6, [r3, #0]
 80092c4:	69b3      	ldr	r3, [r6, #24]
 80092c6:	b913      	cbnz	r3, 80092ce <__sfp+0x16>
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7ff ffbd 	bl	8009248 <__sinit>
 80092ce:	3648      	adds	r6, #72	; 0x48
 80092d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	d503      	bpl.n	80092e0 <__sfp+0x28>
 80092d8:	6833      	ldr	r3, [r6, #0]
 80092da:	b30b      	cbz	r3, 8009320 <__sfp+0x68>
 80092dc:	6836      	ldr	r6, [r6, #0]
 80092de:	e7f7      	b.n	80092d0 <__sfp+0x18>
 80092e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092e4:	b9d5      	cbnz	r5, 800931c <__sfp+0x64>
 80092e6:	4b16      	ldr	r3, [pc, #88]	; (8009340 <__sfp+0x88>)
 80092e8:	60e3      	str	r3, [r4, #12]
 80092ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ee:	6665      	str	r5, [r4, #100]	; 0x64
 80092f0:	f000 f86c 	bl	80093cc <__retarget_lock_init_recursive>
 80092f4:	f7ff ff96 	bl	8009224 <__sfp_lock_release>
 80092f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009300:	6025      	str	r5, [r4, #0]
 8009302:	61a5      	str	r5, [r4, #24]
 8009304:	2208      	movs	r2, #8
 8009306:	4629      	mov	r1, r5
 8009308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800930c:	f000 f86f 	bl	80093ee <memset>
 8009310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009318:	4620      	mov	r0, r4
 800931a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931c:	3468      	adds	r4, #104	; 0x68
 800931e:	e7d9      	b.n	80092d4 <__sfp+0x1c>
 8009320:	2104      	movs	r1, #4
 8009322:	4638      	mov	r0, r7
 8009324:	f7ff ff62 	bl	80091ec <__sfmoreglue>
 8009328:	4604      	mov	r4, r0
 800932a:	6030      	str	r0, [r6, #0]
 800932c:	2800      	cmp	r0, #0
 800932e:	d1d5      	bne.n	80092dc <__sfp+0x24>
 8009330:	f7ff ff78 	bl	8009224 <__sfp_lock_release>
 8009334:	230c      	movs	r3, #12
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	e7ee      	b.n	8009318 <__sfp+0x60>
 800933a:	bf00      	nop
 800933c:	0800a57c 	.word	0x0800a57c
 8009340:	ffff0001 	.word	0xffff0001

08009344 <_fwalk_reent>:
 8009344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009348:	4606      	mov	r6, r0
 800934a:	4688      	mov	r8, r1
 800934c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009350:	2700      	movs	r7, #0
 8009352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009356:	f1b9 0901 	subs.w	r9, r9, #1
 800935a:	d505      	bpl.n	8009368 <_fwalk_reent+0x24>
 800935c:	6824      	ldr	r4, [r4, #0]
 800935e:	2c00      	cmp	r4, #0
 8009360:	d1f7      	bne.n	8009352 <_fwalk_reent+0xe>
 8009362:	4638      	mov	r0, r7
 8009364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009368:	89ab      	ldrh	r3, [r5, #12]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d907      	bls.n	800937e <_fwalk_reent+0x3a>
 800936e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009372:	3301      	adds	r3, #1
 8009374:	d003      	beq.n	800937e <_fwalk_reent+0x3a>
 8009376:	4629      	mov	r1, r5
 8009378:	4630      	mov	r0, r6
 800937a:	47c0      	blx	r8
 800937c:	4307      	orrs	r7, r0
 800937e:	3568      	adds	r5, #104	; 0x68
 8009380:	e7e9      	b.n	8009356 <_fwalk_reent+0x12>
	...

08009384 <__libc_init_array>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	4d0d      	ldr	r5, [pc, #52]	; (80093bc <__libc_init_array+0x38>)
 8009388:	4c0d      	ldr	r4, [pc, #52]	; (80093c0 <__libc_init_array+0x3c>)
 800938a:	1b64      	subs	r4, r4, r5
 800938c:	10a4      	asrs	r4, r4, #2
 800938e:	2600      	movs	r6, #0
 8009390:	42a6      	cmp	r6, r4
 8009392:	d109      	bne.n	80093a8 <__libc_init_array+0x24>
 8009394:	4d0b      	ldr	r5, [pc, #44]	; (80093c4 <__libc_init_array+0x40>)
 8009396:	4c0c      	ldr	r4, [pc, #48]	; (80093c8 <__libc_init_array+0x44>)
 8009398:	f000 fef0 	bl	800a17c <_init>
 800939c:	1b64      	subs	r4, r4, r5
 800939e:	10a4      	asrs	r4, r4, #2
 80093a0:	2600      	movs	r6, #0
 80093a2:	42a6      	cmp	r6, r4
 80093a4:	d105      	bne.n	80093b2 <__libc_init_array+0x2e>
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ac:	4798      	blx	r3
 80093ae:	3601      	adds	r6, #1
 80093b0:	e7ee      	b.n	8009390 <__libc_init_array+0xc>
 80093b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b6:	4798      	blx	r3
 80093b8:	3601      	adds	r6, #1
 80093ba:	e7f2      	b.n	80093a2 <__libc_init_array+0x1e>
 80093bc:	0800a5bc 	.word	0x0800a5bc
 80093c0:	0800a5bc 	.word	0x0800a5bc
 80093c4:	0800a5bc 	.word	0x0800a5bc
 80093c8:	0800a5c0 	.word	0x0800a5c0

080093cc <__retarget_lock_init_recursive>:
 80093cc:	4770      	bx	lr

080093ce <__retarget_lock_acquire_recursive>:
 80093ce:	4770      	bx	lr

080093d0 <__retarget_lock_release_recursive>:
 80093d0:	4770      	bx	lr

080093d2 <memcpy>:
 80093d2:	440a      	add	r2, r1
 80093d4:	4291      	cmp	r1, r2
 80093d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80093da:	d100      	bne.n	80093de <memcpy+0xc>
 80093dc:	4770      	bx	lr
 80093de:	b510      	push	{r4, lr}
 80093e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093e8:	4291      	cmp	r1, r2
 80093ea:	d1f9      	bne.n	80093e0 <memcpy+0xe>
 80093ec:	bd10      	pop	{r4, pc}

080093ee <memset>:
 80093ee:	4402      	add	r2, r0
 80093f0:	4603      	mov	r3, r0
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d100      	bne.n	80093f8 <memset+0xa>
 80093f6:	4770      	bx	lr
 80093f8:	f803 1b01 	strb.w	r1, [r3], #1
 80093fc:	e7f9      	b.n	80093f2 <memset+0x4>
	...

08009400 <_free_r>:
 8009400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009402:	2900      	cmp	r1, #0
 8009404:	d044      	beq.n	8009490 <_free_r+0x90>
 8009406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800940a:	9001      	str	r0, [sp, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f1a1 0404 	sub.w	r4, r1, #4
 8009412:	bfb8      	it	lt
 8009414:	18e4      	addlt	r4, r4, r3
 8009416:	f000 fa15 	bl	8009844 <__malloc_lock>
 800941a:	4a1e      	ldr	r2, [pc, #120]	; (8009494 <_free_r+0x94>)
 800941c:	9801      	ldr	r0, [sp, #4]
 800941e:	6813      	ldr	r3, [r2, #0]
 8009420:	b933      	cbnz	r3, 8009430 <_free_r+0x30>
 8009422:	6063      	str	r3, [r4, #4]
 8009424:	6014      	str	r4, [r2, #0]
 8009426:	b003      	add	sp, #12
 8009428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800942c:	f000 ba10 	b.w	8009850 <__malloc_unlock>
 8009430:	42a3      	cmp	r3, r4
 8009432:	d908      	bls.n	8009446 <_free_r+0x46>
 8009434:	6825      	ldr	r5, [r4, #0]
 8009436:	1961      	adds	r1, r4, r5
 8009438:	428b      	cmp	r3, r1
 800943a:	bf01      	itttt	eq
 800943c:	6819      	ldreq	r1, [r3, #0]
 800943e:	685b      	ldreq	r3, [r3, #4]
 8009440:	1949      	addeq	r1, r1, r5
 8009442:	6021      	streq	r1, [r4, #0]
 8009444:	e7ed      	b.n	8009422 <_free_r+0x22>
 8009446:	461a      	mov	r2, r3
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	b10b      	cbz	r3, 8009450 <_free_r+0x50>
 800944c:	42a3      	cmp	r3, r4
 800944e:	d9fa      	bls.n	8009446 <_free_r+0x46>
 8009450:	6811      	ldr	r1, [r2, #0]
 8009452:	1855      	adds	r5, r2, r1
 8009454:	42a5      	cmp	r5, r4
 8009456:	d10b      	bne.n	8009470 <_free_r+0x70>
 8009458:	6824      	ldr	r4, [r4, #0]
 800945a:	4421      	add	r1, r4
 800945c:	1854      	adds	r4, r2, r1
 800945e:	42a3      	cmp	r3, r4
 8009460:	6011      	str	r1, [r2, #0]
 8009462:	d1e0      	bne.n	8009426 <_free_r+0x26>
 8009464:	681c      	ldr	r4, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	6053      	str	r3, [r2, #4]
 800946a:	4421      	add	r1, r4
 800946c:	6011      	str	r1, [r2, #0]
 800946e:	e7da      	b.n	8009426 <_free_r+0x26>
 8009470:	d902      	bls.n	8009478 <_free_r+0x78>
 8009472:	230c      	movs	r3, #12
 8009474:	6003      	str	r3, [r0, #0]
 8009476:	e7d6      	b.n	8009426 <_free_r+0x26>
 8009478:	6825      	ldr	r5, [r4, #0]
 800947a:	1961      	adds	r1, r4, r5
 800947c:	428b      	cmp	r3, r1
 800947e:	bf04      	itt	eq
 8009480:	6819      	ldreq	r1, [r3, #0]
 8009482:	685b      	ldreq	r3, [r3, #4]
 8009484:	6063      	str	r3, [r4, #4]
 8009486:	bf04      	itt	eq
 8009488:	1949      	addeq	r1, r1, r5
 800948a:	6021      	streq	r1, [r4, #0]
 800948c:	6054      	str	r4, [r2, #4]
 800948e:	e7ca      	b.n	8009426 <_free_r+0x26>
 8009490:	b003      	add	sp, #12
 8009492:	bd30      	pop	{r4, r5, pc}
 8009494:	2000dd5c 	.word	0x2000dd5c

08009498 <sbrk_aligned>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	4e0e      	ldr	r6, [pc, #56]	; (80094d4 <sbrk_aligned+0x3c>)
 800949c:	460c      	mov	r4, r1
 800949e:	6831      	ldr	r1, [r6, #0]
 80094a0:	4605      	mov	r5, r0
 80094a2:	b911      	cbnz	r1, 80094aa <sbrk_aligned+0x12>
 80094a4:	f000 f8ba 	bl	800961c <_sbrk_r>
 80094a8:	6030      	str	r0, [r6, #0]
 80094aa:	4621      	mov	r1, r4
 80094ac:	4628      	mov	r0, r5
 80094ae:	f000 f8b5 	bl	800961c <_sbrk_r>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d00a      	beq.n	80094cc <sbrk_aligned+0x34>
 80094b6:	1cc4      	adds	r4, r0, #3
 80094b8:	f024 0403 	bic.w	r4, r4, #3
 80094bc:	42a0      	cmp	r0, r4
 80094be:	d007      	beq.n	80094d0 <sbrk_aligned+0x38>
 80094c0:	1a21      	subs	r1, r4, r0
 80094c2:	4628      	mov	r0, r5
 80094c4:	f000 f8aa 	bl	800961c <_sbrk_r>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d101      	bne.n	80094d0 <sbrk_aligned+0x38>
 80094cc:	f04f 34ff 	mov.w	r4, #4294967295
 80094d0:	4620      	mov	r0, r4
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	2000dd60 	.word	0x2000dd60

080094d8 <_malloc_r>:
 80094d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094dc:	1ccd      	adds	r5, r1, #3
 80094de:	f025 0503 	bic.w	r5, r5, #3
 80094e2:	3508      	adds	r5, #8
 80094e4:	2d0c      	cmp	r5, #12
 80094e6:	bf38      	it	cc
 80094e8:	250c      	movcc	r5, #12
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	4607      	mov	r7, r0
 80094ee:	db01      	blt.n	80094f4 <_malloc_r+0x1c>
 80094f0:	42a9      	cmp	r1, r5
 80094f2:	d905      	bls.n	8009500 <_malloc_r+0x28>
 80094f4:	230c      	movs	r3, #12
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	2600      	movs	r6, #0
 80094fa:	4630      	mov	r0, r6
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009500:	4e2e      	ldr	r6, [pc, #184]	; (80095bc <_malloc_r+0xe4>)
 8009502:	f000 f99f 	bl	8009844 <__malloc_lock>
 8009506:	6833      	ldr	r3, [r6, #0]
 8009508:	461c      	mov	r4, r3
 800950a:	bb34      	cbnz	r4, 800955a <_malloc_r+0x82>
 800950c:	4629      	mov	r1, r5
 800950e:	4638      	mov	r0, r7
 8009510:	f7ff ffc2 	bl	8009498 <sbrk_aligned>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	4604      	mov	r4, r0
 8009518:	d14d      	bne.n	80095b6 <_malloc_r+0xde>
 800951a:	6834      	ldr	r4, [r6, #0]
 800951c:	4626      	mov	r6, r4
 800951e:	2e00      	cmp	r6, #0
 8009520:	d140      	bne.n	80095a4 <_malloc_r+0xcc>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	4631      	mov	r1, r6
 8009526:	4638      	mov	r0, r7
 8009528:	eb04 0803 	add.w	r8, r4, r3
 800952c:	f000 f876 	bl	800961c <_sbrk_r>
 8009530:	4580      	cmp	r8, r0
 8009532:	d13a      	bne.n	80095aa <_malloc_r+0xd2>
 8009534:	6821      	ldr	r1, [r4, #0]
 8009536:	3503      	adds	r5, #3
 8009538:	1a6d      	subs	r5, r5, r1
 800953a:	f025 0503 	bic.w	r5, r5, #3
 800953e:	3508      	adds	r5, #8
 8009540:	2d0c      	cmp	r5, #12
 8009542:	bf38      	it	cc
 8009544:	250c      	movcc	r5, #12
 8009546:	4629      	mov	r1, r5
 8009548:	4638      	mov	r0, r7
 800954a:	f7ff ffa5 	bl	8009498 <sbrk_aligned>
 800954e:	3001      	adds	r0, #1
 8009550:	d02b      	beq.n	80095aa <_malloc_r+0xd2>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	442b      	add	r3, r5
 8009556:	6023      	str	r3, [r4, #0]
 8009558:	e00e      	b.n	8009578 <_malloc_r+0xa0>
 800955a:	6822      	ldr	r2, [r4, #0]
 800955c:	1b52      	subs	r2, r2, r5
 800955e:	d41e      	bmi.n	800959e <_malloc_r+0xc6>
 8009560:	2a0b      	cmp	r2, #11
 8009562:	d916      	bls.n	8009592 <_malloc_r+0xba>
 8009564:	1961      	adds	r1, r4, r5
 8009566:	42a3      	cmp	r3, r4
 8009568:	6025      	str	r5, [r4, #0]
 800956a:	bf18      	it	ne
 800956c:	6059      	strne	r1, [r3, #4]
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	bf08      	it	eq
 8009572:	6031      	streq	r1, [r6, #0]
 8009574:	5162      	str	r2, [r4, r5]
 8009576:	604b      	str	r3, [r1, #4]
 8009578:	4638      	mov	r0, r7
 800957a:	f104 060b 	add.w	r6, r4, #11
 800957e:	f000 f967 	bl	8009850 <__malloc_unlock>
 8009582:	f026 0607 	bic.w	r6, r6, #7
 8009586:	1d23      	adds	r3, r4, #4
 8009588:	1af2      	subs	r2, r6, r3
 800958a:	d0b6      	beq.n	80094fa <_malloc_r+0x22>
 800958c:	1b9b      	subs	r3, r3, r6
 800958e:	50a3      	str	r3, [r4, r2]
 8009590:	e7b3      	b.n	80094fa <_malloc_r+0x22>
 8009592:	6862      	ldr	r2, [r4, #4]
 8009594:	42a3      	cmp	r3, r4
 8009596:	bf0c      	ite	eq
 8009598:	6032      	streq	r2, [r6, #0]
 800959a:	605a      	strne	r2, [r3, #4]
 800959c:	e7ec      	b.n	8009578 <_malloc_r+0xa0>
 800959e:	4623      	mov	r3, r4
 80095a0:	6864      	ldr	r4, [r4, #4]
 80095a2:	e7b2      	b.n	800950a <_malloc_r+0x32>
 80095a4:	4634      	mov	r4, r6
 80095a6:	6876      	ldr	r6, [r6, #4]
 80095a8:	e7b9      	b.n	800951e <_malloc_r+0x46>
 80095aa:	230c      	movs	r3, #12
 80095ac:	603b      	str	r3, [r7, #0]
 80095ae:	4638      	mov	r0, r7
 80095b0:	f000 f94e 	bl	8009850 <__malloc_unlock>
 80095b4:	e7a1      	b.n	80094fa <_malloc_r+0x22>
 80095b6:	6025      	str	r5, [r4, #0]
 80095b8:	e7de      	b.n	8009578 <_malloc_r+0xa0>
 80095ba:	bf00      	nop
 80095bc:	2000dd5c 	.word	0x2000dd5c

080095c0 <iprintf>:
 80095c0:	b40f      	push	{r0, r1, r2, r3}
 80095c2:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <iprintf+0x2c>)
 80095c4:	b513      	push	{r0, r1, r4, lr}
 80095c6:	681c      	ldr	r4, [r3, #0]
 80095c8:	b124      	cbz	r4, 80095d4 <iprintf+0x14>
 80095ca:	69a3      	ldr	r3, [r4, #24]
 80095cc:	b913      	cbnz	r3, 80095d4 <iprintf+0x14>
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff fe3a 	bl	8009248 <__sinit>
 80095d4:	ab05      	add	r3, sp, #20
 80095d6:	9a04      	ldr	r2, [sp, #16]
 80095d8:	68a1      	ldr	r1, [r4, #8]
 80095da:	9301      	str	r3, [sp, #4]
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 f967 	bl	80098b0 <_vfiprintf_r>
 80095e2:	b002      	add	sp, #8
 80095e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e8:	b004      	add	sp, #16
 80095ea:	4770      	bx	lr
 80095ec:	2000001c 	.word	0x2000001c

080095f0 <putchar>:
 80095f0:	4b09      	ldr	r3, [pc, #36]	; (8009618 <putchar+0x28>)
 80095f2:	b513      	push	{r0, r1, r4, lr}
 80095f4:	681c      	ldr	r4, [r3, #0]
 80095f6:	4601      	mov	r1, r0
 80095f8:	b134      	cbz	r4, 8009608 <putchar+0x18>
 80095fa:	69a3      	ldr	r3, [r4, #24]
 80095fc:	b923      	cbnz	r3, 8009608 <putchar+0x18>
 80095fe:	9001      	str	r0, [sp, #4]
 8009600:	4620      	mov	r0, r4
 8009602:	f7ff fe21 	bl	8009248 <__sinit>
 8009606:	9901      	ldr	r1, [sp, #4]
 8009608:	68a2      	ldr	r2, [r4, #8]
 800960a:	4620      	mov	r0, r4
 800960c:	b002      	add	sp, #8
 800960e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009612:	f000 bc11 	b.w	8009e38 <_putc_r>
 8009616:	bf00      	nop
 8009618:	2000001c 	.word	0x2000001c

0800961c <_sbrk_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4d06      	ldr	r5, [pc, #24]	; (8009638 <_sbrk_r+0x1c>)
 8009620:	2300      	movs	r3, #0
 8009622:	4604      	mov	r4, r0
 8009624:	4608      	mov	r0, r1
 8009626:	602b      	str	r3, [r5, #0]
 8009628:	f7f7 ffbc 	bl	80015a4 <_sbrk>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_sbrk_r+0x1a>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_sbrk_r+0x1a>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	2000dd64 	.word	0x2000dd64

0800963c <__sread>:
 800963c:	b510      	push	{r4, lr}
 800963e:	460c      	mov	r4, r1
 8009640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009644:	f000 fc40 	bl	8009ec8 <_read_r>
 8009648:	2800      	cmp	r0, #0
 800964a:	bfab      	itete	ge
 800964c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800964e:	89a3      	ldrhlt	r3, [r4, #12]
 8009650:	181b      	addge	r3, r3, r0
 8009652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009656:	bfac      	ite	ge
 8009658:	6563      	strge	r3, [r4, #84]	; 0x54
 800965a:	81a3      	strhlt	r3, [r4, #12]
 800965c:	bd10      	pop	{r4, pc}

0800965e <__swrite>:
 800965e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009662:	461f      	mov	r7, r3
 8009664:	898b      	ldrh	r3, [r1, #12]
 8009666:	05db      	lsls	r3, r3, #23
 8009668:	4605      	mov	r5, r0
 800966a:	460c      	mov	r4, r1
 800966c:	4616      	mov	r6, r2
 800966e:	d505      	bpl.n	800967c <__swrite+0x1e>
 8009670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009674:	2302      	movs	r3, #2
 8009676:	2200      	movs	r2, #0
 8009678:	f000 f8d2 	bl	8009820 <_lseek_r>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009686:	81a3      	strh	r3, [r4, #12]
 8009688:	4632      	mov	r2, r6
 800968a:	463b      	mov	r3, r7
 800968c:	4628      	mov	r0, r5
 800968e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009692:	f000 b8a3 	b.w	80097dc <_write_r>

08009696 <__sseek>:
 8009696:	b510      	push	{r4, lr}
 8009698:	460c      	mov	r4, r1
 800969a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969e:	f000 f8bf 	bl	8009820 <_lseek_r>
 80096a2:	1c43      	adds	r3, r0, #1
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	bf15      	itete	ne
 80096a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80096aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096b2:	81a3      	strheq	r3, [r4, #12]
 80096b4:	bf18      	it	ne
 80096b6:	81a3      	strhne	r3, [r4, #12]
 80096b8:	bd10      	pop	{r4, pc}

080096ba <__sclose>:
 80096ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096be:	f000 b89f 	b.w	8009800 <_close_r>
	...

080096c4 <_strtol_l.constprop.0>:
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ca:	d001      	beq.n	80096d0 <_strtol_l.constprop.0+0xc>
 80096cc:	2b24      	cmp	r3, #36	; 0x24
 80096ce:	d906      	bls.n	80096de <_strtol_l.constprop.0+0x1a>
 80096d0:	f7ff fc88 	bl	8008fe4 <__errno>
 80096d4:	2316      	movs	r3, #22
 80096d6:	6003      	str	r3, [r0, #0]
 80096d8:	2000      	movs	r0, #0
 80096da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097c4 <_strtol_l.constprop.0+0x100>
 80096e2:	460d      	mov	r5, r1
 80096e4:	462e      	mov	r6, r5
 80096e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096ea:	f814 700c 	ldrb.w	r7, [r4, ip]
 80096ee:	f017 0708 	ands.w	r7, r7, #8
 80096f2:	d1f7      	bne.n	80096e4 <_strtol_l.constprop.0+0x20>
 80096f4:	2c2d      	cmp	r4, #45	; 0x2d
 80096f6:	d132      	bne.n	800975e <_strtol_l.constprop.0+0x9a>
 80096f8:	782c      	ldrb	r4, [r5, #0]
 80096fa:	2701      	movs	r7, #1
 80096fc:	1cb5      	adds	r5, r6, #2
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d05b      	beq.n	80097ba <_strtol_l.constprop.0+0xf6>
 8009702:	2b10      	cmp	r3, #16
 8009704:	d109      	bne.n	800971a <_strtol_l.constprop.0+0x56>
 8009706:	2c30      	cmp	r4, #48	; 0x30
 8009708:	d107      	bne.n	800971a <_strtol_l.constprop.0+0x56>
 800970a:	782c      	ldrb	r4, [r5, #0]
 800970c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009710:	2c58      	cmp	r4, #88	; 0x58
 8009712:	d14d      	bne.n	80097b0 <_strtol_l.constprop.0+0xec>
 8009714:	786c      	ldrb	r4, [r5, #1]
 8009716:	2310      	movs	r3, #16
 8009718:	3502      	adds	r5, #2
 800971a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800971e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009722:	f04f 0c00 	mov.w	ip, #0
 8009726:	fbb8 f9f3 	udiv	r9, r8, r3
 800972a:	4666      	mov	r6, ip
 800972c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009730:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009734:	f1be 0f09 	cmp.w	lr, #9
 8009738:	d816      	bhi.n	8009768 <_strtol_l.constprop.0+0xa4>
 800973a:	4674      	mov	r4, lr
 800973c:	42a3      	cmp	r3, r4
 800973e:	dd24      	ble.n	800978a <_strtol_l.constprop.0+0xc6>
 8009740:	f1bc 0f00 	cmp.w	ip, #0
 8009744:	db1e      	blt.n	8009784 <_strtol_l.constprop.0+0xc0>
 8009746:	45b1      	cmp	r9, r6
 8009748:	d31c      	bcc.n	8009784 <_strtol_l.constprop.0+0xc0>
 800974a:	d101      	bne.n	8009750 <_strtol_l.constprop.0+0x8c>
 800974c:	45a2      	cmp	sl, r4
 800974e:	db19      	blt.n	8009784 <_strtol_l.constprop.0+0xc0>
 8009750:	fb06 4603 	mla	r6, r6, r3, r4
 8009754:	f04f 0c01 	mov.w	ip, #1
 8009758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800975c:	e7e8      	b.n	8009730 <_strtol_l.constprop.0+0x6c>
 800975e:	2c2b      	cmp	r4, #43	; 0x2b
 8009760:	bf04      	itt	eq
 8009762:	782c      	ldrbeq	r4, [r5, #0]
 8009764:	1cb5      	addeq	r5, r6, #2
 8009766:	e7ca      	b.n	80096fe <_strtol_l.constprop.0+0x3a>
 8009768:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800976c:	f1be 0f19 	cmp.w	lr, #25
 8009770:	d801      	bhi.n	8009776 <_strtol_l.constprop.0+0xb2>
 8009772:	3c37      	subs	r4, #55	; 0x37
 8009774:	e7e2      	b.n	800973c <_strtol_l.constprop.0+0x78>
 8009776:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800977a:	f1be 0f19 	cmp.w	lr, #25
 800977e:	d804      	bhi.n	800978a <_strtol_l.constprop.0+0xc6>
 8009780:	3c57      	subs	r4, #87	; 0x57
 8009782:	e7db      	b.n	800973c <_strtol_l.constprop.0+0x78>
 8009784:	f04f 3cff 	mov.w	ip, #4294967295
 8009788:	e7e6      	b.n	8009758 <_strtol_l.constprop.0+0x94>
 800978a:	f1bc 0f00 	cmp.w	ip, #0
 800978e:	da05      	bge.n	800979c <_strtol_l.constprop.0+0xd8>
 8009790:	2322      	movs	r3, #34	; 0x22
 8009792:	6003      	str	r3, [r0, #0]
 8009794:	4646      	mov	r6, r8
 8009796:	b942      	cbnz	r2, 80097aa <_strtol_l.constprop.0+0xe6>
 8009798:	4630      	mov	r0, r6
 800979a:	e79e      	b.n	80096da <_strtol_l.constprop.0+0x16>
 800979c:	b107      	cbz	r7, 80097a0 <_strtol_l.constprop.0+0xdc>
 800979e:	4276      	negs	r6, r6
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	d0f9      	beq.n	8009798 <_strtol_l.constprop.0+0xd4>
 80097a4:	f1bc 0f00 	cmp.w	ip, #0
 80097a8:	d000      	beq.n	80097ac <_strtol_l.constprop.0+0xe8>
 80097aa:	1e69      	subs	r1, r5, #1
 80097ac:	6011      	str	r1, [r2, #0]
 80097ae:	e7f3      	b.n	8009798 <_strtol_l.constprop.0+0xd4>
 80097b0:	2430      	movs	r4, #48	; 0x30
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1b1      	bne.n	800971a <_strtol_l.constprop.0+0x56>
 80097b6:	2308      	movs	r3, #8
 80097b8:	e7af      	b.n	800971a <_strtol_l.constprop.0+0x56>
 80097ba:	2c30      	cmp	r4, #48	; 0x30
 80097bc:	d0a5      	beq.n	800970a <_strtol_l.constprop.0+0x46>
 80097be:	230a      	movs	r3, #10
 80097c0:	e7ab      	b.n	800971a <_strtol_l.constprop.0+0x56>
 80097c2:	bf00      	nop
 80097c4:	0800a419 	.word	0x0800a419

080097c8 <strtol>:
 80097c8:	4613      	mov	r3, r2
 80097ca:	460a      	mov	r2, r1
 80097cc:	4601      	mov	r1, r0
 80097ce:	4802      	ldr	r0, [pc, #8]	; (80097d8 <strtol+0x10>)
 80097d0:	6800      	ldr	r0, [r0, #0]
 80097d2:	f7ff bf77 	b.w	80096c4 <_strtol_l.constprop.0>
 80097d6:	bf00      	nop
 80097d8:	2000001c 	.word	0x2000001c

080097dc <_write_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4d07      	ldr	r5, [pc, #28]	; (80097fc <_write_r+0x20>)
 80097e0:	4604      	mov	r4, r0
 80097e2:	4608      	mov	r0, r1
 80097e4:	4611      	mov	r1, r2
 80097e6:	2200      	movs	r2, #0
 80097e8:	602a      	str	r2, [r5, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	f7f7 fe89 	bl	8001502 <_write>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d102      	bne.n	80097fa <_write_r+0x1e>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	b103      	cbz	r3, 80097fa <_write_r+0x1e>
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	2000dd64 	.word	0x2000dd64

08009800 <_close_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d06      	ldr	r5, [pc, #24]	; (800981c <_close_r+0x1c>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	f7f7 fe95 	bl	800153a <_close>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_close_r+0x1a>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_close_r+0x1a>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	2000dd64 	.word	0x2000dd64

08009820 <_lseek_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d07      	ldr	r5, [pc, #28]	; (8009840 <_lseek_r+0x20>)
 8009824:	4604      	mov	r4, r0
 8009826:	4608      	mov	r0, r1
 8009828:	4611      	mov	r1, r2
 800982a:	2200      	movs	r2, #0
 800982c:	602a      	str	r2, [r5, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	f7f7 feaa 	bl	8001588 <_lseek>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_lseek_r+0x1e>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_lseek_r+0x1e>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	2000dd64 	.word	0x2000dd64

08009844 <__malloc_lock>:
 8009844:	4801      	ldr	r0, [pc, #4]	; (800984c <__malloc_lock+0x8>)
 8009846:	f7ff bdc2 	b.w	80093ce <__retarget_lock_acquire_recursive>
 800984a:	bf00      	nop
 800984c:	2000dd58 	.word	0x2000dd58

08009850 <__malloc_unlock>:
 8009850:	4801      	ldr	r0, [pc, #4]	; (8009858 <__malloc_unlock+0x8>)
 8009852:	f7ff bdbd 	b.w	80093d0 <__retarget_lock_release_recursive>
 8009856:	bf00      	nop
 8009858:	2000dd58 	.word	0x2000dd58

0800985c <__sfputc_r>:
 800985c:	6893      	ldr	r3, [r2, #8]
 800985e:	3b01      	subs	r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	b410      	push	{r4}
 8009864:	6093      	str	r3, [r2, #8]
 8009866:	da08      	bge.n	800987a <__sfputc_r+0x1e>
 8009868:	6994      	ldr	r4, [r2, #24]
 800986a:	42a3      	cmp	r3, r4
 800986c:	db01      	blt.n	8009872 <__sfputc_r+0x16>
 800986e:	290a      	cmp	r1, #10
 8009870:	d103      	bne.n	800987a <__sfputc_r+0x1e>
 8009872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009876:	f000 bb39 	b.w	8009eec <__swbuf_r>
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	1c58      	adds	r0, r3, #1
 800987e:	6010      	str	r0, [r2, #0]
 8009880:	7019      	strb	r1, [r3, #0]
 8009882:	4608      	mov	r0, r1
 8009884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009888:	4770      	bx	lr

0800988a <__sfputs_r>:
 800988a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988c:	4606      	mov	r6, r0
 800988e:	460f      	mov	r7, r1
 8009890:	4614      	mov	r4, r2
 8009892:	18d5      	adds	r5, r2, r3
 8009894:	42ac      	cmp	r4, r5
 8009896:	d101      	bne.n	800989c <__sfputs_r+0x12>
 8009898:	2000      	movs	r0, #0
 800989a:	e007      	b.n	80098ac <__sfputs_r+0x22>
 800989c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a0:	463a      	mov	r2, r7
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7ff ffda 	bl	800985c <__sfputc_r>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d1f3      	bne.n	8009894 <__sfputs_r+0xa>
 80098ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098b0 <_vfiprintf_r>:
 80098b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b4:	460d      	mov	r5, r1
 80098b6:	b09d      	sub	sp, #116	; 0x74
 80098b8:	4614      	mov	r4, r2
 80098ba:	4698      	mov	r8, r3
 80098bc:	4606      	mov	r6, r0
 80098be:	b118      	cbz	r0, 80098c8 <_vfiprintf_r+0x18>
 80098c0:	6983      	ldr	r3, [r0, #24]
 80098c2:	b90b      	cbnz	r3, 80098c8 <_vfiprintf_r+0x18>
 80098c4:	f7ff fcc0 	bl	8009248 <__sinit>
 80098c8:	4b89      	ldr	r3, [pc, #548]	; (8009af0 <_vfiprintf_r+0x240>)
 80098ca:	429d      	cmp	r5, r3
 80098cc:	d11b      	bne.n	8009906 <_vfiprintf_r+0x56>
 80098ce:	6875      	ldr	r5, [r6, #4]
 80098d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d2:	07d9      	lsls	r1, r3, #31
 80098d4:	d405      	bmi.n	80098e2 <_vfiprintf_r+0x32>
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	059a      	lsls	r2, r3, #22
 80098da:	d402      	bmi.n	80098e2 <_vfiprintf_r+0x32>
 80098dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098de:	f7ff fd76 	bl	80093ce <__retarget_lock_acquire_recursive>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	071b      	lsls	r3, r3, #28
 80098e6:	d501      	bpl.n	80098ec <_vfiprintf_r+0x3c>
 80098e8:	692b      	ldr	r3, [r5, #16]
 80098ea:	b9eb      	cbnz	r3, 8009928 <_vfiprintf_r+0x78>
 80098ec:	4629      	mov	r1, r5
 80098ee:	4630      	mov	r0, r6
 80098f0:	f000 fb4e 	bl	8009f90 <__swsetup_r>
 80098f4:	b1c0      	cbz	r0, 8009928 <_vfiprintf_r+0x78>
 80098f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098f8:	07dc      	lsls	r4, r3, #31
 80098fa:	d50e      	bpl.n	800991a <_vfiprintf_r+0x6a>
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009900:	b01d      	add	sp, #116	; 0x74
 8009902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009906:	4b7b      	ldr	r3, [pc, #492]	; (8009af4 <_vfiprintf_r+0x244>)
 8009908:	429d      	cmp	r5, r3
 800990a:	d101      	bne.n	8009910 <_vfiprintf_r+0x60>
 800990c:	68b5      	ldr	r5, [r6, #8]
 800990e:	e7df      	b.n	80098d0 <_vfiprintf_r+0x20>
 8009910:	4b79      	ldr	r3, [pc, #484]	; (8009af8 <_vfiprintf_r+0x248>)
 8009912:	429d      	cmp	r5, r3
 8009914:	bf08      	it	eq
 8009916:	68f5      	ldreq	r5, [r6, #12]
 8009918:	e7da      	b.n	80098d0 <_vfiprintf_r+0x20>
 800991a:	89ab      	ldrh	r3, [r5, #12]
 800991c:	0598      	lsls	r0, r3, #22
 800991e:	d4ed      	bmi.n	80098fc <_vfiprintf_r+0x4c>
 8009920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009922:	f7ff fd55 	bl	80093d0 <__retarget_lock_release_recursive>
 8009926:	e7e9      	b.n	80098fc <_vfiprintf_r+0x4c>
 8009928:	2300      	movs	r3, #0
 800992a:	9309      	str	r3, [sp, #36]	; 0x24
 800992c:	2320      	movs	r3, #32
 800992e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009932:	f8cd 800c 	str.w	r8, [sp, #12]
 8009936:	2330      	movs	r3, #48	; 0x30
 8009938:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009afc <_vfiprintf_r+0x24c>
 800993c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009940:	f04f 0901 	mov.w	r9, #1
 8009944:	4623      	mov	r3, r4
 8009946:	469a      	mov	sl, r3
 8009948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800994c:	b10a      	cbz	r2, 8009952 <_vfiprintf_r+0xa2>
 800994e:	2a25      	cmp	r2, #37	; 0x25
 8009950:	d1f9      	bne.n	8009946 <_vfiprintf_r+0x96>
 8009952:	ebba 0b04 	subs.w	fp, sl, r4
 8009956:	d00b      	beq.n	8009970 <_vfiprintf_r+0xc0>
 8009958:	465b      	mov	r3, fp
 800995a:	4622      	mov	r2, r4
 800995c:	4629      	mov	r1, r5
 800995e:	4630      	mov	r0, r6
 8009960:	f7ff ff93 	bl	800988a <__sfputs_r>
 8009964:	3001      	adds	r0, #1
 8009966:	f000 80aa 	beq.w	8009abe <_vfiprintf_r+0x20e>
 800996a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996c:	445a      	add	r2, fp
 800996e:	9209      	str	r2, [sp, #36]	; 0x24
 8009970:	f89a 3000 	ldrb.w	r3, [sl]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 80a2 	beq.w	8009abe <_vfiprintf_r+0x20e>
 800997a:	2300      	movs	r3, #0
 800997c:	f04f 32ff 	mov.w	r2, #4294967295
 8009980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009984:	f10a 0a01 	add.w	sl, sl, #1
 8009988:	9304      	str	r3, [sp, #16]
 800998a:	9307      	str	r3, [sp, #28]
 800998c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009990:	931a      	str	r3, [sp, #104]	; 0x68
 8009992:	4654      	mov	r4, sl
 8009994:	2205      	movs	r2, #5
 8009996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999a:	4858      	ldr	r0, [pc, #352]	; (8009afc <_vfiprintf_r+0x24c>)
 800999c:	f7f6 fc20 	bl	80001e0 <memchr>
 80099a0:	9a04      	ldr	r2, [sp, #16]
 80099a2:	b9d8      	cbnz	r0, 80099dc <_vfiprintf_r+0x12c>
 80099a4:	06d1      	lsls	r1, r2, #27
 80099a6:	bf44      	itt	mi
 80099a8:	2320      	movmi	r3, #32
 80099aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ae:	0713      	lsls	r3, r2, #28
 80099b0:	bf44      	itt	mi
 80099b2:	232b      	movmi	r3, #43	; 0x2b
 80099b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b8:	f89a 3000 	ldrb.w	r3, [sl]
 80099bc:	2b2a      	cmp	r3, #42	; 0x2a
 80099be:	d015      	beq.n	80099ec <_vfiprintf_r+0x13c>
 80099c0:	9a07      	ldr	r2, [sp, #28]
 80099c2:	4654      	mov	r4, sl
 80099c4:	2000      	movs	r0, #0
 80099c6:	f04f 0c0a 	mov.w	ip, #10
 80099ca:	4621      	mov	r1, r4
 80099cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099d0:	3b30      	subs	r3, #48	; 0x30
 80099d2:	2b09      	cmp	r3, #9
 80099d4:	d94e      	bls.n	8009a74 <_vfiprintf_r+0x1c4>
 80099d6:	b1b0      	cbz	r0, 8009a06 <_vfiprintf_r+0x156>
 80099d8:	9207      	str	r2, [sp, #28]
 80099da:	e014      	b.n	8009a06 <_vfiprintf_r+0x156>
 80099dc:	eba0 0308 	sub.w	r3, r0, r8
 80099e0:	fa09 f303 	lsl.w	r3, r9, r3
 80099e4:	4313      	orrs	r3, r2
 80099e6:	9304      	str	r3, [sp, #16]
 80099e8:	46a2      	mov	sl, r4
 80099ea:	e7d2      	b.n	8009992 <_vfiprintf_r+0xe2>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	1d19      	adds	r1, r3, #4
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	9103      	str	r1, [sp, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bfbb      	ittet	lt
 80099f8:	425b      	neglt	r3, r3
 80099fa:	f042 0202 	orrlt.w	r2, r2, #2
 80099fe:	9307      	strge	r3, [sp, #28]
 8009a00:	9307      	strlt	r3, [sp, #28]
 8009a02:	bfb8      	it	lt
 8009a04:	9204      	strlt	r2, [sp, #16]
 8009a06:	7823      	ldrb	r3, [r4, #0]
 8009a08:	2b2e      	cmp	r3, #46	; 0x2e
 8009a0a:	d10c      	bne.n	8009a26 <_vfiprintf_r+0x176>
 8009a0c:	7863      	ldrb	r3, [r4, #1]
 8009a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a10:	d135      	bne.n	8009a7e <_vfiprintf_r+0x1ce>
 8009a12:	9b03      	ldr	r3, [sp, #12]
 8009a14:	1d1a      	adds	r2, r3, #4
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	9203      	str	r2, [sp, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	bfb8      	it	lt
 8009a1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a22:	3402      	adds	r4, #2
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b0c <_vfiprintf_r+0x25c>
 8009a2a:	7821      	ldrb	r1, [r4, #0]
 8009a2c:	2203      	movs	r2, #3
 8009a2e:	4650      	mov	r0, sl
 8009a30:	f7f6 fbd6 	bl	80001e0 <memchr>
 8009a34:	b140      	cbz	r0, 8009a48 <_vfiprintf_r+0x198>
 8009a36:	2340      	movs	r3, #64	; 0x40
 8009a38:	eba0 000a 	sub.w	r0, r0, sl
 8009a3c:	fa03 f000 	lsl.w	r0, r3, r0
 8009a40:	9b04      	ldr	r3, [sp, #16]
 8009a42:	4303      	orrs	r3, r0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4c:	482c      	ldr	r0, [pc, #176]	; (8009b00 <_vfiprintf_r+0x250>)
 8009a4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a52:	2206      	movs	r2, #6
 8009a54:	f7f6 fbc4 	bl	80001e0 <memchr>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d03f      	beq.n	8009adc <_vfiprintf_r+0x22c>
 8009a5c:	4b29      	ldr	r3, [pc, #164]	; (8009b04 <_vfiprintf_r+0x254>)
 8009a5e:	bb1b      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x1f8>
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	3307      	adds	r3, #7
 8009a64:	f023 0307 	bic.w	r3, r3, #7
 8009a68:	3308      	adds	r3, #8
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6e:	443b      	add	r3, r7
 8009a70:	9309      	str	r3, [sp, #36]	; 0x24
 8009a72:	e767      	b.n	8009944 <_vfiprintf_r+0x94>
 8009a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a78:	460c      	mov	r4, r1
 8009a7a:	2001      	movs	r0, #1
 8009a7c:	e7a5      	b.n	80099ca <_vfiprintf_r+0x11a>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	3401      	adds	r4, #1
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	4619      	mov	r1, r3
 8009a86:	f04f 0c0a 	mov.w	ip, #10
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a90:	3a30      	subs	r2, #48	; 0x30
 8009a92:	2a09      	cmp	r2, #9
 8009a94:	d903      	bls.n	8009a9e <_vfiprintf_r+0x1ee>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0c5      	beq.n	8009a26 <_vfiprintf_r+0x176>
 8009a9a:	9105      	str	r1, [sp, #20]
 8009a9c:	e7c3      	b.n	8009a26 <_vfiprintf_r+0x176>
 8009a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e7f0      	b.n	8009a8a <_vfiprintf_r+0x1da>
 8009aa8:	ab03      	add	r3, sp, #12
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	462a      	mov	r2, r5
 8009aae:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <_vfiprintf_r+0x258>)
 8009ab0:	a904      	add	r1, sp, #16
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f3af 8000 	nop.w
 8009ab8:	4607      	mov	r7, r0
 8009aba:	1c78      	adds	r0, r7, #1
 8009abc:	d1d6      	bne.n	8009a6c <_vfiprintf_r+0x1bc>
 8009abe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ac0:	07d9      	lsls	r1, r3, #31
 8009ac2:	d405      	bmi.n	8009ad0 <_vfiprintf_r+0x220>
 8009ac4:	89ab      	ldrh	r3, [r5, #12]
 8009ac6:	059a      	lsls	r2, r3, #22
 8009ac8:	d402      	bmi.n	8009ad0 <_vfiprintf_r+0x220>
 8009aca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009acc:	f7ff fc80 	bl	80093d0 <__retarget_lock_release_recursive>
 8009ad0:	89ab      	ldrh	r3, [r5, #12]
 8009ad2:	065b      	lsls	r3, r3, #25
 8009ad4:	f53f af12 	bmi.w	80098fc <_vfiprintf_r+0x4c>
 8009ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ada:	e711      	b.n	8009900 <_vfiprintf_r+0x50>
 8009adc:	ab03      	add	r3, sp, #12
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	462a      	mov	r2, r5
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <_vfiprintf_r+0x258>)
 8009ae4:	a904      	add	r1, sp, #16
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 f880 	bl	8009bec <_printf_i>
 8009aec:	e7e4      	b.n	8009ab8 <_vfiprintf_r+0x208>
 8009aee:	bf00      	nop
 8009af0:	0800a53c 	.word	0x0800a53c
 8009af4:	0800a55c 	.word	0x0800a55c
 8009af8:	0800a51c 	.word	0x0800a51c
 8009afc:	0800a580 	.word	0x0800a580
 8009b00:	0800a58a 	.word	0x0800a58a
 8009b04:	00000000 	.word	0x00000000
 8009b08:	0800988b 	.word	0x0800988b
 8009b0c:	0800a586 	.word	0x0800a586

08009b10 <_printf_common>:
 8009b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	4616      	mov	r6, r2
 8009b16:	4699      	mov	r9, r3
 8009b18:	688a      	ldr	r2, [r1, #8]
 8009b1a:	690b      	ldr	r3, [r1, #16]
 8009b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b20:	4293      	cmp	r3, r2
 8009b22:	bfb8      	it	lt
 8009b24:	4613      	movlt	r3, r2
 8009b26:	6033      	str	r3, [r6, #0]
 8009b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	b10a      	cbz	r2, 8009b36 <_printf_common+0x26>
 8009b32:	3301      	adds	r3, #1
 8009b34:	6033      	str	r3, [r6, #0]
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	0699      	lsls	r1, r3, #26
 8009b3a:	bf42      	ittt	mi
 8009b3c:	6833      	ldrmi	r3, [r6, #0]
 8009b3e:	3302      	addmi	r3, #2
 8009b40:	6033      	strmi	r3, [r6, #0]
 8009b42:	6825      	ldr	r5, [r4, #0]
 8009b44:	f015 0506 	ands.w	r5, r5, #6
 8009b48:	d106      	bne.n	8009b58 <_printf_common+0x48>
 8009b4a:	f104 0a19 	add.w	sl, r4, #25
 8009b4e:	68e3      	ldr	r3, [r4, #12]
 8009b50:	6832      	ldr	r2, [r6, #0]
 8009b52:	1a9b      	subs	r3, r3, r2
 8009b54:	42ab      	cmp	r3, r5
 8009b56:	dc26      	bgt.n	8009ba6 <_printf_common+0x96>
 8009b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b5c:	1e13      	subs	r3, r2, #0
 8009b5e:	6822      	ldr	r2, [r4, #0]
 8009b60:	bf18      	it	ne
 8009b62:	2301      	movne	r3, #1
 8009b64:	0692      	lsls	r2, r2, #26
 8009b66:	d42b      	bmi.n	8009bc0 <_printf_common+0xb0>
 8009b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4638      	mov	r0, r7
 8009b70:	47c0      	blx	r8
 8009b72:	3001      	adds	r0, #1
 8009b74:	d01e      	beq.n	8009bb4 <_printf_common+0xa4>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	68e5      	ldr	r5, [r4, #12]
 8009b7a:	6832      	ldr	r2, [r6, #0]
 8009b7c:	f003 0306 	and.w	r3, r3, #6
 8009b80:	2b04      	cmp	r3, #4
 8009b82:	bf08      	it	eq
 8009b84:	1aad      	subeq	r5, r5, r2
 8009b86:	68a3      	ldr	r3, [r4, #8]
 8009b88:	6922      	ldr	r2, [r4, #16]
 8009b8a:	bf0c      	ite	eq
 8009b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b90:	2500      	movne	r5, #0
 8009b92:	4293      	cmp	r3, r2
 8009b94:	bfc4      	itt	gt
 8009b96:	1a9b      	subgt	r3, r3, r2
 8009b98:	18ed      	addgt	r5, r5, r3
 8009b9a:	2600      	movs	r6, #0
 8009b9c:	341a      	adds	r4, #26
 8009b9e:	42b5      	cmp	r5, r6
 8009ba0:	d11a      	bne.n	8009bd8 <_printf_common+0xc8>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e008      	b.n	8009bb8 <_printf_common+0xa8>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4652      	mov	r2, sl
 8009baa:	4649      	mov	r1, r9
 8009bac:	4638      	mov	r0, r7
 8009bae:	47c0      	blx	r8
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d103      	bne.n	8009bbc <_printf_common+0xac>
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	e7c6      	b.n	8009b4e <_printf_common+0x3e>
 8009bc0:	18e1      	adds	r1, r4, r3
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	2030      	movs	r0, #48	; 0x30
 8009bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bca:	4422      	add	r2, r4
 8009bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bd4:	3302      	adds	r3, #2
 8009bd6:	e7c7      	b.n	8009b68 <_printf_common+0x58>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	4622      	mov	r2, r4
 8009bdc:	4649      	mov	r1, r9
 8009bde:	4638      	mov	r0, r7
 8009be0:	47c0      	blx	r8
 8009be2:	3001      	adds	r0, #1
 8009be4:	d0e6      	beq.n	8009bb4 <_printf_common+0xa4>
 8009be6:	3601      	adds	r6, #1
 8009be8:	e7d9      	b.n	8009b9e <_printf_common+0x8e>
	...

08009bec <_printf_i>:
 8009bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	7e0f      	ldrb	r7, [r1, #24]
 8009bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bf4:	2f78      	cmp	r7, #120	; 0x78
 8009bf6:	4691      	mov	r9, r2
 8009bf8:	4680      	mov	r8, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	469a      	mov	sl, r3
 8009bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c02:	d807      	bhi.n	8009c14 <_printf_i+0x28>
 8009c04:	2f62      	cmp	r7, #98	; 0x62
 8009c06:	d80a      	bhi.n	8009c1e <_printf_i+0x32>
 8009c08:	2f00      	cmp	r7, #0
 8009c0a:	f000 80d8 	beq.w	8009dbe <_printf_i+0x1d2>
 8009c0e:	2f58      	cmp	r7, #88	; 0x58
 8009c10:	f000 80a3 	beq.w	8009d5a <_printf_i+0x16e>
 8009c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c1c:	e03a      	b.n	8009c94 <_printf_i+0xa8>
 8009c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c22:	2b15      	cmp	r3, #21
 8009c24:	d8f6      	bhi.n	8009c14 <_printf_i+0x28>
 8009c26:	a101      	add	r1, pc, #4	; (adr r1, 8009c2c <_printf_i+0x40>)
 8009c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c2c:	08009c85 	.word	0x08009c85
 8009c30:	08009c99 	.word	0x08009c99
 8009c34:	08009c15 	.word	0x08009c15
 8009c38:	08009c15 	.word	0x08009c15
 8009c3c:	08009c15 	.word	0x08009c15
 8009c40:	08009c15 	.word	0x08009c15
 8009c44:	08009c99 	.word	0x08009c99
 8009c48:	08009c15 	.word	0x08009c15
 8009c4c:	08009c15 	.word	0x08009c15
 8009c50:	08009c15 	.word	0x08009c15
 8009c54:	08009c15 	.word	0x08009c15
 8009c58:	08009da5 	.word	0x08009da5
 8009c5c:	08009cc9 	.word	0x08009cc9
 8009c60:	08009d87 	.word	0x08009d87
 8009c64:	08009c15 	.word	0x08009c15
 8009c68:	08009c15 	.word	0x08009c15
 8009c6c:	08009dc7 	.word	0x08009dc7
 8009c70:	08009c15 	.word	0x08009c15
 8009c74:	08009cc9 	.word	0x08009cc9
 8009c78:	08009c15 	.word	0x08009c15
 8009c7c:	08009c15 	.word	0x08009c15
 8009c80:	08009d8f 	.word	0x08009d8f
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	1d1a      	adds	r2, r3, #4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	602a      	str	r2, [r5, #0]
 8009c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c94:	2301      	movs	r3, #1
 8009c96:	e0a3      	b.n	8009de0 <_printf_i+0x1f4>
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	6829      	ldr	r1, [r5, #0]
 8009c9c:	0606      	lsls	r6, r0, #24
 8009c9e:	f101 0304 	add.w	r3, r1, #4
 8009ca2:	d50a      	bpl.n	8009cba <_printf_i+0xce>
 8009ca4:	680e      	ldr	r6, [r1, #0]
 8009ca6:	602b      	str	r3, [r5, #0]
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	da03      	bge.n	8009cb4 <_printf_i+0xc8>
 8009cac:	232d      	movs	r3, #45	; 0x2d
 8009cae:	4276      	negs	r6, r6
 8009cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cb4:	485e      	ldr	r0, [pc, #376]	; (8009e30 <_printf_i+0x244>)
 8009cb6:	230a      	movs	r3, #10
 8009cb8:	e019      	b.n	8009cee <_printf_i+0x102>
 8009cba:	680e      	ldr	r6, [r1, #0]
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cc2:	bf18      	it	ne
 8009cc4:	b236      	sxthne	r6, r6
 8009cc6:	e7ef      	b.n	8009ca8 <_printf_i+0xbc>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	6820      	ldr	r0, [r4, #0]
 8009ccc:	1d19      	adds	r1, r3, #4
 8009cce:	6029      	str	r1, [r5, #0]
 8009cd0:	0601      	lsls	r1, r0, #24
 8009cd2:	d501      	bpl.n	8009cd8 <_printf_i+0xec>
 8009cd4:	681e      	ldr	r6, [r3, #0]
 8009cd6:	e002      	b.n	8009cde <_printf_i+0xf2>
 8009cd8:	0646      	lsls	r6, r0, #25
 8009cda:	d5fb      	bpl.n	8009cd4 <_printf_i+0xe8>
 8009cdc:	881e      	ldrh	r6, [r3, #0]
 8009cde:	4854      	ldr	r0, [pc, #336]	; (8009e30 <_printf_i+0x244>)
 8009ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ce2:	bf0c      	ite	eq
 8009ce4:	2308      	moveq	r3, #8
 8009ce6:	230a      	movne	r3, #10
 8009ce8:	2100      	movs	r1, #0
 8009cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cee:	6865      	ldr	r5, [r4, #4]
 8009cf0:	60a5      	str	r5, [r4, #8]
 8009cf2:	2d00      	cmp	r5, #0
 8009cf4:	bfa2      	ittt	ge
 8009cf6:	6821      	ldrge	r1, [r4, #0]
 8009cf8:	f021 0104 	bicge.w	r1, r1, #4
 8009cfc:	6021      	strge	r1, [r4, #0]
 8009cfe:	b90e      	cbnz	r6, 8009d04 <_printf_i+0x118>
 8009d00:	2d00      	cmp	r5, #0
 8009d02:	d04d      	beq.n	8009da0 <_printf_i+0x1b4>
 8009d04:	4615      	mov	r5, r2
 8009d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d0e:	5dc7      	ldrb	r7, [r0, r7]
 8009d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d14:	4637      	mov	r7, r6
 8009d16:	42bb      	cmp	r3, r7
 8009d18:	460e      	mov	r6, r1
 8009d1a:	d9f4      	bls.n	8009d06 <_printf_i+0x11a>
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d10b      	bne.n	8009d38 <_printf_i+0x14c>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	07de      	lsls	r6, r3, #31
 8009d24:	d508      	bpl.n	8009d38 <_printf_i+0x14c>
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	6861      	ldr	r1, [r4, #4]
 8009d2a:	4299      	cmp	r1, r3
 8009d2c:	bfde      	ittt	le
 8009d2e:	2330      	movle	r3, #48	; 0x30
 8009d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d38:	1b52      	subs	r2, r2, r5
 8009d3a:	6122      	str	r2, [r4, #16]
 8009d3c:	f8cd a000 	str.w	sl, [sp]
 8009d40:	464b      	mov	r3, r9
 8009d42:	aa03      	add	r2, sp, #12
 8009d44:	4621      	mov	r1, r4
 8009d46:	4640      	mov	r0, r8
 8009d48:	f7ff fee2 	bl	8009b10 <_printf_common>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d14c      	bne.n	8009dea <_printf_i+0x1fe>
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	b004      	add	sp, #16
 8009d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5a:	4835      	ldr	r0, [pc, #212]	; (8009e30 <_printf_i+0x244>)
 8009d5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d60:	6829      	ldr	r1, [r5, #0]
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d68:	6029      	str	r1, [r5, #0]
 8009d6a:	061d      	lsls	r5, r3, #24
 8009d6c:	d514      	bpl.n	8009d98 <_printf_i+0x1ac>
 8009d6e:	07df      	lsls	r7, r3, #31
 8009d70:	bf44      	itt	mi
 8009d72:	f043 0320 	orrmi.w	r3, r3, #32
 8009d76:	6023      	strmi	r3, [r4, #0]
 8009d78:	b91e      	cbnz	r6, 8009d82 <_printf_i+0x196>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	f023 0320 	bic.w	r3, r3, #32
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	2310      	movs	r3, #16
 8009d84:	e7b0      	b.n	8009ce8 <_printf_i+0xfc>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	f043 0320 	orr.w	r3, r3, #32
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	2378      	movs	r3, #120	; 0x78
 8009d90:	4828      	ldr	r0, [pc, #160]	; (8009e34 <_printf_i+0x248>)
 8009d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d96:	e7e3      	b.n	8009d60 <_printf_i+0x174>
 8009d98:	0659      	lsls	r1, r3, #25
 8009d9a:	bf48      	it	mi
 8009d9c:	b2b6      	uxthmi	r6, r6
 8009d9e:	e7e6      	b.n	8009d6e <_printf_i+0x182>
 8009da0:	4615      	mov	r5, r2
 8009da2:	e7bb      	b.n	8009d1c <_printf_i+0x130>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	6826      	ldr	r6, [r4, #0]
 8009da8:	6961      	ldr	r1, [r4, #20]
 8009daa:	1d18      	adds	r0, r3, #4
 8009dac:	6028      	str	r0, [r5, #0]
 8009dae:	0635      	lsls	r5, r6, #24
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	d501      	bpl.n	8009db8 <_printf_i+0x1cc>
 8009db4:	6019      	str	r1, [r3, #0]
 8009db6:	e002      	b.n	8009dbe <_printf_i+0x1d2>
 8009db8:	0670      	lsls	r0, r6, #25
 8009dba:	d5fb      	bpl.n	8009db4 <_printf_i+0x1c8>
 8009dbc:	8019      	strh	r1, [r3, #0]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6123      	str	r3, [r4, #16]
 8009dc2:	4615      	mov	r5, r2
 8009dc4:	e7ba      	b.n	8009d3c <_printf_i+0x150>
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	1d1a      	adds	r2, r3, #4
 8009dca:	602a      	str	r2, [r5, #0]
 8009dcc:	681d      	ldr	r5, [r3, #0]
 8009dce:	6862      	ldr	r2, [r4, #4]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f7f6 fa04 	bl	80001e0 <memchr>
 8009dd8:	b108      	cbz	r0, 8009dde <_printf_i+0x1f2>
 8009dda:	1b40      	subs	r0, r0, r5
 8009ddc:	6060      	str	r0, [r4, #4]
 8009dde:	6863      	ldr	r3, [r4, #4]
 8009de0:	6123      	str	r3, [r4, #16]
 8009de2:	2300      	movs	r3, #0
 8009de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009de8:	e7a8      	b.n	8009d3c <_printf_i+0x150>
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	462a      	mov	r2, r5
 8009dee:	4649      	mov	r1, r9
 8009df0:	4640      	mov	r0, r8
 8009df2:	47d0      	blx	sl
 8009df4:	3001      	adds	r0, #1
 8009df6:	d0ab      	beq.n	8009d50 <_printf_i+0x164>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	079b      	lsls	r3, r3, #30
 8009dfc:	d413      	bmi.n	8009e26 <_printf_i+0x23a>
 8009dfe:	68e0      	ldr	r0, [r4, #12]
 8009e00:	9b03      	ldr	r3, [sp, #12]
 8009e02:	4298      	cmp	r0, r3
 8009e04:	bfb8      	it	lt
 8009e06:	4618      	movlt	r0, r3
 8009e08:	e7a4      	b.n	8009d54 <_printf_i+0x168>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4632      	mov	r2, r6
 8009e0e:	4649      	mov	r1, r9
 8009e10:	4640      	mov	r0, r8
 8009e12:	47d0      	blx	sl
 8009e14:	3001      	adds	r0, #1
 8009e16:	d09b      	beq.n	8009d50 <_printf_i+0x164>
 8009e18:	3501      	adds	r5, #1
 8009e1a:	68e3      	ldr	r3, [r4, #12]
 8009e1c:	9903      	ldr	r1, [sp, #12]
 8009e1e:	1a5b      	subs	r3, r3, r1
 8009e20:	42ab      	cmp	r3, r5
 8009e22:	dcf2      	bgt.n	8009e0a <_printf_i+0x21e>
 8009e24:	e7eb      	b.n	8009dfe <_printf_i+0x212>
 8009e26:	2500      	movs	r5, #0
 8009e28:	f104 0619 	add.w	r6, r4, #25
 8009e2c:	e7f5      	b.n	8009e1a <_printf_i+0x22e>
 8009e2e:	bf00      	nop
 8009e30:	0800a591 	.word	0x0800a591
 8009e34:	0800a5a2 	.word	0x0800a5a2

08009e38 <_putc_r>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	4614      	mov	r4, r2
 8009e3e:	4606      	mov	r6, r0
 8009e40:	b118      	cbz	r0, 8009e4a <_putc_r+0x12>
 8009e42:	6983      	ldr	r3, [r0, #24]
 8009e44:	b90b      	cbnz	r3, 8009e4a <_putc_r+0x12>
 8009e46:	f7ff f9ff 	bl	8009248 <__sinit>
 8009e4a:	4b1c      	ldr	r3, [pc, #112]	; (8009ebc <_putc_r+0x84>)
 8009e4c:	429c      	cmp	r4, r3
 8009e4e:	d124      	bne.n	8009e9a <_putc_r+0x62>
 8009e50:	6874      	ldr	r4, [r6, #4]
 8009e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e54:	07d8      	lsls	r0, r3, #31
 8009e56:	d405      	bmi.n	8009e64 <_putc_r+0x2c>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	0599      	lsls	r1, r3, #22
 8009e5c:	d402      	bmi.n	8009e64 <_putc_r+0x2c>
 8009e5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e60:	f7ff fab5 	bl	80093ce <__retarget_lock_acquire_recursive>
 8009e64:	68a3      	ldr	r3, [r4, #8]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	60a3      	str	r3, [r4, #8]
 8009e6c:	da05      	bge.n	8009e7a <_putc_r+0x42>
 8009e6e:	69a2      	ldr	r2, [r4, #24]
 8009e70:	4293      	cmp	r3, r2
 8009e72:	db1c      	blt.n	8009eae <_putc_r+0x76>
 8009e74:	b2eb      	uxtb	r3, r5
 8009e76:	2b0a      	cmp	r3, #10
 8009e78:	d019      	beq.n	8009eae <_putc_r+0x76>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	6022      	str	r2, [r4, #0]
 8009e80:	701d      	strb	r5, [r3, #0]
 8009e82:	b2ed      	uxtb	r5, r5
 8009e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e86:	07da      	lsls	r2, r3, #31
 8009e88:	d405      	bmi.n	8009e96 <_putc_r+0x5e>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	059b      	lsls	r3, r3, #22
 8009e8e:	d402      	bmi.n	8009e96 <_putc_r+0x5e>
 8009e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e92:	f7ff fa9d 	bl	80093d0 <__retarget_lock_release_recursive>
 8009e96:	4628      	mov	r0, r5
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
 8009e9a:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <_putc_r+0x88>)
 8009e9c:	429c      	cmp	r4, r3
 8009e9e:	d101      	bne.n	8009ea4 <_putc_r+0x6c>
 8009ea0:	68b4      	ldr	r4, [r6, #8]
 8009ea2:	e7d6      	b.n	8009e52 <_putc_r+0x1a>
 8009ea4:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <_putc_r+0x8c>)
 8009ea6:	429c      	cmp	r4, r3
 8009ea8:	bf08      	it	eq
 8009eaa:	68f4      	ldreq	r4, [r6, #12]
 8009eac:	e7d1      	b.n	8009e52 <_putc_r+0x1a>
 8009eae:	4629      	mov	r1, r5
 8009eb0:	4622      	mov	r2, r4
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f000 f81a 	bl	8009eec <__swbuf_r>
 8009eb8:	4605      	mov	r5, r0
 8009eba:	e7e3      	b.n	8009e84 <_putc_r+0x4c>
 8009ebc:	0800a53c 	.word	0x0800a53c
 8009ec0:	0800a55c 	.word	0x0800a55c
 8009ec4:	0800a51c 	.word	0x0800a51c

08009ec8 <_read_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4d07      	ldr	r5, [pc, #28]	; (8009ee8 <_read_r+0x20>)
 8009ecc:	4604      	mov	r4, r0
 8009ece:	4608      	mov	r0, r1
 8009ed0:	4611      	mov	r1, r2
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	602a      	str	r2, [r5, #0]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	f7f7 faf6 	bl	80014c8 <_read>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d102      	bne.n	8009ee6 <_read_r+0x1e>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	b103      	cbz	r3, 8009ee6 <_read_r+0x1e>
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	2000dd64 	.word	0x2000dd64

08009eec <__swbuf_r>:
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	460e      	mov	r6, r1
 8009ef0:	4614      	mov	r4, r2
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	b118      	cbz	r0, 8009efe <__swbuf_r+0x12>
 8009ef6:	6983      	ldr	r3, [r0, #24]
 8009ef8:	b90b      	cbnz	r3, 8009efe <__swbuf_r+0x12>
 8009efa:	f7ff f9a5 	bl	8009248 <__sinit>
 8009efe:	4b21      	ldr	r3, [pc, #132]	; (8009f84 <__swbuf_r+0x98>)
 8009f00:	429c      	cmp	r4, r3
 8009f02:	d12b      	bne.n	8009f5c <__swbuf_r+0x70>
 8009f04:	686c      	ldr	r4, [r5, #4]
 8009f06:	69a3      	ldr	r3, [r4, #24]
 8009f08:	60a3      	str	r3, [r4, #8]
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	071a      	lsls	r2, r3, #28
 8009f0e:	d52f      	bpl.n	8009f70 <__swbuf_r+0x84>
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	b36b      	cbz	r3, 8009f70 <__swbuf_r+0x84>
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	6820      	ldr	r0, [r4, #0]
 8009f18:	1ac0      	subs	r0, r0, r3
 8009f1a:	6963      	ldr	r3, [r4, #20]
 8009f1c:	b2f6      	uxtb	r6, r6
 8009f1e:	4283      	cmp	r3, r0
 8009f20:	4637      	mov	r7, r6
 8009f22:	dc04      	bgt.n	8009f2e <__swbuf_r+0x42>
 8009f24:	4621      	mov	r1, r4
 8009f26:	4628      	mov	r0, r5
 8009f28:	f7ff f8e8 	bl	80090fc <_fflush_r>
 8009f2c:	bb30      	cbnz	r0, 8009f7c <__swbuf_r+0x90>
 8009f2e:	68a3      	ldr	r3, [r4, #8]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	6022      	str	r2, [r4, #0]
 8009f3a:	701e      	strb	r6, [r3, #0]
 8009f3c:	6963      	ldr	r3, [r4, #20]
 8009f3e:	3001      	adds	r0, #1
 8009f40:	4283      	cmp	r3, r0
 8009f42:	d004      	beq.n	8009f4e <__swbuf_r+0x62>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	07db      	lsls	r3, r3, #31
 8009f48:	d506      	bpl.n	8009f58 <__swbuf_r+0x6c>
 8009f4a:	2e0a      	cmp	r6, #10
 8009f4c:	d104      	bne.n	8009f58 <__swbuf_r+0x6c>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4628      	mov	r0, r5
 8009f52:	f7ff f8d3 	bl	80090fc <_fflush_r>
 8009f56:	b988      	cbnz	r0, 8009f7c <__swbuf_r+0x90>
 8009f58:	4638      	mov	r0, r7
 8009f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <__swbuf_r+0x9c>)
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	d101      	bne.n	8009f66 <__swbuf_r+0x7a>
 8009f62:	68ac      	ldr	r4, [r5, #8]
 8009f64:	e7cf      	b.n	8009f06 <__swbuf_r+0x1a>
 8009f66:	4b09      	ldr	r3, [pc, #36]	; (8009f8c <__swbuf_r+0xa0>)
 8009f68:	429c      	cmp	r4, r3
 8009f6a:	bf08      	it	eq
 8009f6c:	68ec      	ldreq	r4, [r5, #12]
 8009f6e:	e7ca      	b.n	8009f06 <__swbuf_r+0x1a>
 8009f70:	4621      	mov	r1, r4
 8009f72:	4628      	mov	r0, r5
 8009f74:	f000 f80c 	bl	8009f90 <__swsetup_r>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d0cb      	beq.n	8009f14 <__swbuf_r+0x28>
 8009f7c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f80:	e7ea      	b.n	8009f58 <__swbuf_r+0x6c>
 8009f82:	bf00      	nop
 8009f84:	0800a53c 	.word	0x0800a53c
 8009f88:	0800a55c 	.word	0x0800a55c
 8009f8c:	0800a51c 	.word	0x0800a51c

08009f90 <__swsetup_r>:
 8009f90:	4b32      	ldr	r3, [pc, #200]	; (800a05c <__swsetup_r+0xcc>)
 8009f92:	b570      	push	{r4, r5, r6, lr}
 8009f94:	681d      	ldr	r5, [r3, #0]
 8009f96:	4606      	mov	r6, r0
 8009f98:	460c      	mov	r4, r1
 8009f9a:	b125      	cbz	r5, 8009fa6 <__swsetup_r+0x16>
 8009f9c:	69ab      	ldr	r3, [r5, #24]
 8009f9e:	b913      	cbnz	r3, 8009fa6 <__swsetup_r+0x16>
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f7ff f951 	bl	8009248 <__sinit>
 8009fa6:	4b2e      	ldr	r3, [pc, #184]	; (800a060 <__swsetup_r+0xd0>)
 8009fa8:	429c      	cmp	r4, r3
 8009faa:	d10f      	bne.n	8009fcc <__swsetup_r+0x3c>
 8009fac:	686c      	ldr	r4, [r5, #4]
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fb4:	0719      	lsls	r1, r3, #28
 8009fb6:	d42c      	bmi.n	800a012 <__swsetup_r+0x82>
 8009fb8:	06dd      	lsls	r5, r3, #27
 8009fba:	d411      	bmi.n	8009fe0 <__swsetup_r+0x50>
 8009fbc:	2309      	movs	r3, #9
 8009fbe:	6033      	str	r3, [r6, #0]
 8009fc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fca:	e03e      	b.n	800a04a <__swsetup_r+0xba>
 8009fcc:	4b25      	ldr	r3, [pc, #148]	; (800a064 <__swsetup_r+0xd4>)
 8009fce:	429c      	cmp	r4, r3
 8009fd0:	d101      	bne.n	8009fd6 <__swsetup_r+0x46>
 8009fd2:	68ac      	ldr	r4, [r5, #8]
 8009fd4:	e7eb      	b.n	8009fae <__swsetup_r+0x1e>
 8009fd6:	4b24      	ldr	r3, [pc, #144]	; (800a068 <__swsetup_r+0xd8>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	bf08      	it	eq
 8009fdc:	68ec      	ldreq	r4, [r5, #12]
 8009fde:	e7e6      	b.n	8009fae <__swsetup_r+0x1e>
 8009fe0:	0758      	lsls	r0, r3, #29
 8009fe2:	d512      	bpl.n	800a00a <__swsetup_r+0x7a>
 8009fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fe6:	b141      	cbz	r1, 8009ffa <__swsetup_r+0x6a>
 8009fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fec:	4299      	cmp	r1, r3
 8009fee:	d002      	beq.n	8009ff6 <__swsetup_r+0x66>
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7ff fa05 	bl	8009400 <_free_r>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8009ffa:	89a3      	ldrh	r3, [r4, #12]
 8009ffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	2300      	movs	r3, #0
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f043 0308 	orr.w	r3, r3, #8
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	b94b      	cbnz	r3, 800a02a <__swsetup_r+0x9a>
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a020:	d003      	beq.n	800a02a <__swsetup_r+0x9a>
 800a022:	4621      	mov	r1, r4
 800a024:	4630      	mov	r0, r6
 800a026:	f000 f847 	bl	800a0b8 <__smakebuf_r>
 800a02a:	89a0      	ldrh	r0, [r4, #12]
 800a02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a030:	f010 0301 	ands.w	r3, r0, #1
 800a034:	d00a      	beq.n	800a04c <__swsetup_r+0xbc>
 800a036:	2300      	movs	r3, #0
 800a038:	60a3      	str	r3, [r4, #8]
 800a03a:	6963      	ldr	r3, [r4, #20]
 800a03c:	425b      	negs	r3, r3
 800a03e:	61a3      	str	r3, [r4, #24]
 800a040:	6923      	ldr	r3, [r4, #16]
 800a042:	b943      	cbnz	r3, 800a056 <__swsetup_r+0xc6>
 800a044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a048:	d1ba      	bne.n	8009fc0 <__swsetup_r+0x30>
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	0781      	lsls	r1, r0, #30
 800a04e:	bf58      	it	pl
 800a050:	6963      	ldrpl	r3, [r4, #20]
 800a052:	60a3      	str	r3, [r4, #8]
 800a054:	e7f4      	b.n	800a040 <__swsetup_r+0xb0>
 800a056:	2000      	movs	r0, #0
 800a058:	e7f7      	b.n	800a04a <__swsetup_r+0xba>
 800a05a:	bf00      	nop
 800a05c:	2000001c 	.word	0x2000001c
 800a060:	0800a53c 	.word	0x0800a53c
 800a064:	0800a55c 	.word	0x0800a55c
 800a068:	0800a51c 	.word	0x0800a51c

0800a06c <__swhatbuf_r>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	460e      	mov	r6, r1
 800a070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a074:	2900      	cmp	r1, #0
 800a076:	b096      	sub	sp, #88	; 0x58
 800a078:	4614      	mov	r4, r2
 800a07a:	461d      	mov	r5, r3
 800a07c:	da08      	bge.n	800a090 <__swhatbuf_r+0x24>
 800a07e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	602a      	str	r2, [r5, #0]
 800a086:	061a      	lsls	r2, r3, #24
 800a088:	d410      	bmi.n	800a0ac <__swhatbuf_r+0x40>
 800a08a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a08e:	e00e      	b.n	800a0ae <__swhatbuf_r+0x42>
 800a090:	466a      	mov	r2, sp
 800a092:	f000 f851 	bl	800a138 <_fstat_r>
 800a096:	2800      	cmp	r0, #0
 800a098:	dbf1      	blt.n	800a07e <__swhatbuf_r+0x12>
 800a09a:	9a01      	ldr	r2, [sp, #4]
 800a09c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0a4:	425a      	negs	r2, r3
 800a0a6:	415a      	adcs	r2, r3
 800a0a8:	602a      	str	r2, [r5, #0]
 800a0aa:	e7ee      	b.n	800a08a <__swhatbuf_r+0x1e>
 800a0ac:	2340      	movs	r3, #64	; 0x40
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	b016      	add	sp, #88	; 0x58
 800a0b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0b8 <__smakebuf_r>:
 800a0b8:	898b      	ldrh	r3, [r1, #12]
 800a0ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0bc:	079d      	lsls	r5, r3, #30
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	d507      	bpl.n	800a0d4 <__smakebuf_r+0x1c>
 800a0c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	6123      	str	r3, [r4, #16]
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	6163      	str	r3, [r4, #20]
 800a0d0:	b002      	add	sp, #8
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	ab01      	add	r3, sp, #4
 800a0d6:	466a      	mov	r2, sp
 800a0d8:	f7ff ffc8 	bl	800a06c <__swhatbuf_r>
 800a0dc:	9900      	ldr	r1, [sp, #0]
 800a0de:	4605      	mov	r5, r0
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff f9f9 	bl	80094d8 <_malloc_r>
 800a0e6:	b948      	cbnz	r0, 800a0fc <__smakebuf_r+0x44>
 800a0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d4ef      	bmi.n	800a0d0 <__smakebuf_r+0x18>
 800a0f0:	f023 0303 	bic.w	r3, r3, #3
 800a0f4:	f043 0302 	orr.w	r3, r3, #2
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	e7e3      	b.n	800a0c4 <__smakebuf_r+0xc>
 800a0fc:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <__smakebuf_r+0x7c>)
 800a0fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	6020      	str	r0, [r4, #0]
 800a104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a108:	81a3      	strh	r3, [r4, #12]
 800a10a:	9b00      	ldr	r3, [sp, #0]
 800a10c:	6163      	str	r3, [r4, #20]
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	6120      	str	r0, [r4, #16]
 800a112:	b15b      	cbz	r3, 800a12c <__smakebuf_r+0x74>
 800a114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a118:	4630      	mov	r0, r6
 800a11a:	f000 f81f 	bl	800a15c <_isatty_r>
 800a11e:	b128      	cbz	r0, 800a12c <__smakebuf_r+0x74>
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	f023 0303 	bic.w	r3, r3, #3
 800a126:	f043 0301 	orr.w	r3, r3, #1
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	89a0      	ldrh	r0, [r4, #12]
 800a12e:	4305      	orrs	r5, r0
 800a130:	81a5      	strh	r5, [r4, #12]
 800a132:	e7cd      	b.n	800a0d0 <__smakebuf_r+0x18>
 800a134:	080091e1 	.word	0x080091e1

0800a138 <_fstat_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4d07      	ldr	r5, [pc, #28]	; (800a158 <_fstat_r+0x20>)
 800a13c:	2300      	movs	r3, #0
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	4611      	mov	r1, r2
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	f7f7 fa04 	bl	8001552 <_fstat>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d102      	bne.n	800a154 <_fstat_r+0x1c>
 800a14e:	682b      	ldr	r3, [r5, #0]
 800a150:	b103      	cbz	r3, 800a154 <_fstat_r+0x1c>
 800a152:	6023      	str	r3, [r4, #0]
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	2000dd64 	.word	0x2000dd64

0800a15c <_isatty_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4d06      	ldr	r5, [pc, #24]	; (800a178 <_isatty_r+0x1c>)
 800a160:	2300      	movs	r3, #0
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	f7f7 fa03 	bl	8001572 <_isatty>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_isatty_r+0x1a>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_isatty_r+0x1a>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	2000dd64 	.word	0x2000dd64

0800a17c <_init>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	bf00      	nop
 800a180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a182:	bc08      	pop	{r3}
 800a184:	469e      	mov	lr, r3
 800a186:	4770      	bx	lr

0800a188 <_fini>:
 800a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18a:	bf00      	nop
 800a18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a18e:	bc08      	pop	{r3}
 800a190:	469e      	mov	lr, r3
 800a192:	4770      	bx	lr
